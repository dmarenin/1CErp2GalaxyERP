#Область ВспомогательныеМетоды

Функция ПолучитьСтавкуНДСПосуммам(Сумма, СуммаНДС) Экспорт
	
	СуммаНДС = Число(СуммаНДС);
	Сумма = Число(Сумма);
	
	СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;

	Если ЗначениеЗаполнено(СуммаНДС) Тогда 
		
		НДС = Сумма * 0.15;
		
		Если СуммаНДС > НДС Тогда 
			СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		Иначе
			СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтавкаНДС;
	
КонецФункции

Функция ПолучитьСкладПоПодразделению(Подразделение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Склады.Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Подразделение = &Подразделение";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();

	Если РезультатЗапроса.Количество() = 0 Тогда 
		Возврат Справочники.Склады.ПустаяСсылка();
	Иначе
		Возврат РезультатЗапроса[0].Ссылка;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеПоменеджеру(Менеджер, СтруктураАналитики) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоответствиеХозОпер.Менеджер.Наименование КАК Менеджер,
		|	СоответствиеХозОпер.Операция,
		|	СоответствиеХозОпер.Аналитика
		|ИЗ
		|	РегистрСведений.СоответствиеХозОпер КАК СоответствиеХозОпер
		|ГДЕ
		|	СоответствиеХозОпер.Менеджер.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Менеджер);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() = 0 Тогда 
		Возврат Неопределено;
	Иначе
		
		СтруктураАналитики = новый Структура;
		
		СтруктураАналитики.Вставить("Операция", РезультатЗапроса[0].Операция);
		СтруктураАналитики.Вставить("Аналитика",РезультатЗапроса[0].Аналитика);
		
		Возврат РезультатЗапроса[0].Менеджер;
		
	КонецЕсли;
	
КонецФункции

Функция ПреобразоватьДатуИзГалактики(Знач ДатаГалактика) Экспорт
	
	Дата1с = Дата(1, 1, 1);
	
	Если Не ЗначениеЗаполнено(ДатаГалактика) Тогда 
		Возврат  Дата1с;
	КонецЕсли;
	
	_ДатаГалактика = Число(ДатаГалактика);
	
	Год = Цел(_ДатаГалактика/65536);
	День = _ДатаГалактика%256;
	Месяц = (_ДатаГалактика - (Год * 65536) - День)/256;

	Дата1с = Дата(Год, Месяц, День);
	
	Возврат Дата1с;
	
КонецФункции

Функция ПолучитьСтатическиеДанные() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатическиеДанные.Значение,
	|	СтатическиеДанные.Реквизит
	|ИЗ
	|	РегистрСведений.СтатическиеДанные КАК СтатическиеДанные";
	
	СтатическиеДанные = Запрос.Выполнить().Выгрузить();
	
	Возврат СтатическиеДанные;
	
КонецФункции

Функция ПолучитьСчет(СчетГалактика) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоответствиеСчетов.Счет1с
	|ИЗ
	|	РегистрСведений.СоответствиеСчетов КАК СоответствиеСчетов
	|ГДЕ
	|	СоответствиеСчетов.СчетГалактика = &СчетГалактика";
	
	Запрос.УстановитьПараметр("СчетГалактика", СчетГалактика);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Выборка.Следующий();
		
		Возврат Выборка.Счет1с;
		
	Иначе
		
		Возврат ПланыСчетов.Хозрасчетный.НайтиПоКоду(СчетГалактика);
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТаблицуЗначенийИзТабличногоДокумента(ТабДок) Экспорт 
	
	Построитель = Новый ПостроительЗапроса;
	
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабДок.Область(1, 1, ТабДок.ВысотаТаблицы, 100));
	
	Построитель.Выполнить();
	
	ТаблицаЗначений = Построитель.Результат.Выгрузить();
	
	Возврат ТаблицаЗначений;
	
КонецФункции

#КонецОбласти

#Область Оповещение

Процедура ОтправитьОповещение(ТекстОшибки, Вариант = Неопределено) Экспорт

	Возврат;
	
	Если Не Константы.СинхронизацияГалактикаОповещатьОбОшибках.Получить() Тогда 
		Возврат;
	КонецЕсли;
	
	Сообщение                     			= Новый ИнтернетПочтовоеСообщение; 
	
	Сообщение.Отправитель.Адрес             = "marenin_000@mail.ru";
	Сообщение.Отправитель.ОтображаемоеИмя   = "ОшибкаЗагрузкиДанных";      
	Сообщение.Тема                          = "ОшибкаЗагрузкиДанных";            
	
	Текст = Сообщение.Тексты.Добавить();                  
	
	Текст.ТипТекста  = ТипТекстаПочтовогоСообщения.ПростойТекст;
	Текст.Текст      = ТекстОшибки;
	
	Получатель                              = Сообщение.Получатели.Добавить("mexanik_96@mail.ru");
	
	ИнПрофиль                     = Новый ИнтернетПочтовыйПрофиль;
	
	ИнПрофиль.ВремяОжидания       = 180;             
	ИнПрофиль.АдресСервераSMTP    = "smtp.mail.ru";      
	ИнПрофиль.Пользователь        = "marenin_000";      
	ИнПрофиль.ПользовательSMTP    = "marenin_000";
	ИнПрофиль.Пароль              = "Marra7";      
	ИнПрофиль.ПарольSMTP          = "Marra7";      
	ИнПрофиль.ПортSMTP            = 465;
	ИнПрофиль.ИспользоватьSSLSMTP = Истина;
	ИнПрофиль.ИспользоватьSSLPOP3 = Истина;
	ИнПрофиль.АутентификацияSMTP  = СпособSMTPАутентификации.Login;      
	
	ИнПочта                       = Новый ИнтернетПочта;            
	
	Попытка            
		
		ИнПочта.Подключиться(ИнПрофиль);
		
	Исключение
		
		Возврат;
		
	КонецПопытки;            
	
	Попытка            
		
		ИнПочта.Послать(Сообщение); 
		
	Исключение
		
		ИнПочта.Отключиться();    
		
		Возврат;
		
	КонецПопытки;
	
	ИнПочта.Отключиться(); 
	
КонецПроцедуры

Процедура ЗаписатьЛог(Текст, Вариант = "err_", НомерПопытки = 1, Расширение = ".csv", Каталог = "C:\Temp\") Экспорт
	
	ИмяФайла = Вариант+Формат(ТекущаяДата(),"ДФ=yyyy_MM_dd");
	
	Адрес = Каталог+ИмяФайла+Расширение;
	
	Попытка
		
		Журнал = Новый ЗаписьТекста(Адрес, КодировкаТекста.ANSI,,Истина);
		
	Исключение
		
		Журнал = Неопределено;
		
		Если НомерПопытки=10 Тогда 
			Возврат;
		КонецЕсли;
		
		Ожидать();
		
		ЗаписатьЛог(Текст, Вариант, НомерПопытки+1);
		
	КонецПопытки;
	
	Если Вариант = "err_" Тогда 
		
		ТекстОшибки = СтрЗаменить(Текст, Символы.ПС, " ");
		
		Журнал.ЗаписатьСтроку(ТекущаяДата(), ";");
		Журнал.ЗаписатьСтроку(НомерПопытки, ";");
		Журнал.ЗаписатьСтроку(ТекстОшибки);
		
	ИначеЕсли Вариант = "tran_" Тогда 
		
		Журнал.ЗаписатьСтроку(ТекущаяДата(), ";");
		Журнал.ЗаписатьСтроку(Текст.id1C, ";");
		Журнал.ЗаписатьСтроку(Текст.Ссылка, ";");
		Журнал.ЗаписатьСтроку(Текст.Ссылка.Дата, ";");
		Журнал.ЗаписатьСтроку(Текст.Ссылка.Номер, ";");
		Журнал.ЗаписатьСтроку(Текст.Событие, ";");
		Журнал.ЗаписатьСтроку(Текст.УникальныйИдентификаторПриемника, ";");
		Журнал.ЗаписатьСтроку(Текст.ТипПриемника);
		
	ИначеЕсли Вариант = "att_" Тогда 
		
		Журнал.ЗаписатьСтроку(ТекущаяДата(), ";");
		Журнал.ЗаписатьСтроку(Текст.Вид, ";");
		Журнал.ЗаписатьСтроку(Текст.Текст, ";");
		Журнал.ЗаписатьСтроку(Текст.НомерПотока, ";");
		Журнал.ЗаписатьСтроку(Текст.ОбъектДляЗаписи, ";");
		Журнал.ЗаписатьСтроку(Текст.F_NREC);
		
	ИначеЕсли Вариант = "inf_" Тогда 
		
		Журнал.ЗаписатьСтроку(ТекущаяДата(), ";");
		Журнал.ЗаписатьСтроку(Текст.Вид, ";");
		Журнал.ЗаписатьСтроку(Текст.Текст, ";");
		Журнал.ЗаписатьСтроку(Текст.НомерПотока);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Попытка
		
		Журнал.Закрыть();
		
	Исключение
		
		Журнал = Неопределено;
		
		Если НомерПопытки=10 Тогда 
			Возврат;
		КонецЕсли;
		
		Ожидать();
		
		ЗаписатьЛог(Текст, Вариант, НомерПопытки+1);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОповеститьОбОшибке(ТекстОшибки, Стек = "", Объект = "", ДублироватьЗаписьВЖурнал = Ложь) Экспорт
	
	ТекстОшибки = "ОШИБКА: " + ТекстОшибки + Символы.ПС +
				  "СТЕК: "   + Строка(Стек) +  Символы.ПС + 
				  "ОБЪЕКТ: " + Строка(Объект);
	
	ПараметрыОповещения = Новый Массив;
	
	ПараметрыОповещения.Добавить(ТекстОшибки);
	
	//Не используется, работает
	//ФоновыеЗадания.Выполнить("СинхронизацияГалактикаОбщегоНазначения.ОтправитьОповещение", ПараметрыОповещения);
	
	Если ДублироватьЗаписьВЖурнал Тогда 
		
		ЗаписьЖурналаРегистрации("СинхронизацияГалактика.Ошибка", УровеньЖурналаРегистрации.Ошибка, , ,ТекстОшибки);
		
	КонецЕсли;
	
	//Используется локальный лог
	ФоновыеЗадания.Выполнить("СинхронизацияГалактикаОбщегоНазначения.ЗаписатьЛог", ПараметрыОповещения);
	
КонецПроцедуры

Процедура СоздатьЗадачиПриЗаписиОбъекта(Предмет) Экспорт
	
	Возврат;
	
	Если Не Константы.СинхронизацияГалактикаОповещатьОбИзмененияхОбъектов.Получить() Тогда 
		Возврат;
	КонецЕсли;
	
	///Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	//
	//Задача.ОсновнойОбъектАдресации = ОбъектДляЗаписи.Ссылка; 
	//Задача.Исполнитель = Пользователи.ТекущийПользователь();
	//
	//Задача.Наименование = "Изменения объекта " + ОбъектДляЗаписи.Ссылка; 
	//
	//Задача.Автор = Пользователи.ТекущийПользователь();
	//Задача.Предмет = ОбъектДляЗаписи.Ссылка; 
	//Задача.ДатаНачала = ТекущаяДата();
	//Задача.ДатаПринятияКИсполнению = ТекущаяДата();
	//Задача.Описание = "Получены данные из Галактика";
	//Задача.СрокИсполнения = ТекущаяДата(); 
	//
	//Задача.Записать();
	//
	//Задача.АктивироватьИнтерактивно();

КонецПроцедуры

Процедура ОповеститьОЗаписиОбъекта(Ссылка) Экспорт
	
	ПараметрыОповещения = Новый Массив;
	ПараметрыОповещения.Добавить(Ссылка);
	
	ФоновыеЗадания.Выполнить("СинхронизацияГалактикаОбщегоНазначения.СоздатьЗадачиПриЗаписиОбъекта", ПараметрыОповещения);
		
КонецПроцедуры

#КонецОбласти

#Область РаботаСОбъектами

Функция ПолучитьСтандартноеОписаниеПоиска() Экспорт
	
	СтруктураПоиска = Новый Структура;
	
	//Стандартные
	СтруктураПоиска.Вставить("ИзменятьСуществующие", Истина);
	СтруктураПоиска.Вставить("СоздаватьНовые", Истина);
	
	//Дополнительные
	//Значения по умолчанию
	СтруктураПоиска.Вставить("ПропускатьЕсли_ПометкаУдаления", Ложь);
	СтруктураПоиска.Вставить("ПропускатьЕсли_Проведен", Ложь);
	СтруктураПоиска.Вставить("ПропускатьЕсли_ЕстьВБлокЛисте", Ложь);
	
	Возврат СтруктураПоиска; 
	
КонецФункции

Функция ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант, ОписаниеПоиска = Неопределено) Экспорт
	
	Если Менеджер = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ТекСтрока.f_date_sinh = ПреобразоватьДатуИзГалактики(ТекСтрока.F_ATL_LASTDATE); 
	
	СтруктураИзменений = ПроверитьОбновлениеДанных(ИмяТаблицы, ТекСтрока);
	
	Если Не Константы.СинхронизацияГалатикаОтладка.Получить() Тогда 
		
		Если СтруктураИзменений.НетИзменений Тогда 
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
		
	ОбъектДляЗаписи = Неопределено;
	
	ИзменятьСуществующие = Ложь;
	СоздаватьНовые = Истина;
	
	ПропускатьЕсли_ПометкаУдаления = Ложь;
	ПропускатьЕсли_Проведен = Ложь;
	ПропускатьЕсли_ЕстьВБлокЛисте = Ложь;
	
	//Определяемое описание поиска
	Если Не ОписаниеПоиска = Неопределено Тогда 
		
		//Стандартные
		ОписаниеПоиска.Свойство("ИзменятьСуществующие", ИзменятьСуществующие);		
		ОписаниеПоиска.Свойство("СоздаватьНовые", 		СоздаватьНовые);
		
		Если ИзменятьСуществующие = Неопределено Тогда 
			ИзменятьСуществующие = Истина;
		КонецЕсли;
		
		Если СоздаватьНовые = Неопределено Тогда 
			СоздаватьНовые = Истина;
		КонецЕсли;
		
		ОписаниеПоиска.Свойство("ПропускатьЕсли_ПометкаУдаления", 	ПропускатьЕсли_ПометкаУдаления);		
		ОписаниеПоиска.Свойство("ПропускатьЕсли_Проведен", 			ПропускатьЕсли_Проведен);
		ОписаниеПоиска.Свойство("ПропускатьЕсли_ЕстьВБлокЛисте", 	ПропускатьЕсли_ЕстьВБлокЛисте);
		
		//Дополнительные
		//Значения по умолчанию
		Если ПропускатьЕсли_ПометкаУдаления = Неопределено Тогда 
			ПропускатьЕсли_ПометкаУдаления = Ложь;
		КонецЕсли;
		
		Если ПропускатьЕсли_Проведен = Неопределено Тогда 
			ПропускатьЕсли_Проведен = Ложь;
		КонецЕсли;
		
		Если ПропускатьЕсли_ЕстьВБлокЛисте = Неопределено Тогда 
			ПропускатьЕсли_ЕстьВБлокЛисте = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураИзменений.Значение1С = Неопределено И СоздаватьНовые Тогда 
		
		Если Вариант = 1 Тогда
			
			ОбъектДляЗаписи = Менеджер.СоздатьЭлемент();
			ОбъектДляЗаписи.УстановитьНовыйКод();
			
		ИначеЕсли Вариант = 2 Тогда 
			
			ОбъектДляЗаписи = Менеджер.СоздатьГруппу();
			ОбъектДляЗаписи.УстановитьНовыйКод();
			
		ИначеЕсли Вариант = 3 Тогда
			
			ОбъектДляЗаписи = Менеджер.СоздатьДокумент();
			ОбъектДляЗаписи.УстановитьНовыйНомер();
			
		ИначеЕсли Вариант = 4 Тогда
			
			ОбъектДляЗаписи = Менеджер.СоздатьВидРасчета();
			
		КонецЕсли;
		
	Иначе
		
		Если ИзменятьСуществующие Тогда 
			
			ОбъектДляЗаписи = СтруктураИзменений.Значение1С.ПолучитьОбъект();
			
			//Дополнительные
			ОбъектДляЗаписи_ПометкаУдаления = ОбъектДляЗаписи.ПометкаУдаления; 
			ОбъектДляЗаписи_ЕстьВБлокЛисте = ПроверитьБлокЛистПоСсылке(ОбъектДляЗаписи.Ссылка);
			
			//Условные
			ПроверяемыйТип = ТипЗнч(ОбъектДляЗаписи); 
			
			ТипВсесслыки = Документы.ТипВсеСсылки();
			
			ЭтоДокумент = ТипВсесслыки.СодержитТип(ПроверяемыйТип);
			Если ЭтоДокумент Тогда 
				
				ОбъектДляЗаписи_Проведен = Ложь;
				
				Попытка
					ОбъектДляЗаписи_Проведен = ОбъектДляЗаписи.Проведен;
				Исключение
				Конецпопытки;
				
			КонецЕсли;
			
			Если ОбъектДляЗаписи_ПометкаУдаления И ПропускатьЕсли_ПометкаУдаления Тогда 
				
				ОбъектДляЗаписи = Неопределено;
				
			КонецЕсли;
			
			Если Не ОбъектДляЗаписи_Проведен=Неопределено Тогда 
				
				Если ОбъектДляЗаписи_Проведен И ПропускатьЕсли_Проведен Тогда 
					
					ОбъектДляЗаписи = Неопределено;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОбъектДляЗаписи_ЕстьВБлокЛисте И ПропускатьЕсли_ЕстьВБлокЛисте Тогда 
				
				ОбъектДляЗаписи = Неопределено;
				
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбъектДляЗаписи;
	
КонецФункции

Функция ПроверитьБлокЛистПоСсылке(Ссылка)
	
	//TODO()
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьСтандартныйОтбор() Экспорт
	
	СтруктураПоиска = Новый Структура;
	
	СтруктураПоиска.Вставить("Префикс", "");
	СтруктураПоиска.Вставить("ВидСравнения", "=");
	СтруктураПоиска.Вставить("ПостФикс", "");
	СтруктураПоиска.Вставить("Алиас", "&F_NREC");
	СтруктураПоиска.Вставить("Поле", "F_NREC");
	СтруктураПоиска.Вставить("Значение", Неопределено);
	
	Возврат СтруктураПоиска;
	
КонецФункции

Функция НайтиПодчиненныйОбъектПоОтбору(Идентификатор, ИмяТаблицы, Тип, 
										БлокировкиПотоков = Неопределено, НомерПотока = Неопределено,
										ОписаниеПоиска = Неопределено, СтруктураПоиска = Неопределено) Экспорт
	
	Если ЭтоПустаяСсылка(Идентификатор) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	СоздаватьНовые = Истина;
	ИзменятьСуществующие = Ложь;

	//Определяемое описание поиска
	Если Не ОписаниеПоиска = Неопределено Тогда 
		
		//Стандартные
		ОписаниеПоиска.Свойство("СоздаватьНовые", 		СоздаватьНовые);
		ОписаниеПоиска.Свойство("ИзменятьСуществующие", ИзменятьСуществующие);		
		
		Если СоздаватьНовые = Неопределено Тогда 
			СоздаватьНовые = Истина;
		КонецЕсли;
				
		Если ИзменятьСуществующие = Неопределено Тогда 
			ИзменятьСуществующие = Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Объект = НайтиОбъект(Идентификатор, ИмяТаблицы, Тип);
	
	Если (Объект=Неопределено и СоздаватьНовые) или (Не Объект.Ссылка.Пустая() и ИзменятьСуществующие) Тогда 
		
		УстановитьБлокировкуНаОбъект(БлокировкиПотоков, НомерПотока, Идентификатор, ИмяТаблицы, Истина);
		
		//Стандартное значение
		ПоискПоИД = СтруктураПоиска=Неопределено;
		Если ПоискПоИД Тогда 
			
			СтруктураПоиска = ПолучитьСтандартныйОтбор();
			
			СтруктураПоиска.Поле = "BD_TO_NVARCHAR("+ИмяТаблицы + "." + СтруктураПоиска.Поле+")";
			
			Если Не ТипЗнч(Идентификатор) = Тип("Строка") Тогда 
				Значение = ВнешниеИсточникиДанных.ГалактикаБД.BD_TO_NVARCHAR(Идентификатор)
			Иначе
				Значение = Идентификатор;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Значение) Тогда 
				Возврат Неопределено;
			КонецЕсли;
				
			СтруктураПоиска.Значение = Значение;
			
		КонецЕсли;
		
		СоздатьНовыйЭлементИзВнешнихИсточников(ИмяТаблицы, Тип, СтруктураПоиска);
		
		УстановитьБлокировкуНаОбъект(БлокировкиПотоков, НомерПотока, Идентификатор, ИмяТаблицы, Ложь);
		
		Объект = НайтиОбъект(Идентификатор, ИмяТаблицы, Тип);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект) Тогда 
		Возврат Объект.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ЭтоПустаяСсылка(F_NREC) Экспорт
	
	_F_NREC = ПривестиИдентификаторВСтроку(F_NREC);

	Если _F_NREC = Неопределено Тогда 
		Возврат Истина;
	КонецЕсли;

	Если _F_NREC = "0x8000000000000000" Тогда 
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура СоздатьНовыйЭлементИзВнешнихИсточников(ИмяТаблицы, Тип, СтруктураПоиска) Экспорт
	
	СтруктураТаблицы = Новый Структура;
	
	СтруктураТаблицы.Вставить("Имя", ИмяТаблицы); 
	СтруктураТаблицы.Вставить(СтруктураТаблицы.Имя, Неопределено); 
	
	Префикс = СтруктураПоиска.Префикс;
	ВидСравненияЗапроса = СтруктураПоиска.ВидСравнения;
	ПостФикс = СтруктураПоиска.ПостФикс;
	Алиас = СтруктураПоиска.Алиас;
	Значение = СтруктураПоиска.Значение;
	Поле = СтруктураПоиска.Поле;
	
	ДобавитьУсловие(СтруктураТаблицы, СтруктураТаблицы.Имя, ВидСравненияЗапроса, Алиас, Поле, Значение, Префикс, ПостФикс);  
	
	ПолучитьИзмененияНаСервере(, СтруктураТаблицы.Имя, СтруктураТаблицы);
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеРеквизиты(Свойство = Неопределено, Значение = Неопределено, ОбъектДляЗаписи = Неопределено) Экспорт
	
	Если Свойство = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбъектДляЗаписи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборПоиска = Новый Структура;
	
	ОтборПоиска.Вставить("Свойство", Свойство);
	
	ТекСтроки = ОбъектДляЗаписи.ДополнительныеРеквизиты.НайтиСтроки(ОтборПоиска);
	
	Если ТекСтроки.Количество()=0 Тогда  
		
		НоваяСтрока = ОбъектДляЗаписи.ДополнительныеРеквизиты.Добавить();
		НоваяСтрока.Значение = Значение;
		НоваяСтрока.Свойство = Свойство.Значение; 
		
	Иначе
		
		Для Каждого ТекСтрока Из ТекСтроки Цикл
			ТекСтроки.Значение = Значение;
		КонецЦикла;
		
	КонецЕсли;
	
	ОбъектДляЗаписи.ОбменДанными.Загрузка = Истина;
	
	ОбъектДляЗаписи.Записать();
	
КонецПроцедуры

Функция ПроверитьОбновлениеДанных(ИмяТаблицы, ТекСтрока) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Соответствие1СГалактикаСрезПоследних.Значение1С,
	|	Соответствие1СГалактикаСрезПоследних.F_NREC,
	|	Соответствие1СГалактикаСрезПоследних.ИмяТаблицы,
	|	Соответствие1СГалактикаСрезПоследних.ТипЗначения,
	|	Соответствие1СГалактикаСрезПоследних.f_date_sinh
	|ИЗ
	|	РегистрСведений.Соответствие1СГалактика.СрезПоследних(
	|			,
	|			ИмяТаблицы = &ИмяТаблицы
	|				И F_NREC = &F_NREC) КАК Соответствие1СГалактикаСрезПоследних";
	
	Если Не ТипЗнч(ТекСтрока.F_NREC) = Тип("Строка") Тогда 
		F_NREC = ВнешниеИсточникиДанных.ГалактикаБД.BD_TO_NVARCHAR(ТекСтрока.F_NREC)
	Иначе
		F_NREC = ТекСтрока.F_NREC;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("F_NREC", F_NREC);
	Запрос.УстановитьПараметр("ИмяТаблицы", ИмяТаблицы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураИзменений = Новый Структура;
	
	Значение1С = Неопределено;
	
	НетИзменений = Ложь;
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если ТипЗнч(ТекСтрока.f_date_sinh) = Тип("Дата") Тогда 
			
			НетИзменений = Не (ТекСтрока.f_date_sinh > Выборка.f_date_sinh);
			
		КонецЕсли;
		
		Значение1С = Выборка.Значение1С;
		
	КонецЕсли;
	
	СтруктураИзменений.Вставить("НетИзменений", НетИзменений);
	СтруктураИзменений.Вставить("Значение1С", Значение1С);
	
	Возврат СтруктураИзменений;	
	
КонецФункции

Функция ПривестиИдентификаторВСтроку(F_NREC) Экспорт
	
	Если Не ЗначениеЗаполнено(F_NREC) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ТипЗнч(F_NREC) = Тип("Строка") Тогда 
		_F_NREC = ВнешниеИсточникиДанных.ГалактикаБД.BD_TO_NVARCHAR(F_NREC);
	Иначе
		_F_NREC = F_NREC;
	КонецЕсли;
	
	//добавлено для совместимости с ВО
	Если Не Лев(_F_NREC, 3) = "0x8" Тогда 
		_F_NREC = СтрЗаменить(_F_NREC, "0x4", "0xC"); 			
	КонецЕсли;
	
	Возврат _F_NREC; 
	
КонецФункции

Функция НайтиОбъект(F_NREC, ИмяТаблицы, ТипЗначения) Экспорт 
	
	_F_NREC = ПривестиИдентификаторВСтроку(F_NREC);
	
	Если _F_NREC = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Соответствие1СГалактикаСрезПоследних.Значение1С
	|ИЗ
	|	РегистрСведений.Соответствие1СГалактика.СрезПоследних КАК Соответствие1СГалактикаСрезПоследних
	|ГДЕ
	|	Соответствие1СГалактикаСрезПоследних.ИмяТаблицы = &ИмяТаблицы
	|	И Соответствие1СГалактикаСрезПоследних.ТипЗначения = &ТипЗначения
	|	И Соответствие1СГалактикаСрезПоследних.F_NREC = &F_NREC";
	
	Запрос.УстановитьПараметр("F_NREC", _F_NREC);
	Запрос.УстановитьПараметр("ИмяТаблицы", ИмяТаблицы);
	Запрос.УстановитьПараметр("ТипЗначения", ТипЗначения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат Неопределено;
	Иначе
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		Возврат ВыборкаДетальныеЗаписи.Значение1С;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ЗаписьОбъектов

Процедура ДополнительнаяЗапись(Ссылка, ДанныеЗаполнения = Неопределено, РежимЗаписи = Неопределено) Экспорт 
	
	ОбъектДляЗаписи = Ссылка.ПолучитьОбъект();
	
	ОбъектДляЗаписи.ОбменДанными.Загрузка = Ложь;
	
	Попытка
		
		ОбъектДляЗаписи.Заполнить(ДанныеЗаполнения);
		
	Исключение
		
		ТекстОшибки = "ОбъектДляЗаписи.Заполнить " + ОписаниеОшибки();
		
		ОповеститьОбОшибке(ТекстОшибки);
		
	КонецПопытки;
	
	ОбъектДляЗаписи.ДополнительныеСвойства.Вставить("ОтказОтРегистрацииДляСинхронизацияГалактика");
	
	Попытка
		
		Если ОбъектДляЗаписи.Модифицированность() Тогда 
			
			//ОбъектДляЗаписи.Прочитать();
			
			Если РежимЗаписи=Неопределено Тогда
				ОбъектДляЗаписи.Записать();
			Иначе
				ОбъектДляЗаписи.Записать(РежимЗаписи);
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ТекстОшибки = "ДополнительнаяЗапись " + ОписаниеОшибки();
		
		ОповеститьОбОшибке(ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьОписаниеЗаписи()
	
	Структура = Новый Структура("ИмяТаблицы, Значение1С, ТипЗначения, F_DATE_SINH, F_NREC, Период");   
	
	Возврат Структура;
	
КонецФункции

Процедура ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы = "", 
	ТекСтрока = "", ПараметрыЗаписи = Неопределено, 
	Регистрировать = Истина, Загрузка = Истина, 
	ДанныеЗаполнения = Неопределено, СниматьПометкуУдаления = Истина,
	РежимЗаписи = Неопределено, НомерПопытки = 1) Экспорт
	
	ОбъектДляЗаписи.F_NREC = ТекСтрока.F_NREC;
	
	Если СниматьПометкуУдаления Тогда 
		ОбъектДляЗаписи.ПометкаУдаления  = Ложь;
	КонецЕсли;
	
	ОбъектДляЗаписи.ОбменДанными.Загрузка = Истина;
	
	Если Не ПараметрыЗаписи = Неопределено Тогда 
		ОбъектДляЗаписи.ДополнительныеСвойства = ПараметрыЗаписи;
	КонецЕсли;
	
	ОбъектДляЗаписи.ДополнительныеСвойства.Вставить("ОтказОтРегистрацииДляСинхронизацияГалактика");
	
	Попытка
		
		ОбъектДляЗаписи.Записать();
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		ОповеститьОбОшибке(ТекстОшибки);
		
		Если НомерПопытки = 10 Тогда 
			
			ТекстОбъектРазрушен = "object destroy " + ЗначениеВСтрокуВнутр(ОбъектДляЗаписи) + Символы.ПС;
			ТекстОбъектРазрушен = "name " + ОбъектДляЗаписи.Наименование+ Символы.ПС;
			ТекстОбъектРазрушен = "nrec " + ТекСтрока.F_NREC;
			ТекстОбъектРазрушен = "struct " + ЗначениеВСтрокуВнутр(ТекСтрока) + Символы.ПС;
			
			ОповеститьОбОшибке(ТекстОбъектРазрушен);
			
			Возврат;
			
		КонецЕсли;
		
		Ожидать(5*(5*НомерПопытки));
		
		ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, 
		ТекСтрока, ПараметрыЗаписи, 
		Регистрировать, Загрузка, 
		ДанныеЗаполнения, СниматьПометкуУдаления,
		РежимЗаписи, НомерПопытки+1);
		
	КонецПопытки;
	
	Если Регистрировать Тогда 
		
		НаборЗаписей = РегистрыСведений.Соответствие1СГалактика.СоздатьНаборЗаписей();
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		
		ЗаписьНабора.Значение1С = ОбъектДляЗаписи.Ссылка;
		
		ЗаписьНабора.ИмяТаблицы = ИмяТаблицы;
		ЗаписьНабора.ТипЗначения = ТипЗнч(ЗаписьНабора.Значение1С); 
		ЗаписьНабора.F_DATE_SINH = ТекСтрока.F_DATE_SINH;
		ЗаписьНабора.F_NREC = ТекСтрока.F_NREC;
		ЗаписьНабора.Период = ТекущаяДата();
		
		Попытка
			НаборЗаписей.Записать(Ложь);
		Исключение
			ЗаписьНабора.Период = ТекущаяДата()+1;
			НаборЗаписей.Записать(Ложь);
		КонецПопытки;
		
	КонецЕсли;
	
	ПараметрыДополнительнойЗаписи = Новый Массив;
	ПараметрыДополнительнойЗаписи.Добавить(ОбъектДляЗаписи.Ссылка);
	ПараметрыДополнительнойЗаписи.Добавить(ДанныеЗаполнения);
	ПараметрыДополнительнойЗаписи.Добавить(РежимЗаписи);
	ФоновыеЗадания.Выполнить("СинхронизацияГалактикаОбщегоНазначения.ДополнительнаяЗапись", ПараметрыДополнительнойЗаписи);
	
	//Не используется, работает
	//ПараметрыОповещения = Новый Массив;
	//ПараметрыОповещения.Добавить(ОбъектДляЗаписи.Ссылка);
	//ФоновыеЗадания.Выполнить("СинхронизацияГалактикаОбщегоНазначения.ОповеститьОЗаписиОбъекта", ПараметрыОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСРегистромСоответствие

Процедура ОчиститьТаблицуИПометитьНаУдаление(ИмяТаблицы);

	Набор = РегистрыСведений.Соответствие1СГалактика.СоздатьНаборЗаписей();
	
	Набор.Отбор.ИмяТаблицы.Установить(ИмяТаблицы);
	
	Набор.Прочитать();
	
	Для Каждого ТекЗапись из Набор Цикл
		
		Объект = ТекЗапись.Значение1С.ПолучитьОбъект(); 
		
		Объект.УстановитьПометкуУдаления(Истина, Истина);
		
		Попытка
			
			Объект.Записать();
			
		Исключение
			
			Объект.ОбменДанными.Загрузка = Истина;
			
			Объект.Записать();
			
		КонецПопытки;
		
	КонецЦикла;
	
	ОчиститьСоответствие(ИмяТаблицы);
	
КонецПроцедуры

Процедура ОчиститьСоответствие(ИмяТаблицы) Экспорт 
	
	Набор = РегистрыСведений.Соответствие1СГалактика.СоздатьНаборЗаписей();
	
	Набор.Отбор.ИмяТаблицы.Установить(ИмяТаблицы);
	
	Набор.Записать();
	
КонецПроцедуры

Процедура СжатьСоответствие(ИмяТаблицы) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Соответствие1СГалактикаСрезПоследних.Период,
		|	Соответствие1СГалактикаСрезПоследних.Значение1С,
		|	Соответствие1СГалактикаСрезПоследних.ИмяТаблицы,
		|	Соответствие1СГалактикаСрезПоследних.ТипЗначения,
		|	Соответствие1СГалактикаСрезПоследних.F_DATE_SINH,
		|	Соответствие1СГалактикаСрезПоследних.F_NREC
		|ПОМЕСТИТЬ Срез
		|ИЗ
		|	РегистрСведений.Соответствие1СГалактика.СрезПоследних(, ИмяТаблицы = &ИмяТаблицы) КАК Соответствие1СГалактикаСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Соответствие1СГалактика.Период,
		|	Соответствие1СГалактика.Значение1С,
		|	Соответствие1СГалактика.ИмяТаблицы,
		|	Соответствие1СГалактика.ТипЗначения,
		|	Соответствие1СГалактика.F_DATE_SINH,
		|	Соответствие1СГалактика.F_NREC
		|ИЗ
		|	РегистрСведений.Соответствие1СГалактика КАК Соответствие1СГалактика
		|		ЛЕВОЕ СОЕДИНЕНИЕ Срез КАК Срез
		|		ПО Соответствие1СГалактика.Значение1С = Срез.Значение1С
		|			И Соответствие1СГалактика.ИмяТаблицы = Срез.ИмяТаблицы
		|			И Соответствие1СГалактика.ТипЗначения = Срез.ТипЗначения
		|			И Соответствие1СГалактика.F_NREC = Срез.F_NREC
		|ГДЕ
		|	Соответствие1СГалактика.Период < Срез.Период";
	
	Запрос.УстановитьПараметр("ИмяТаблицы", ИмяТаблицы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Набор = РегистрыСведений.Соответствие1СГалактика.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		
		Набор.Отбор.Период.Установить(Выборка.Период);
		Набор.Отбор.Значение1С.Установить(Выборка.Значение1С);
		Набор.Отбор.ИмяТаблицы.Установить(Выборка.ИмяТаблицы);
		Набор.Отбор.ТипЗначения.Установить(Выборка.ТипЗначения);
		Набор.Отбор.F_DATE_SINH.Установить(Выборка.F_DATE_SINH);
		Набор.Отбор.F_NREC.Установить(Выборка.F_NREC);
		
		Набор.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЗначениеПоляСоответствие(ИмяТаблицы, ИмяПоля, Значение) Экспорт 
	
	Набор = РегистрыСведений.Соответствие1СГалактика.СоздатьНаборЗаписей();
	
	Набор.Отбор.ИмяТаблицы.Установить(ИмяТаблицы);
	Набор.Отбор[ИмяПоля].Установить(ИмяТаблицы);
	
	Набор.Прочитать();
	
	Для Каждого ТекЗапись из Набор Цикл
		ТекЗапись[ИмяПоля] = Значение;
	КонецЦикла;
	
	Набор.Записывать = Истина;
	Набор.Записать(Истина);

КонецПроцедуры

#КонецОбласти

#Область РаботаСПотоками

Процедура СинхронизироватьПотоки(БлокировкиПотоков, НомерПотока, Объект, Тип) Экспорт
	
	Отбор = Новый Структура;
	
	Отбор.Вставить("Объект", Объект);
	Отбор.Вставить("Тип", Тип);
	Отбор.Вставить("Блокировка", Истина);
	
	СтрокиПоОбъекту = БлокировкиПотоков.НайтиСтроки(Отбор);
	Если СтрокиПоОбъекту.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ЭтоВзаимнаяБлокировка = ЭтоВзаимнаяБлокировка(СтрокиПоОбъекту, НомерПотока);
	Если ЭтоВзаимнаяБлокировка Тогда 
		
		//Ну вот так как то получилось...
		Ожидать();
		
		Возврат;
		
	КонецЕсли;
	
	Ожидать(3);
	
	СинхронизироватьПотоки(БлокировкиПотоков, НомерПотока, Объект, Тип);
	
КонецПроцедуры

Процедура Ожидать(Ожидание = 5)
	
	ВремяЗавершения = ТекущаяДата()+Ожидание;
	Пока ТекущаяДата()<ВремяЗавершения Цикл
		//Ожидание
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоВзаимнаяБлокировка(СтрокиПоОбъекту, НомерПотока)
	
	Для Каждого ТекСтрока Из СтрокиПоОбъекту Цикл
		
		Если ТекСтрока.НомерПотока = НомерПотока Тогда 
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура УстановитьБлокировкуНаОбъект(БлокировкиПотоков, НомерПотока, Объект, Тип, Блокировка) Экспорт

	Если БлокировкиПотоков = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Блокировка Тогда 
		
		СинхронизироватьПотоки(БлокировкиПотоков, НомерПотока, Объект, Тип);
		
	КонецЕсли;
	
	ТекСтрока = БлокировкиПотоков[НомерПотока-1];
	
	ТекСтрока.Тип = Тип;
	ТекСтрока.Объект = Объект;
	ТекСтрока.Блокировка = Блокировка;
	
КонецПроцедуры

Функция ИнициализироватьБлокировкиПотоков(ЧислоПотоков) Экспорт
	
	БлокировкиПотоков = Неопределено;
	
	Если ЧислоПотоков>1 Тогда  
		
		БлокировкиПотоков = Новый ТаблицаЗначений;
		
		БлокировкиПотоков.Колонки.Добавить("НомерПотока");
		БлокировкиПотоков.Колонки.Добавить("Блокировка");
		БлокировкиПотоков.Колонки.Добавить("Объект");
		БлокировкиПотоков.Колонки.Добавить("Тип");
		
		Для НомерПотока = 1 По ЧислоПотоков Цикл 
			
			СтрокаБлокировок = БлокировкиПотоков.Добавить();
			
			СтрокаБлокировок.НомерПотока = НомерПотока;
			СтрокаБлокировок.Блокировка = Ложь;
			СтрокаБлокировок.Объект = Неопределено;
			СтрокаБлокировок.Тип = Неопределено;
			
		КонецЦикла;	
		
	КонецЕсли;
	
	Возврат БлокировкиПотоков;
	
КонецФункции

Процедура ОбработкаОжиданияФоновыхЗаданий(МассивЗаданий)
	
	Отбор = Новый Структура;
	
	Отбор.Вставить("УникальныйИдентификатор");
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	Для Каждого ТекЗадание Из МассивЗаданий Цикл 
		
		Отбор.УникальныйИдентификатор = ТекЗадание.УникальныйИдентификатор;
		
		мФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор); 
		
		Если мФоновыеЗадания.Количество() > 0 Тогда 
			
			ОбработкаОжиданияФоновыхЗаданий(МассивЗаданий);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция ПолучитьДатуПоследнихИзменений() Экспорт 
	
	Возврат Константы.СинхронизацияГалактикаДатаЗагрузки.Получить();
	
КонецФункции

//Версия 1
//
//Процедура ПолучитьИзмененияНаСервере(ЧислоПотоков = 1, ИмяТаблицы = Неопределено, СтруктураУсловий = Неопределено) Экспорт
//	
//	//ИнициализироватьОбщийСтек();
//	
//	//ПараметрыСеанса.СинхронизацияГалактикаТекСеанс = Строка(Новый УникальныйИдентификатор); 
//	
//	ЕстьОшибкиСинхронизации = Ложь;
//	
//	Данные = ПрочитатьДанныеИзВнешнихИсточников(ИмяТаблицы, СтруктураУсловий);
//	
//	Если Данные = Неопределено Тогда 
//		Возврат;
//	КонецЕсли;
//	
//	Для Каждого ТекДанные Из Данные Цикл
//		
//		Если ТекДанные.Пустой() Тогда 
//			Продолжить;
//		КонецЕсли;
//		
//		ТаблицаДанных = ТекДанные.Выгрузить();
//		Если ТаблицаДанных.Количество()=0 Тогда 
//			Продолжить;
//		КонецЕсли;
//		
//		Попытка
//			ИмяТаблицы = ТаблицаДанных[0].Таблица;
//		Исключение
//			Продолжить;
//		КонецПопытки;
//		
//		Если Не ЗначениеЗаполнено(ИмяТаблицы) Тогда 
//			Продолжить;
//		КонецЕсли;
//		
//		ТаблицаДанных.Колонки.Добавить("f_date_sinh");
//		
//		ВыполнитьСинхронизацию(ТаблицаДанных, ИмяТаблицы, ЧислоПотоков, ЕстьОшибкиСинхронизации);
//		
//	КонецЦикла;
//	
//	ЭтоОтладка = Константы.СинхронизацияГалатикаОтладка.Получить();
//	Если Не ЭтоОтладка Тогда 
//		
//		Если Не ЕстьОшибкиСинхронизации Тогда 
//			Константы.СинхронизацияГалактикаДатаЗагрузки.Установить(ПолучитьДатуПоследнихИзменений());
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	//УдалитьЗаписьИзОбщегоСтека();
//	
//КонецПроцедуры

Процедура ПолучитьИзмененияНаСервере(ЧислоПотоков = 1, ИмяТаблицы = Неопределено, СтруктураУсловий = Неопределено) Экспорт
	
	ЕстьОшибкиСинхронизации = Ложь;
	
	Данные = ПрочитатьДанныеИзВнешнихИсточников(ИмяТаблицы, СтруктураУсловий);
	
	Если Данные=Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекДанные Из Данные Цикл
		
		Если ТекДанные.Пустой() Тогда 
			Продолжить;
		КонецЕсли;
		
		ВыполнитьСинхронизацию(ТекДанные, ЧислоПотоков, ЕстьОшибкиСинхронизации);
		
	КонецЦикла;
	
	ЭтоОтладка = Константы.СинхронизацияГалатикаОтладка.Получить();
	Если Не ЭтоОтладка Тогда 
		
		Если Не ЕстьОшибкиСинхронизации Тогда 
			//Константы.СинхронизацияГалактикаДатаЗагрузки.Установить(ПолучитьДатуПоследнихИзменений());
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьУсловие(СтруктураТаблицы, ИмяТаблицы, ВидСравненияЗапроса = "=", Алиас, Поле, Значение, Префикс = "", Постфикс = "") Экспорт
	
	Префикс = "";
	
	Параметры = Неопределено;
	
	Если СтруктураТаблицы.Свойство(ИмяТаблицы, Параметры) Тогда
		
		Если Не Параметры=Неопределено Тогда 
			
			Префикс = " И ";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры=Неопределено Тогда 
		
		Параметры = Новый ТаблицаЗначений;
		
		Параметры.Колонки.Добавить("ПРЕФИКС");
		Параметры.Колонки.Добавить("ПОЛЕ");
		Параметры.Колонки.Добавить("ВИДСРАВНЕНИЯ");
		Параметры.Колонки.Добавить("АЛИАС");
		Параметры.Колонки.Добавить("ПОСТФИКС");
		Параметры.Колонки.Добавить("ЗНАЧЕНИЕ");

		СтруктураТаблицы.Вставить(ИмяТаблицы, Параметры);
		
	КонецЕсли;		
	
	НоваяСтрока = Параметры.Добавить();
	
	НоваяСтрока.Префикс = Префикс;
	НоваяСтрока.ВидСравнения = ВидСравненияЗапроса;
	НоваяСтрока.Алиас = Алиас;
	НоваяСтрока.Поле = Поле;	
	НоваяСтрока.Значение = Значение;
	НоваяСтрока.Префикс = Префикс;
	НоваяСтрока.Постфикс = Постфикс;
	
КонецПроцедуры

Процедура ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения) Экспорт
	
	ШапкаУсловия = " ГДЕ ";
	
	ШаблонУсловия = "
	| #ПРЕФИКС #ПОЛЕ #ВИДСРАВНЕНИЯ #АЛИАС #ПОСТФИКС";
	
	Если СтруктураУсловий=Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Параметры = Неопределено;
	Если СтруктураУсловий.Свойство(ВариантПолучения, Параметры) Тогда
		
		Запрос.Текст = Запрос.Текст + ШапкаУсловия;
		
		Для Каждого ТекСтрока Из Параметры Цикл
			
			Запрос.Текст = Запрос.Текст + ШаблонУсловия;
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ПРЕФИКС", 		ТекСтрока.Префикс);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ПОЛЕ", 			ТекСтрока.Поле);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВИДСРАВНЕНИЯ", 	ТекСтрока.ВидСравнения);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#АЛИАС", 			ТекСтрока.Алиас);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ПОСТФИКС", 		ТекСтрока.Постфикс);
			
			Запрос.УстановитьПараметр(Сред(ТекСтрока.АЛИАС, 2), 		ТекСтрока.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПрочитатьДанныеИзВнешнихИсточников(ВариантПолучения=Неопределено, СтруктураУсловий=Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Разделитель = ";";
	
	Запрос = Новый Запрос;
	
	Для Каждого МодульСинхронизации Из МодулиСинхронизации() Цикл
		
		Попытка
			
			МодульСинхронизации.ДанныеИзВнешнихИсточников(ВариантПолучения, СтруктураУсловий, Запрос, Разделитель);
			
		Исключение
		КонецПопытки;
		
	КонецЦикла;  
	
	Если Не ЗначениеЗаполнено(Запрос.Текст) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		
		Результат = Запрос.ВыполнитьПакет();
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки()+Символы.ПС;
		
		ТекстОшибки = ТекстОшибки+"ТекстЗапроса "+Запрос.Текст+Символы.ПС;
		ТекстОшибки = ТекстОшибки+"Параметры "+ЗначениеВСтрокуВнутр(Запрос.Параметры)+Символы.ПС;
		
		СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки);
		
		Запрос = Неопределено;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ВыгрузитьСтек(Стек, ЧислоПотоков, ТекущийАдрес)
	
	СтатическиеДанные = ПолучитьСтатическиеДанные();
	
	ЧислоСтрокВТаблице = Стек.Количество();
	Если ЧислоСтрокВТаблице=0 Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы = Стек[0].Таблица;
	
	РазмерПроции = Цел(ЧислоСтрокВТаблице/ЧислоПотоков);
	
	БлокировкиПотоков = ИнициализироватьБлокировкиПотоков(ЧислоПотоков);
	
	МассивЗаданий = Новый Массив;
	
	Для НомерПотока = 1 По ЧислоПотоков Цикл 		  
		
		ИндексНачала = (НомерПотока - 1)*РазмерПроции;	
		
		Если НомерПотока = ЧислоПотоков Тогда
			
			РазмерПроции = ЧислоСтрокВТаблице-(ЧислоПотоков*РазмерПроции)+РазмерПроции;
			
		КонецЕсли;             
		
		НаборПараметров = Новый Массив;
		
		НаборПараметров.Добавить(Стек);
		НаборПараметров.Добавить(ИндексНачала);
		НаборПараметров.Добавить(РазмерПроции);				
		НаборПараметров.Добавить(ИмяТаблицы);				
		НаборПараметров.Добавить(СтатическиеДанные);
		НаборПараметров.Добавить(НомерПотока);
		НаборПараметров.Добавить(БлокировкиПотоков);
		
		Задание = ОпределитьЗаданиеПоТаблице(ИмяТаблицы, НаборПараметров);
		Если Задание = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		СтрукутураЛога = Новый Структура;
		
		СтрукутураЛога.Вставить("Вид", "Старт");
		СтрукутураЛога.Вставить("Текст", "");
		СтрукутураЛога.Вставить("НомерПотока", НомерПотока);
		
		ЗаписатьЛог(СтрукутураЛога, "inf_");
		
		МассивЗаданий.Добавить(Задание);
		
	КонецЦикла;
	
	Если МассивЗаданий.Количество() > 0 Тогда
		
		Попытка
			
			ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
			
		Исключение
			
			ЕстьОшибкиСинхронизации = Истина;
			
			ТекстОшибки = ОписаниеОшибки();
			
			ОповеститьОбОшибке(ТекстОшибки);
			
		КонецПопытки;
		
		ОбработкаОжиданияФоновыхЗаданий(МассивЗаданий);
		
	КонецЕсли;
	
	Стек.Очистить();
	
	ТекущийАдрес = 0;
	
КонецПроцедуры

//Версия 1
//
//Процедура ВыполнитьСинхронизацию(ТаблицаДанных, ИмяТаблицы, ЧислоПотоков, ЕстьОшибкиСинхронизации) Экспорт
//	
//	СтатическиеДанные = ПолучитьСтатическиеДанные();
//	
//	
//	
//	ЧислоСтрокВТаблице = ТаблицаДанных.Количество();
//	Если ЧислоСтрокВТаблице=0 Тогда 
//		Возврат;
//	КонецЕсли;
//	
//	РазмерПроции = Цел(ЧислоСтрокВТаблице/ЧислоПотоков);
//	БлокировкиПотоков = ИнициализироватьБлокировкиПотоков(ЧислоПотоков);
//	МассивЗаданий = Новый Массив;
//	
//	Для НомерПотока = 1 По ЧислоПотоков Цикл 		  
//		
//		ИндексНачала = (НомерПотока - 1)*РазмерПроции;	
//		
//		Если НомерПотока = ЧислоПотоков Тогда
//			
//			РазмерПроции = ЧислоСтрокВТаблице-(ЧислоПотоков*РазмерПроции)+РазмерПроции;
//			
//		КонецЕсли;                                        		
//		
//		НаборПараметров = Новый Массив;
//		
//		НаборПараметров.Добавить(ТаблицаДанных);
//		НаборПараметров.Добавить(ИндексНачала);
//		НаборПараметров.Добавить(РазмерПроции);				
//		НаборПараметров.Добавить(ИмяТаблицы);				
//		НаборПараметров.Добавить(СтатическиеДанные);
//		НаборПараметров.Добавить(НомерПотока);
//		НаборПараметров.Добавить(БлокировкиПотоков);
//		
//		Задание = ОпределитьЗаданиеПоТаблице(ИмяТаблицы, НаборПараметров);
//		Если Задание = Неопределено Тогда 
//			Продолжить;
//		КонецЕсли;
//		
//		ЗаписьЖурналаРегистрации("СинхронизацияГалактика.Старт", 
//        УровеньЖурналаРегистрации.Информация, , ,
//        "Номер " + НомерПотока);
//		
//		МассивЗаданий.Добавить(Задание);
//		
//	КонецЦикла;
//	
//	Если МассивЗаданий.Количество() > 0 Тогда
//		
//		Попытка
//			
//			ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
//			
//		Исключение
//			
//			ЕстьОшибкиСинхронизации = Истина;
//			
//			ТекстОшибки = ОписаниеОшибки();
//			
//			ОповеститьОбОшибке(ТекстОшибки);
//			
//		КонецПопытки;
//		
//		ОбработкаОжиданияФоновыхЗаданий(МассивЗаданий);
//		
//	КонецЕсли;	
//	
//КонецПроцедуры

Процедура ВыполнитьСинхронизацию(РезультатЗапроса, ЧислоПотоков, ЕстьОшибкиСинхронизации) Экспорт
	
	Стек = Новый Массив;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	
	ПределСтека = 4096;
	
	РазмерСтека = ВыборкаЗапроса.Количество();
	Если РазмерСтека < ПределСтека Тогда 
		
		ПределСтека = РазмерСтека;
		
	КонецЕсли;
	
	ТекущийАдрес = 1;	
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		РазмерСтека = РазмерСтека-1;

		ДанныеВставки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ВыборкаЗапроса);
		
		ДанныеВставки.Вставить("f_date_sinh");
		
		Стек.Добавить(ДанныеВставки);
		
		ВыгрузитьСтек = (ТекущийАдрес=ПределСтека) или (РазмерСтека=0);
		Если ВыгрузитьСтек Тогда 
			
			ВыгрузитьСтек(Стек, ЧислоПотоков, ТекущийАдрес);
			
		КонецЕсли;
		
		ТекущийАдрес = ТекущийАдрес+1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьЗаданиеПоТаблице(ИмяТаблицы, НаборПараметров) Экспорт
	
	Задание = Неопределено;
	
	Для Каждого МодульСинхронизации Из МодулиСинхронизации() Цикл
		Попытка
			Задание = МодульСинхронизации.ЗаданиеПоТаблице(ИмяТаблицы, НаборПараметров);
		Исключение КонецПопытки;
		Если Не Задание = Неопределено Тогда
			Возврат Задание;	
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция ПолучитьМассивИсклОбщихМодулей()
	
	Массив = Новый Массив;
	
	Массив.Добавить("СИНХРОНИЗАЦИЯГАЛАКТИКАОБЩЕГОНАЗНАЧЕНИЯ");
	Массив.Добавить("СИНХРОНИЗАЦИЯГАЛАКТИКАВЫГРУЗКАДАННЫХ");
	
	Возврат Массив;
	
КонецФункции

Функция ЭтоИсключаемыйОбщийМодуль(ИмяМодуля)
	
	МассивИсклОбщихМодулей = ПолучитьМассивИсклОбщихМодулей();
	
	Возврат НЕ (МассивИсклОбщихМодулей.Найти(ИмяМодуля) = Неопределено);

КонецФункции

Функция МодулиСинхронизации() Экспорт
	
	Результат = Новый Массив;
	
	Для Каждого МетаданныеОбщийМодуль Из Метаданные.ОбщиеМодули Цикл
		
		ИмяМодуля = ВРег(МетаданныеОбщийМодуль.Имя);
		
		Если СтрНачинаетсяС(ИмяМодуля, "СИНХРОНИЗАЦИЯГАЛАКТИКА") И (НЕ ЭтоИсключаемыйОбщийМодуль(ИмяМодуля))Тогда
			 
			Результат.Добавить(ОбщегоНазначения.ОбщийМодуль(ИмяМодуля));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс) Экспорт
	
	Индекс = ?(Сч=1, ИндексНачала, Индекс+1);
	
	ТекСтрока = ТаблицаДанных[Индекс]; 
	
	Возврат ТекСтрока;
	
КонецФункции

#КонецОбласти

#Область РегламентноеПолучениеДанныхИзГалактика

Функция ПолучитьМассивТаблицРегламентногоОбновления()
	
	МассивТаблиц = Новый Массив;
	
	
	//СинхронизацияГалактикаДС
	
	//dbo_T_SBBAN	
	СтруктураТаблицы = Новый Структура;
	СтруктураТаблицы.Вставить("Имя", "dbo_T_SBBAN"); 
	СтруктураТаблицы.Вставить(СтруктураТаблицы.Имя, Неопределено); 
	
	Поле = "GET_DT(dbo_T_SBBAN.F_ATL_LASTDATE, 0)";	
	ДобавитьУсловие(СтруктураТаблицы, СтруктураТаблицы.Имя, ">=", "&F_ATL_LASTDATE", Поле, ПолучитьДатуПоследнихИзменений());    	
	
	МассивТаблиц.Добавить(СтруктураТаблицы);
	
	//dbo_T_PLATVED
	СтруктураТаблицы = Новый Структура;
	СтруктураТаблицы.Вставить("Имя", "dbo_T_PLATVED"); 
	СтруктураТаблицы.Вставить(СтруктураТаблицы.Имя, Неопределено); 
	
	Поле = "GET_DT(dbo_T_PLATVED.F_ATL_LASTDATE, 0)";	
	ДобавитьУсловие(СтруктураТаблицы, СтруктураТаблицы.Имя, ">=", "&F_ATL_LASTDATE", Поле, ПолучитьДатуПоследнихИзменений());    	
	
	МассивТаблиц.Добавить(СтруктураТаблицы);
	
	//dbo_T_PLPOR	
	СтруктураТаблицы = Новый Структура;
	СтруктураТаблицы.Вставить("Имя", "dbo_T_PLPOR"); 
	СтруктураТаблицы.Вставить(СтруктураТаблицы.Имя, Неопределено); 
	
	Поле = "GET_DT(dbo_T_PLPOR.F_ATL_LASTDATE, 0)";	
	ДобавитьУсловие(СтруктураТаблицы, СтруктураТаблицы.Имя, ">=", "&F_ATL_LASTDATE", Поле, ПолучитьДатуПоследнихИзменений());    	
	
	МассивТаблиц.Добавить(СтруктураТаблицы);
	
	//СинхронизацияГалактикаОСНМА
	//МассивТаблиц.Добавить("dbo_T_SPMOVEOS");
	
	//СинхронизацияГалактикаПокупкиПродажи
	
	//изменения 10 08 2016 временное отключение
	////dbo_T_KATSOPR	
	//СтруктураТаблицы = Новый Структура;
	//СтруктураТаблицы.Вставить("Имя", "dbo_T_KATSOPR"); 
	//СтруктураТаблицы.Вставить(СтруктураТаблицы.Имя, Неопределено); 
	//
	//Поле = "GET_DT(dbo_T_KATSOPR.F_ATL_LASTDATE, 0)";	
	//ДобавитьУсловие(СтруктураТаблицы, СтруктураТаблицы.Имя, ">=", "&F_ATL_LASTDATE", Поле, ПолучитьДатуПоследнихИзменений());    	
	//
	//Поле = "GET_DT(dbo_T_KATSOPR.F_DSOPR, 0)";	
	//ДобавитьУсловие(СтруктураТаблицы, СтруктураТаблицы.Имя, ">=", "&F_DSOPR", Поле, ПолучитьДатуПоследнихИзменений());    	
	//
	//МассивТаблиц.Добавить(СтруктураТаблицы);
	//
	////dbo_T_SCHFACT	
	//СтруктураТаблицы = Новый Структура;
	//СтруктураТаблицы.Вставить("Имя", "dbo_T_SCHFACT"); 
	//СтруктураТаблицы.Вставить(СтруктураТаблицы.Имя, Неопределено); 
	//
	//Поле = "GET_DT(dbo_T_SCHFACT.F_ATL_LASTDATE, 0)";	
	//ДобавитьУсловие(СтруктураТаблицы, СтруктураТаблицы.Имя, ">=", "&F_ATL_LASTDATE", Поле, ПолучитьДатуПоследнихИзменений());    	
	//
	//Поле = "GET_DT(dbo_T_SCHFACT.F_DFACT, 0)";	
	//ДобавитьУсловие(СтруктураТаблицы, СтруктураТаблицы.Имя, ">=", "&F_DFACT", Поле, ПолучитьДатуПоследнихИзменений());    	
	//
	//МассивТаблиц.Добавить(СтруктураТаблицы);
	
	Возврат МассивТаблиц;
	
КонецФункции

Процедура РегламентноеПолучениеДанныхИзГалактика() Экспорт
	
	ЧислоПотоков = 4;
	
	МассивТаблиц = ПолучитьМассивТаблицРегламентногоОбновления();
	
	Для Каждого ТекСтрока Из МассивТаблиц Цикл
		
		ПолучитьИзмененияНаСервере(ЧислоПотоков, ТекСтрока.Имя, ТекСтрока);
		
	КонецЦикла;	
	
	ОповеститьОЗавершенииПоПочте();
	
КонецПроцедуры

Процедура ОповеститьОЗавершенииПоПочте()
	
	МассивВариантов = Новый Массив;
	
	МассивВариантов .Добавить("err_");
	МассивВариантов .Добавить("tran_");
	МассивВариантов .Добавить("att_");
	МассивВариантов .Добавить("inf_");

	Для Каждого ТекВариант Из МассивВариантов Цикл
		
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КлиентскаяЧасть

Процедура ВыполнитьСинхронизациюСправочников(МассивТаблиц) Экспорт
	
	ДатаНачала = НачалоДня(ТекущаяДата())-1;
	
	СкользящийМесяц = ДобавитьМесяц(ДатаНачала, -1); 
	
	ЧислоПотоков = 4;
	
	Для Каждого ТекСтрока Из МассивТаблиц Цикл
		
		СтруктураТаблицы = Новый Структура;
		
		СтруктураТаблицы.Вставить("Имя", ТекСтрока); 
		СтруктураТаблицы.Вставить(СтруктураТаблицы.Имя, Неопределено); 
		
		Поле = "GET_DT("+ СтруктураТаблицы.Имя+".F_ATL_LASTDATE, 0)";	
		ДобавитьУсловие(СтруктураТаблицы, СтруктураТаблицы.Имя, ">=", "&F_ATL_LASTDATE", Поле, СкользящийМесяц);    	
		
		ПолучитьИзмененияНаСервере(ЧислоПотоков, СтруктураТаблицы.Имя, СтруктураТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсыПереопределенияРегистрацииОбъекта

Процедура РегистрацияОбъекта_ПередОбработкой(Объект, Отказ, Выгрузка, ПРО) Экспорт 
	
КонецПроцедуры

Процедура РегистрацияОбъекта_ПриОбработке(Объект, Отказ, ТекстЗапроса, ПараметрыЗапроса, ИспользоватьКэш, Выгрузка) Экспорт
	
КонецПроцедуры

Процедура РегистрацияОбъекта_ПриОбработкеДоп(Объект, Отказ, ТекстЗапроса, ПараметрыЗапроса, ИспользоватьКэш, Выгрузка) Экспорт
	
КонецПроцедуры

Процедура РегистрацияОбъекта_ПослеОбработки(Объект, Отказ, Выгрузка, Получатели) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаПодписок

Функция ОтказОтРегистрацииОбъекта(Источник, Отказ)
	
	ДопСвойства = Источник.ДополнительныеСвойства;
	
	ВсеУзлыПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьМассивУзловПланаОбмена("СинхронизацияГалактика");
	
	//если был выгружен ранее
	БылВыгруженРанее = Ложь;
	Если Не Источник.Ссылка.Пустая() Тогда 
		
		Для Каждого УзелДляОбмена Из ВсеУзлыПланаОбмена Цикл
			
			БылВыгруженРанее = 
			
			БылВыгруженРанее или 
			
			РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(Источник.Ссылка, УзелДляОбмена);
			
		КонецЦикла;
		
	КонецЕсли;
	
	//если свойство ОтказОтРегистрацииДляСинхронизацияГалактика
	ЕстьСвойствоДляОтказа = ДопСвойства.Свойство("ОтказОтРегистрацииДляСинхронизацияГалактика");
	
	//если есть в кэше
	БылЗагруженРанее = РегистрыСведений.Соответствие1СГалактика.ОбъектЕстьВРегистре(Источник.Ссылка);
	
	ОтказОтРегистрацииОбъекта = ЕстьСвойствоДляОтказа или БылВыгруженРанее 
								или БылЗагруженРанее или Отказ
								или Источник.ОбменДанными.Загрузка; 
	
	Возврат ОтказОтРегистрацииОбъекта;
	
КонецФункции

Процедура ЗарегистрироватьИзмененияСправочникаПриЗаписиДляСинхронизацияГалактика(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	//ОтказОтРегистрацииОбъекта
	Если ОтказОтРегистрацииОбъекта(Источник, Отказ) Тогда 
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью("СинхронизацияГалактика", Источник, Отказ);

КонецПроцедуры

Процедура ЗарегистрироватьИзмененияДокументаПриЗаписиДляСинхронизацияГалактика(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	//ОтказОтРегистрацииОбъекта
	Если ОтказОтРегистрацииОбъекта(Источник, Отказ) Тогда 
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью("СинхронизацияГалактика", Источник, Отказ);

КонецПроцедуры

Процедура УстановитьДескрипторОбъектаПриЗаписи(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ЕстьСвойствоДляОтказа = Источник.ДополнительныеСвойства.Свойство("ОтказОтУстановкиДескриптора");
	Если ЕстьСвойствоДляОтказа Тогда 
		Возврат;
	КонецЕсли;
	
	Ссылка = Источник.Ссылка;
	
	Дескриптор = Справочники.ГалактикаГруппаПользователейСоздавшаяДокумент.ПолучитьДескриптор(Ссылка);
	Если Дескриптор=Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураЗаписи = Новый Структура("Объект, F_DESGR", Ссылка, Дескриптор);
	
	РегистрыСведений.ДескрипторыОбъектовДляВыгрузкиГалактика.ДобавитьЗапись(СтруктураЗаписи);
	
КонецПроцедуры

Процедура УстановитьДескрипторОбъектаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не РегистрыСведений.ДескрипторыОбъектовДляВыгрузкиГалактика.ОбъектЕстьВРегистре(Источник.Ссылка) Тогда 
		Возврат;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ОтказОтУстановкиДескриптора");
	
КонецПроцедуры

Процедура РегламентноеПолучениеДанныхИзГалактика1() Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура РегламентноеПолучениеДанныхВГалактика() Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

#КонецОбласти