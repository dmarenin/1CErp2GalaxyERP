#Область МетодыЗагрузкиКонтрагентов

Процедура ЗаполнитьВидКонтрагента(ТекСтрока, Контрагент)
	
	Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	
	Инн = Контрагент.ИНН;
	
	ТипОрганизации = Врег(ТекСтрока.F_TIPORG);
	
	Если СтрДлина(Инн) = 10 Тогда
		Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	ИначеЕсли СтрДлина(Инн) = 12 Тогда 
		Если Не ПустаяСтрока(ТипОрганизации) Тогда		
			Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
			Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
		Иначе
			Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
			Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Контрагент.КПП) Тогда 
			Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
			Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		ИначеЕсли Не ПустаяСтрока(ТипОрганизации) Тогда	
			Если ТипОрганизации = "ИП"  или  ТипОрганизации = "ЧП" или ТипОрганизации = "ПРЕДПРИНИМАТЕЛЬ" Тогда
				Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
				Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
			Иначе
				Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
				Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
			КонецЕсли;
		Иначе
			Если Врег(Лев(Контрагент.Наименование,2)) = "ИП"  или Врег(Лев(Контрагент.Наименование,2)) = "ЧП" Тогда
				Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
				Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
			ИначеЕсли Врег(Лев(Контрагент.Наименование,2)) = "ЗАО"  или Врег(Лев(Контрагент.Наименование,2)) = "ООО" Тогда
				Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
				Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
			Иначе
				//неопределенное поведение
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКонтактнуюИнформацию(ТекСтрока, Контрагент, СтатическиеДанные)
	
	Если ЗначениеЗаполнено(ТекСтрока.F_TEL) Тогда
		
		СтрокаКИ = Контрагент.КонтактнаяИнформация.Добавить();
		
		СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон; 
		СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		СтрокаКИ.ВидДляСписка = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		СтрокаКИ.НомерТелефона = ТекСтрока.F_TEL; 
		СтрокаКИ.Представление = ТекСтрока.F_TEL;
		СтрокаКИ.ЗначенияПолей = ТекСтрока.F_TEL;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекСтрока.F_ADDR) Тогда
		
		СтрокаКИ = Контрагент.КонтактнаяИнформация.Добавить();
		
		СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес; 
		СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		СтрокаКИ.ВидДляСписка = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		СтрокаКИ.Представление = ТекСтрока.F_ADDR;
		СтрокаКИ.ЗначенияПолей = ТекСтрока.F_ADDR;
		
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(ТекСтрока.F_ADDR_p) Тогда
	//	
	//	СтрокаКИ = Контрагент.КонтактнаяИнформация.Добавить();
	//	
	//	СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес; 
	//	СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресОбособленногоПодразделения;
	//	СтрокаКИ.ВидДляСписка = Справочники.ВидыКонтактнойИнформации.ФактАдресОбособленногоПодразделения;
	//	СтрокаКИ.Представление = ТекСтрока.F_ADDR_p;
	//	СтрокаКИ.ЗначенияПолей = ТекСтрока.F_ADDR_p;
	//	
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(ТекСтрока.F_ADDR_ur) Тогда
	//	
	//	СтрокаКИ = Контрагент.КонтактнаяИнформация.Добавить();
	//	
	//	СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес; 
	//	СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
	//	СтрокаКИ.ВидДляСписка = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
	//	СтрокаКИ.Представление = ТекСтрока.F_ADDR_ur;
	//	СтрокаКИ.ЗначенияПолей = ТекСтрока.F_ADDR_ur;
	//	
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(ТекСтрока.F_filial_NAME) Тогда
	//	
	//	Свойство = СтатическиеДанные.Найти("ПОДРАЗДЕЛЕНИЕКОНТРАГЕНТА", "Реквизит");
	//	
	//	ЗаполнитьДополнительныеРеквизиты(Свойство, ТекСтрока.F_filial_NAME, Контрагент);
	//	
	//КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьПартнераНаОснованииКонтрагента(Контрагент, Партнер, ТекСтрока, СтатическиеДанные, ИмяТаблицы) Экспорт
	
	ЗаполнитьЗначенияСвойств(Партнер, Контрагент,,"Владелец");
	
	КонтактнаяИнформация = Контрагент.КонтактнаяИнформация.Выгрузить();
	
	Для Каждого ТекСтрокаКИ Из КонтактнаяИнформация Цикл
		
		Если ТекСтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
			ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
		ИначеЕсли ТекСтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда
			ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
		ИначеЕсли ТекСтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента Тогда
			ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
		ИначеЕсли ТекСтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
			ВидКонтактнойИструнформации = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
		Иначе
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Партнер.КонтактнаяИнформация.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаКИ); 
		
		НоваяСтрока.Вид = ВидКонтактнойИнформации;
		
	КонецЦикла;	
	
	Партнер.Клиент = Истина;
	Партнер.Поставщик  = Истина;
	Партнер.ПрочиеОтношения  = Истина;
	Партнер.ДатаРегистрации = ТекущаяДата();
	
	Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
	Если Не Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда 
		Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(ТекСтрока.F_filial_NAME) Тогда
	//	
	//	Свойство = СтатическиеДанные.Найти("ПОДРАЗДЕЛЕНИЕПАРТНЕРА", "Реквизит");
	//	
	//	Если Не Свойство = Неопределено Тогда
	//		
	//		СтрокаДР = Партнер.ДополнительныеРеквизиты.Добавить();
	//		
	//		СтрокаДР.Значение = ТекСтрока.F_filial_NAME; 
	//		СтрокаДР.ТекстоваяСтрока = ТекСтрока.F_filial_NAME; 
	//		СтрокаДР.Свойство = Свойство.Значение;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(Партнер, ИмяТаблицы, ТекСтрока, ,Ложь);
	
	Если Не Партнер.Ссылка.Пустая() Тогда
		
		Контрагент.Партнер = Партнер.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьСозданиеКонтрагентов(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт  
	
	Менеджер = Справочники.Контрагенты;
	Индекс = 0;
	
	Попытка
		
		Для Сч = 1 По РазмерПроции Цикл
			
			ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
			
			Вариант = 1;
			
			ОписаниеПоиска = Неопределено;
			
			//Пример использования переопределяемого описания поиска
			//ОписаниеПоиска = Новый Структура;
			//
			//ОписаниеПоиска.Вставить("ИзменятьСуществующие", Истина);
			
			ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант, ОписаниеПоиска);
			
			Если ОбъектДляЗаписи = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			ОбъектДляЗаписи.ИНН = ТекСтрока.F_UNN; 
			ОбъектДляЗаписи.Наименование = ТекСтрока.F_NAME; 
			ОбъектДляЗаписи.НаименованиеПолное = ТекСтрока.F_NAME;
			ОбъектДляЗаписи.КодПоОКПО = ТекСтрока.F_OKPO; 
			ОбъектДляЗаписи.КПП = ТекСтрока.F_KODPLATNDS;
			
			ЗаполнитьВидКонтрагента(ТекСтрока, ОбъектДляЗаписи);
			ЗаполнитьКонтактнуюИнформацию(ТекСтрока, ОбъектДляЗаписи, СтатическиеДанные);
			
			Если ОбъектДляЗаписи.Партнер.Пустая() Тогда 
				Партнер = Справочники.Партнеры.СоздатьЭлемент();
			Иначе 
				Партнер = ОбъектДляЗаписи.Партнер.ПолучитьОбъект();
			КонецЕсли;
			
			СоздатьПартнераНаОснованииКонтрагента(ОбъектДляЗаписи, Партнер, ТекСтрока, СтатическиеДанные, ИмяТаблицы);
						
			СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
	
			//изменения 21072016
			//обновление договоров
			
			СтруктураПоискаДоговоров = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтандартныйОтбор(); 
			
			СтруктураПоискаДоговоров.Алиас = "&Контрагент";
			СтруктураПоискаДоговоров.Поле = "BD_TO_NVARCHAR(dbo_T_DOGOVOR.Контрагент)";
			СтруктураПоискаДоговоров.Вставить("Значение", ТекСтрока.F_NREC);
			
			СинхронизацияГалактикаОбщегоНазначения.СоздатьНовыйЭлементИзВнешнихИсточников("dbo_T_DOGOVOR", "Договор с контрагентом", СтруктураПоискаДоговоров);
			
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		РегистрыСведений.НеЗагруженныеОбъекты.ДобавитьЗаписьОНезагруженномОбъекте(ТекСтрока, ИмяТаблицы, Сч, ТекстОшибки);
		
		Стек = "ИМЯТАБЛИЦЫ: " + ИмяТаблицы + " ПОЛЕ: " + ТекСтрока.F_NREC + " Н: " +Строка(Сч) + " Е: " + Строка(РазмерПроции);
		
		СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек, ОбъектДляЗаписи);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьСозданиеКонтрагентовИзСотрудников(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков)  Экспорт
	
	Менеджер = Справочники.Контрагенты;
	Индекс = 0;
	
	Попытка
		
		Для Сч = 1 По РазмерПроции Цикл
			
			ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
			
			Вариант = 1;
			
			ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
			
			Если ОбъектДляЗаписи = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			ОбъектДляЗаписи.Наименование = ТекСтрока.F_FIO; 
			ОбъектДляЗаписи.НаименованиеПолное = ТекСтрока.F_FIO;
			
			ОбъектДляЗаписи.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
			ОбъектДляЗаписи.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
			
			СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
			
			//Если ОбъектДляЗаписи.Партнер.Пустая() Тогда 
			//	Партнер = Справочники.Партнеры.СоздатьЭлемент();
			//Иначе 
			//	Партнер = ОбъектДляЗаписи.Партнер.ПолучитьОбъект();
			//КонецЕсли;
			//
			//СоздатьПартнераНаОснованииКонтрагента(ОбъектДляЗаписи, Партнер, ТекСтрока, СтатическиеДанные, ИмяТаблицы);
			//
			//Если Не Партнер.Ссылка.Пустая() Тогда
			//	ОбъектДляЗаписи.Партнер = Партнер.Ссылка;
			//КонецЕсли;
			//
			//ОбъектДляЗаписи.ОбменДанными.Загрузка = Истина;
			//ОбъектДляЗаписи.Записать();
			
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		РегистрыСведений.НеЗагруженныеОбъекты.ДобавитьЗаписьОНезагруженномОбъекте(ТекСтрока, ИмяТаблицы, Сч, ТекстОшибки);
		
		Стек = "ИМЯТАБЛИЦЫ: " + ИмяТаблицы + " ПОЛЕ: " + ТекСтрока.F_NREC + " Н: " +Строка(Сч) + " Е: " + Строка(РазмерПроции);
		
		СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек, ОбъектДляЗаписи);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область МетодыЗагрузкиБанковскихСчетов

Процедура ВыполнитьСозданиеБанковскихСчетов(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	//Отказ от обработки 22072016
	Возврат;
	
	Менеджер = Справочники.БанковскиеСчетаКонтрагентов;
	Индекс = 0;
	
	Попытка
		
		Для Сч = 1 По РазмерПроции Цикл
			
			ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
			
			Вариант = 1;
			
			ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
			
			Если ОбъектДляЗаписи = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			Если Не СинхронизацияГалактикаОбщегоНазначения.ЭтоПустаяСсылка(ТекСтрока.F_CORG) Тогда 
				
				Контрагент = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CORG, "dbo_T_KATORG", "Контрагент", БлокировкиПотоков, НомерПотока);  
				
				ОбъектДляЗаписи.Владелец = Контрагент.Ссылка;
				
			КонецЕсли;
			
			ОбъектДляЗаписи.НомерСчета = ТекСтрока.F_SCHET1; 
			ОбъектДляЗаписи.Банк = Справочники.БанковскиеСчетаКонтрагентов.НайтиПоКоду(Строка(ТекСтрока.F_MFO1));
			ОбъектДляЗаписи.Наименование = ТекСтрока.F_NAME;
			ОбъектДляЗаписи.Закрыт = Булево(ТекСтрока.F_AKTIV);
			ОбъектДляЗаписи.БИКБанка = ТекСтрока.F_MFO1;
			ОбъектДляЗаписи.РучноеИзменениеРеквизитовБанка = Истина;
			ОбъектДляЗаписи.ВалютаДенежныхСредств = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета();
			
			//ОбъектДляЗаписи.БанкДляРасчетов = Справочники.БанковскиеСчетаКонтрагентов.НайтиПоКоду(Строка(ТекСтрока.F_KODBANK));
			//ОбъектДляЗаписи.НаименованиеБанкаДляРасчетов = ОбъектДляЗаписи.Банк.Наименование; 
			//ОбъектДляЗаписи.КоррСчетБанкаДляРасчетов = ТекСтрока.F_SCHET2; 
			
			СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
			
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		РегистрыСведений.НеЗагруженныеОбъекты.ДобавитьЗаписьОНезагруженномОбъекте(ТекСтрока, ИмяТаблицы, Сч, ТекстОшибки);
		
		Стек = "ИМЯТАБЛИЦЫ: " + ИмяТаблицы + " ПОЛЕ: " + ТекСтрока.F_NREC + " Н: " +Строка(Сч) + " Е: " + Строка(РазмерПроции);
		
		СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек, ОбъектДляЗаписи);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область МетодыЗагрузкиПодразделений

Процедура ЗаполнитьКлючПоиска(СсылкаНаОбъект, Источник)
	
	//Исключение ошибки
	//Нарушение целостности чтения объекта базы данных из-за параллельного изменения объекта другим сеансом
	Попытка
		Если ЗначениеЗаполнено(СсылкаНаОбъект.F_NREC) Тогда 
			Возврат;
		КонецЕсли;
	Исключение
		ЗаполнитьКлючПоиска(СсылкаНаОбъект, Источник);
	КонецПопытки;
	
	ОбъектДляЗаписи = СсылкаНаОбъект.ПолучитьОбъект();
	
	ОбъектДляЗаписи.F_NREC = Источник.F_NREC;
	
	Попытка
		ОбъектДляЗаписи.Записать();
	Исключение
		ЗаполнитьКлючПоиска(СсылкаНаОбъект, Источник);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакТранзитногоСклада(СсылкаНаОбъект)
	
	//отказ от обработки 16 07 2015
	
	Возврат;
	
	Если СсылкаНаОбъект.ИспользоватьОрдернуюСхемуПриПоступлении и СсылкаНаОбъект.ИспользоватьОрдернуюСхемуПриОтгрузке Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектДляЗаписи = СсылкаНаОбъект.ПолучитьОбъект();
	
	ОбъектДляЗаписи.ИспользоватьОрдернуюСхемуПриОтгрузке = Истина;
	ОбъектДляЗаписи.ИспользоватьОрдернуюСхемуПриПоступлении = Истина;
	
	ДатаНачала = НачалоГода(ТекущаяДата()); 
	
	ОбъектДляЗаписи.ДатаНачалаОрдернойСхемыПриОтгрузке = ДатаНачала;
	ОбъектДляЗаписи.ДатаНачалаОрдернойСхемыПриПоступлении = ДатаНачала;
	
	Попытка
		ОбъектДляЗаписи.Записать();
	Исключение
		
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьСкладПоМОЛ(МОЛ, Подразделение) Экспорт 
	
	Если МОЛ = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоответствиеМОЛСкладамСрезПоследних.Склад
		|ИЗ
		|	РегистрСведений.СоответствиеМОЛСкладам.СрезПоследних(, МОЛ = &МОЛ) КАК СоответствиеМОЛСкладамСрезПоследних";
	
	Запрос.УстановитьПараметр("МОЛ", МОЛ);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если Не РезультатЗапроса.Количество() = 0 Тогда 
		
		Склад = РезультатЗапроса[0].Склад; 
		
		ЗаполнитьКлючПоиска(Склад, МОЛ);
		
		ЗаполнитьПризнакТранзитногоСклада(Склад);
		
		Возврат Склад;
		
	КонецЕсли;
	
	Склад = Справочники.Склады.СоздатьЭлемент();
	
	//Исключение ошибки
	//Нарушение целостности чтения объекта базы данных из-за параллельного изменения объекта другим сеансом
	Попытка
		Склад.Наименование = МОЛ.ФИО;
	Исключение
		ПолучитьСкладПоМОЛ(МОЛ, Подразделение);
	КонецПопытки;
	
	Склад.F_NREC = Подразделение.F_NREC;
	
	//отказ от обработки 16 07 2016
	
	//Склад.ИспользоватьОрдернуюСхемуПриОтгрузке = Истина;
	//Склад.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач = Истина;
	//Склад.ИспользоватьОрдернуюСхемуПриПоступлении = Истина;
	//
	//ДатаНачала = НачалоГода(ТекущаяДата()); 
	//
	//Склад.ДатаНачалаОрдернойСхемыПриОтгрузке = ДатаНачала;
	//Склад.ДатаНачалаОрдернойСхемыПриПоступлении = ДатаНачала;
	//Склад.ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач = ДатаНачала;

	Склад.ОбменДанными.Загрузка = Истина;
	Попытка
		Склад.Записать();
	Исключение
		ПолучитьСкладПоМОЛ(МОЛ, Подразделение);
	КонецПопытки;
	
	НаборЗаписей = РегистрыСведений.СоответствиеМОЛСкладам.СоздатьНаборЗаписей();
	
	ЗаписьНабора = НаборЗаписей.Добавить();
	
	ЗаписьНабора.Склад = Склад.Ссылка;
	ЗаписьНабора.МОЛ = МОЛ;	
	ЗаписьНабора.Подразделение = Подразделение;	
	ЗаписьНабора.Период = ТекущаяДата();
	
	НаборЗаписей.Записать(Ложь);
	
	Возврат Склад.Ссылка;

КонецФункции

Функция ПолучитьОписаниеСклада(F_NREC)
	
	Склад = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(F_NREC, "dbo_T_KATPODR_STOCK", "Склад (складская территория)"); 

	Результат = Новый Структура;
	
	Результат.Вставить("ЭтоТранзитный", Ложь);
	Результат.Вставить("Склад", Склад);
	
	//для поиска в наименовании
	КлючПоиска = "транз";
	
	Если Не Склад = Неопределено Тогда
		
		Наименование = НРег(Склад.Наименование);
		
		ЭтоТранзитный = Найти(Наименование, КлючПоиска) > 0;
		
		//отказ от обработки 16 07 2015
		
		//Результат.Вставить("ЭтоТранзитный", ЭтоТранзитный);
		
		
		
		//предыдущий вариант определения транзитов
		
		//Запрос = Новый Запрос;
		//
		//Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	СписокТранзитныхСкладов.Склад,
		//|	СписокТранзитныхСкладов.Подразделение
		//|ИЗ
		//|	РегистрСведений.СписокТранзитныхСкладов КАК СписокТранзитныхСкладов
		//|ГДЕ
		//|	СписокТранзитныхСкладов.Склад = &Склад";
		//
		//Запрос.УстановитьПараметр("Склад", Склад);
		//
		//РезультатЗапроса = Запрос.Выполнить();
		//
		//Результат.Вставить("ЭтоТранзитный", Не РезультатЗапроса.Пустой());
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ВыполнитьСозданиеСкладовИзПодразделения(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт 
	
	Менеджер = Справочники.Склады;
	Индекс = 0;
	
	Попытка
		
		Для Сч = 1 По РазмерПроции Цикл
			
			ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
			
			Вариант = 1;
			
			ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
			
			Если ОбъектДляЗаписи = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			//ОбъектДляЗаписи.Родитель = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CPODR, "dbo_T_KATPODR_STOCK", "Склад (складская территория)", БлокировкиПотоков, НомерПотока); 
			
			ОбъектДляЗаписи.ИспользоватьОрдернуюСхемуПриОтгрузке = Истина;
			ОбъектДляЗаписи.ИспользоватьОрдернуюСхемуПриПоступлении = Истина;
			
			ДатаНачала = НачалоГода(ТекущаяДата()); 
			
			ОбъектДляЗаписи.ДатаНачалаОрдернойСхемыПриОтгрузке = ДатаНачала;
			ОбъектДляЗаписи.ДатаНачалаОрдернойСхемыПриПоступлении = ДатаНачала;
			
			ОбъектДляЗаписи.Наименование = ТекСтрока.F_NAME;
			
			ОбъектДляЗаписи.Подразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_NREC, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); 
			
			ОбъектДляЗаписи.ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоСебестоимости;
			
			СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
			
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		РегистрыСведений.НеЗагруженныеОбъекты.ДобавитьЗаписьОНезагруженномОбъекте(ТекСтрока, ИмяТаблицы, Сч, ТекстОшибки);
		
		Стек = "ИМЯТАБЛИЦЫ: " + ИмяТаблицы + " ПОЛЕ: " + ТекСтрока.F_NREC + " Н: " +Строка(Сч) + " Е: " + Строка(РазмерПроции);
		
		СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек, ОбъектДляЗаписи);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьСозданиеПодразделенияИзСтруктурыПредприятия(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт 
	
	Менеджер = Справочники.ПодразделенияОрганизаций;
	Индекс = 0;
	Вариант = 1;
	
	Попытка
		
		Для Сч = 1 По РазмерПроции Цикл
			
			ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
			
			ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
			
			Если ОбъектДляЗаписи = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекСтрока.F_ISARCH) Тогда 
				ОбъектДляЗаписи.Расформировано = Истина;
				ОбъектДляЗаписи.ДатаРасформирования = НачалоГода(ТекущаяДата());
			Иначе
				ОбъектДляЗаписи.Сформировано = Истина;
				ОбъектДляЗаписи.ДатаСоздания = НачалоГода(ТекущаяДата());
			КонецЕсли;
			
			Организация = СтатическиеДанные.Найти("ОРГАНИЗАЦИЯ", "Реквизит");
			Если Не Организация = Неопределено Тогда 
				ОбъектДляЗаписи.Владелец = Организация.Значение;
			КонецЕсли;
			
			ОбъектДляЗаписи.Наименование = ТекСтрока.F_NAME;
			ОбъектДляЗаписи.Родитель = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CPODR, "dbo_T_KATPODR_SUBDIVISION", "Подразделение", БлокировкиПотоков, НомерПотока); 
			
			СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
			
			
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		РегистрыСведений.НеЗагруженныеОбъекты.ДобавитьЗаписьОНезагруженномОбъекте(ТекСтрока, ИмяТаблицы, Сч, ТекстОшибки);
		
		Стек = "ИМЯТАБЛИЦЫ: " + ИмяТаблицы + " ПОЛЕ: " + ТекСтрока.F_NREC + " Н: " +Строка(Сч) + " Е: " + Строка(РазмерПроции);
		
		СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек, ОбъектДляЗаписи);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьСозданиеСтруктурыОрганизации(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт 
	
	Менеджер = Справочники.СтруктураПредприятия;
	Индекс = 0;
	
	Попытка
		
		Для Сч = 1 По РазмерПроции Цикл
			
			ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
			
			Вариант = 1;
			
			ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
			
			Если ОбъектДляЗаписи = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			ЭтоНовый = ОбъектДляЗаписи.ЭтоНовый();
			
			НаименованиеПодразделенияДоИзменения = ОбъектДляЗаписи.Наименование;
			
			ОбъектДляЗаписи.Наименование = ТекСтрока.F_NAME;
			
			ОбъектДляЗаписи.Родитель = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CPODR, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); 
			
			ОбъектДляЗаписи.ПодразделениеОрганизации = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_NREC, "dbo_T_KATPODR_SUBDIVISION", "Подразделение", БлокировкиПотоков, НомерПотока); 
			
			СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
			
			СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_NREC, "dbo_T_KATPODR_STOCK", "Склад (складская территория)", БлокировкиПотоков, НомерПотока); 
			
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		РегистрыСведений.НеЗагруженныеОбъекты.ДобавитьЗаписьОНезагруженномОбъекте(ТекСтрока, ИмяТаблицы, Сч, ТекстОшибки);
		
		Стек = "ИМЯТАБЛИЦЫ: " + ИмяТаблицы + " ПОЛЕ: " + ТекСтрока.F_NREC + " Н: " +Строка(Сч) + " Е: " + Строка(РазмерПроции);
		
		СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек, ОбъектДляЗаписи);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область МетодыЗагрузкиУслуг

Процедура ВыполнитьСозданиеУслуг(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Менеджер = Справочники.Номенклатура;
	
	Попытка
		
		Для Сч = 1 По РазмерПроции Цикл
			
			Индекс = ?(Сч=1, ИндексНачала, Индекс+1);
			ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
			
			Вариант = 1;
			
			ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
			
			Если ОбъектДляЗаписи = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			ОбъектДляЗаписи.Наименование = ТекСтрока.F_NAME;
			ОбъектДляЗаписи.НаименованиеПолное = ТекСтрока.F_NAME;
			ОбъектДляЗаписи.Артикул = ТекСтрока.F_KOD;
			
			ОбъектДляЗаписи.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот;
			
			ЕдИзмСтрокой = СокрЛП(ТекСтрока.F_ABBR);
			ЕдИзм = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию(ЕдИзмСтрокой);
			Если ЕдИзм.Пустая() Тогда 
				
				ЕдИзм = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
				ЕдИзм.Наименование = ЕдИзмСтрокой;
				ЕдИзм.НаименованиеПолное = ЕдИзмСтрокой;
				ЕдИзм.ОбменДанными.Загрузка = Истина;
				ЕдИзм.Записать();
				
			КонецЕсли;
			ОбъектДляЗаписи.ЕдиницаИзмерения = ЕдИзм.Ссылка;
			
			
			ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаНоменклатуры.НайтиПоНаименованию(ТекСтрока.F_NAME1, Истина);
			Если ГруппаФинансовогоУчета.Пустая() Тогда 
				
				ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаНоменклатуры.СоздатьЭлемент();
				ГруппаФинансовогоУчета.Наименование = ТекСтрока.F_NAME1;
				ГруппаФинансовогоУчета.ОбменДанными.Загрузка = Истина;
				ГруппаФинансовогоУчета.Записать();
				
			КонецЕсли;
			ОбъектДляЗаписи.ГруппаФинансовогоУчета = ГруппаФинансовогоУчета.Ссылка;
			
			ГруппаАналитическогоУчета = Справочники.ГруппыАналитическогоУчетаНоменклатуры.НайтиПоНаименованию(ТекСтрока.F_NAME1, Истина);
			Если ГруппаАналитическогоУчета.Пустая() Тогда 
				
				ГруппаАналитическогоУчета = Справочники.ГруппыАналитическогоУчетаНоменклатуры.СоздатьЭлемент();
				ГруппаАналитическогоУчета.Наименование = ТекСтрока.F_NAME1;
				ГруппаАналитическогоУчета.ОбменДанными.Загрузка = Истина;
				ГруппаАналитическогоУчета.Записать();
				
			КонецЕсли;
			ОбъектДляЗаписи.ГруппаАналитическогоУчета = ГруппаАналитическогоУчета.Ссылка;
			
			ТекРодительСтрока =  "Услуги";
			ТекРодитель = Справочники.Номенклатура.НайтиПоНаименованию(ТекРодительСтрока, Истина);
			Если ТекРодитель.Пустая() Тогда 
				
				ТекРодитель = Справочники.Номенклатура.СоздатьГруппу();
				
				ТекРодитель.Наименование = ТекРодительСтрока;
				ТекРодитель.ОбменДанными.Загрузка = Истина;
				ТекРодитель.Записать();
				
			КонецЕсли;
			ОбъектДляЗаписи.Родитель = ТекРодитель.Ссылка; 
			
			ТекВид = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Услуги", Истина);
			Если ТекВид.Пустая() Тогда 
				
				ТекВид = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
				ТекВид.Наименование = "Услуги";
				ТекВид.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга; 
				ТекВид.ГруппаФинансовогоУчета = ГруппаФинансовогоУчета.Ссылка;
				ТекВид.ГруппаАналитическогоУчета = ГруппаАналитическогоУчета.Ссылка;
				ТекВид.ОбменДанными.Загрузка = Истина;
				ТекВид.Записать();
				
			КонецЕсли;
			ОбъектДляЗаписи.ВидНоменклатуры = ТекВид.Ссылка;
			
			ОбъектДляЗаписи.ЕдиницаДляОтчетов = ЕдИзм;
			ОбъектДляЗаписи.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
			
			ОбъектДляЗаписи.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
			
			СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
			
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		РегистрыСведений.НеЗагруженныеОбъекты.ДобавитьЗаписьОНезагруженномОбъекте(ТекСтрока, ИмяТаблицы, Сч, ТекстОшибки);
		
		Стек = "ИМЯТАБЛИЦЫ: " + ИмяТаблицы + " ПОЛЕ: " + ТекСтрока.F_NREC + " Н: " +Строка(Сч) + " Е: " + Строка(РазмерПроции);
		
		СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек, ОбъектДляЗаписи);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область МетодыЗагрузкиНоменклатуры

Процедура ВыполнитьСозданиеНоменклатуры(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Менеджер = Справочники.Номенклатура;
	Индекс = 0;
	
	Попытка
		
		Для Сч = 1 По РазмерПроции Цикл
			
			ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
			
			Вариант = 1;
			
			ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
			
			Если ОбъектДляЗаписи = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			ОбъектДляЗаписи.Наименование = ТекСтрока.F_NAME;
			ОбъектДляЗаписи.НаименованиеПолное = ТекСтрока.F_NAME;
			ОбъектДляЗаписи.Артикул = ТекСтрока.F_BARKOD;
			
			ОбъектДляЗаписи.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
			
			ЕдИзмСтрокой = СокрЛП(ТекСтрока.ЕдИзм);
			ЕдИзм = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию(ЕдИзмСтрокой);
			Если ЕдИзм.Пустая() Тогда 
				
				ЕдИзм = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
				ЕдИзм.Наименование = ЕдИзмСтрокой;
				ЕдИзм.НаименованиеПолное = ЕдИзмСтрокой;
				ЕдИзм.ОбменДанными.Загрузка = Истина;
				ЕдИзм.Записать();
				
			КонецЕсли;
			ОбъектДляЗаписи.ЕдиницаИзмерения = ЕдИзм.Ссылка;
			
			СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
			_Ставка = Строка(ТекСтрока.СтавкаНДС);
			Если _Ставка = "10" Тогда 
				СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
			Иначе
				СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			КонецЕсли;
			ОбъектДляЗаписи.СтавкаНДС = СтавкаНДС; 
			
			Если ЗначениеЗаполнено(ТекСтрока.ГруппаФУ) Тогда 
				
				ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаНоменклатуры.НайтиПоНаименованию(ТекСтрока.ГруппаФУ, Истина);
				Если ГруппаФинансовогоУчета.Пустая() Тогда 
					
					ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаНоменклатуры.СоздатьЭлемент();
					ГруппаФинансовогоУчета.Наименование = ТекСтрока.ГруппаФУ;
					ГруппаФинансовогоУчета.ОбменДанными.Загрузка = Истина;
					
					ГруппаФинансовогоУчета.F_NREC = ТекСтрока.ГруппаАУF_NREC;
					
					ГруппаФинансовогоУчета.Записать();
					
				КонецЕсли;
				ОбъектДляЗаписи.ГруппаФинансовогоУчета = ГруппаФинансовогоУчета.Ссылка;
				
				ГруппаАналитическогоУчета = Справочники.ГруппыАналитическогоУчетаНоменклатуры.НайтиПоНаименованию(ТекСтрока.ГруппаАУ, Истина);
				Если ГруппаАналитическогоУчета.Пустая() Тогда 
					
					ГруппаАналитическогоУчета = Справочники.ГруппыАналитическогоУчетаНоменклатуры.СоздатьЭлемент();
					ГруппаАналитическогоУчета.Наименование = ТекСтрока.ГруппаАУ;
					ГруппаАналитическогоУчета.ОбменДанными.Загрузка = Истина;
					
					ГруппаАналитическогоУчета.F_NREC = ТекСтрока.ГруппаАУF_NREC;
					
					ГруппаАналитическогоУчета.Записать();
					
				КонецЕсли;
				ОбъектДляЗаписи.ГруппаАналитическогоУчета = ГруппаАналитическогоУчета.Ссылка;
				
			КонецЕсли;
			
			ТекРодительСтрока = СокрЛП(ТекСтрока.РодительНаименование);
			ТекРодитель = Справочники.Номенклатура.НайтиПоНаименованию(ТекРодительСтрока, Истина);
			Если ТекРодитель.Пустая() Тогда 
				
				ТекРодитель = Справочники.Номенклатура.СоздатьГруппу();
				
				ТекРодитель.Наименование = ТекРодительСтрока;
				ТекРодитель.ОбменДанными.Загрузка = Истина;
				ТекРодитель.Записать();
				
			КонецЕсли;
			ОбъектДляЗаписи.Родитель = ТекРодитель.Ссылка; 
			
			ТипНоменклатурыСтрока = СокрЛП(ТекСтрока.ВидНоменклатуры);
			ТекВид = Справочники.ВидыНоменклатуры.НайтиПоНаименованию(ТипНоменклатурыСтрока, Истина);
			Если ТекВид.Пустая() Тогда 
				
				ТекВид = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
				ТекВид.Наименование = ТипНоменклатурыСтрока;
				ТекВид.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар; 
				ТекВид.ГруппаФинансовогоУчета = ГруппаФинансовогоУчета.Ссылка;
				ТекВид.ГруппаАналитическогоУчета = ГруппаАналитическогоУчета.Ссылка;
				ТекВид.ОбменДанными.Загрузка = Истина;
				ТекВид.Записать();
				
			КонецЕсли;
			ОбъектДляЗаписи.ВидНоменклатуры = ТекВид.Ссылка;
			
			ОбъектДляЗаписи.ЕдиницаДляОтчетов = ЕдИзм;
			ОбъектДляЗаписи.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
			
			ОбъектДляЗаписи.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;
			
			СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
			
			ПараметрыШтрихКода = Новый Массив;
			ПараметрыШтрихКода.Добавить(ОбъектДляЗаписи.Ссылка);
			ПараметрыШтрихКода.Добавить(ТекСтрока.F_BARKOD);
			
			ФоновыеЗадания.Выполнить("СинхронизацияГалактикаПокупкиПродажи.СоздатьШтрихКод", ПараметрыШтрихКода);
			
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		РегистрыСведений.НеЗагруженныеОбъекты.ДобавитьЗаписьОНезагруженномОбъекте(ТекСтрока, ИмяТаблицы, Сч, ТекстОшибки);
		
		Стек = "ИМЯТАБЛИЦЫ: " + ИмяТаблицы + " ПОЛЕ: " + ТекСтрока.F_NREC + " Н: " +Строка(Сч) + " Е: " + Строка(РазмерПроции);
		
		СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек, ОбъектДляЗаписи);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьСозданиеГруппАналитическогоУчета(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Менеджер = Справочники.ГруппыАналитическогоУчетаНоменклатуры;
	Индекс = 0;
	
	Попытка
		
		Для Сч = 1 По РазмерПроции Цикл
			
			ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
			
			Вариант = 1;
			
			ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
			
			Если ОбъектДляЗаписи = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			ОбъектДляЗаписи.Наименование = ТекСтрока.Наименование;
		
			СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
	
		КонецЦикла;
		
		ВыполнитьСозданиеГруппФинансовогоУчета(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков);

	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		РегистрыСведений.НеЗагруженныеОбъекты.ДобавитьЗаписьОНезагруженномОбъекте(ТекСтрока, ИмяТаблицы, Сч, ТекстОшибки);
		
		Стек = "ИМЯТАБЛИЦЫ: " + ИмяТаблицы + " ПОЛЕ: " + ТекСтрока.F_NREC + " Н: " +Строка(Сч) + " Е: " + Строка(РазмерПроции);
		
		СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек, ОбъектДляЗаписи);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьСозданиеГруппФинансовогоУчета(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Менеджер = Справочники.ГруппыФинансовогоУчетаНоменклатуры;
	Индекс = 0;
	
	Попытка
		
		Для Сч = 1 По РазмерПроции Цикл
			
			ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
			
			Вариант = 1;
			
			ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
			
			Если ОбъектДляЗаписи = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			ОбъектДляЗаписи.Наименование = ТекСтрока.Наименование;
		
			СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
			
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		РегистрыСведений.НеЗагруженныеОбъекты.ДобавитьЗаписьОНезагруженномОбъекте(ТекСтрока, ИмяТаблицы, Сч, ТекстОшибки);
		
		Стек = "ИМЯТАБЛИЦЫ: " + ИмяТаблицы + " ПОЛЕ: " + ТекСтрока.F_NREC + " Н: " +Строка(Сч) + " Е: " + Строка(РазмерПроции);
		
		СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек, ОбъектДляЗаписи);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьШтрихкод(Ссылка, Штрихкод = "") Экспорт 
	
	Если ПустаяСтрока(Штрихкод) Тогда 
		Возврат;
	КонецЕсли;
	
	Если СтрДлина(Штрихкод) < 6 Тогда 
		Возврат;
	КонецЕсли;
	
	Набор = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
	
	Набор.Отбор.Штрихкод.Установить(Штрихкод);
	
	Набор.Записать();
	
	Запись = Набор.Добавить();
	
	Запись.Штрихкод = Штрихкод;
	Запись.F_NREC = Ссылка.F_NREC;
	Запись.Номенклатура = Ссылка;
	
	Набор.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область МетодыЗагрузкиДоговоров

Процедура ВыполнитьСозданиеДоговоров(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт 
	
	Менеджер = Справочники.ДоговорыКонтрагентов;
	Индекс = 0;
	
	Попытка
		
		Для Сч = 1 По РазмерПроции Цикл
			
			ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
			
			Вариант = 1;
			
			ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
			
			Если ОбъектДляЗаписи = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			Организация = СтатическиеДанные.Найти("ОРГАНИЗАЦИЯ", "Реквизит");
			Если Не Организация = Неопределено Тогда 
				ОбъектДляЗаписи.Организация = Организация.Значение;
			КонецЕсли;
			
			Валюта = СтатическиеДанные.Найти("ВАЛЮТАДОГОВОРОВ", "Реквизит");
			Если Не Валюта = Неопределено Тогда 
				ОбъектДляЗаписи.ВалютаВзаиморасчетов = Валюта.Значение;
			КонецЕсли;
			
			ТекВалюта = СинхронизацияГалактикаОбщегоНазначения.НайтиОбъект(ТекСтрока.F_CVAL, "dbo_T_KLVAL", "Валюта");
			Если Не ТекВалюта = Неопределено Тогда 
				ОбъектДляЗаписи.ВалютаВзаиморасчетов = ТекВалюта;
			КонецЕсли;
			
			ОбъектДляЗаписи.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Действует; 
			ОбъектДляЗаписи.Номер = ТекСтрока.Номер;
			
			Наименование = Строка(ТекСтрока.ВидДоговора) + " " + Строка(ТекСтрока.Номер) + " (вн. " + Строка(ТекСтрока.НомерВнеш) + " ) " + "("+ Строка(ОбъектДляЗаписи.ВалютаВзаиморасчетов)+")";
			
			ОбъектДляЗаписи.Наименование = Наименование;
			ОбъектДляЗаписи.НаименованиеДляПечати = Наименование;
			
			ОбъектДляЗаписи.Согласован = Истина;
			ОбъектДляЗаписи.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
			ОбъектДляЗаписи.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
			ОбъектДляЗаписи.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Действует;
			
			ХозяйственныеОперации = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
			ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком;
			
			Если Не СинхронизацияГалактикаОбщегоНазначения.ЭтоПустаяСсылка(ТекСтрока.Контрагент) Тогда 
				
				Контрагент = СинхронизацияГалактикаОбщегоНазначения.НайтиОбъект(ТекСтрока.Контрагент, "dbo_T_KATORG", "Контрагент");
				
				Если Контрагент = Неопределено Тогда 
					
					Контрагент = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.Контрагент, "dbo_T_KATORG", "Контрагент", БлокировкиПотоков, НомерПотока);  
					
				КонецЕсли;			
				
				Если Не Контрагент = Неопределено Тогда 
					
					ОбъектДляЗаписи.Контрагент = Контрагент;
					ОбъектДляЗаписи.Партнер = Контрагент.Партнер;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не СинхронизацияГалактикаОбщегоНазначения.ЭтоПустаяСсылка(ТекСтрока.F_CCURPODR) Тогда 
				
				ТекПодразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиОбъект(ТекСтрока.F_CCURPODR, "dbo_T_KATPODR", "Подразделение");
				
				Если ТекПодразделение = Неопределено Тогда 
					
					ТекПодразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CCURPODR, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока);  
					
				КонецЕсли;
				
				ОбъектДляЗаписи.Подразделение = ТекПодразделение;
				
			КонецЕсли;
			
			Если Не СинхронизацияГалактикаОбщегоНазначения.ЭтоПустаяСсылка(ТекСтрока.F_CBANKPOL) Тогда 
				
				БанковскийСчетКонтрагента = СинхронизацияГалактикаОбщегоНазначения.НайтиОбъект(ТекСтрока.F_CBANKPOL, "dbo_T_KATBANK", "Банковский счет");
				
				Если БанковскийСчетКонтрагента = Неопределено Тогда 
					
					БанковскийСчетКонтрагента = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CBANKPOL, "dbo_T_KATBANK", "Банковский счет", БлокировкиПотоков, НомерПотока);  
					
				КонецЕсли;
				
				ОбъектДляЗаписи.БанковскийСчетКонтрагента = БанковскийСчетКонтрагента;
				
			КонецЕсли;
			
			ОбъектДляЗаписи.ХозяйственнаяОперация = ХозяйственныеОперации; 
			ОбъектДляЗаписи.ТипДоговора = ТипДоговора; 
			
			ОбъектДляЗаписи.ДатаНачалаДействия = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.F_DBEG); 
			ОбъектДляЗаписи.ДопустимаяСуммаЗадолженности = ТекСтрока.Сумма; 
			ОбъектДляЗаписи.Сумма = ТекСтрока.Сумма; 
			
			СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
			
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		РегистрыСведений.НеЗагруженныеОбъекты.ДобавитьЗаписьОНезагруженномОбъекте(ТекСтрока, ИмяТаблицы, Сч, ТекстОшибки);
		
		Стек = "ИМЯТАБЛИЦЫ: " + ИмяТаблицы + " ПОЛЕ: " + ТекСтрока.F_NREC + " Н: " +Строка(Сч) + " Е: " + Строка(РазмерПроции);
		
		СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек, ОбъектДляЗаписи);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область МетодыЗагрузкиСтатейРасходов

Процедура ВыполнитьСозданиеСтатейРасходов(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Менеджер = ПланыВидовХарактеристик.СтатьиРасходов;
	Индекс = 0; 
	
	Попытка
		
		Для Сч = 1 По РазмерПроции Цикл
			
			ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
			
			Вариант = 1;
			
			ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
			
			Если ОбъектДляЗаписи = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			ОбъектДляЗаписи.Наименование = ТекСтрока.F_NAME;
			ОбъектДляЗаписи.Код = ТекСтрока.F_KOD;
			
			ЕстьРодитель = Не СинхронизацияГалактикаОбщегоНазначения.ЭтоПустаяСсылка(ТекСтрока.F_CSTZATR);
			
			Если ЕстьРодитель Тогда 
				
				Родитель = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CSTZATR, ИмяТаблицы, "Статья расходов", БлокировкиПотоков, НомерПотока);  
				
				ОбъектДляЗаписи.Родитель  = Родитель;
				
			КонецЕсли;
			
			СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
			
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		РегистрыСведений.НеЗагруженныеОбъекты.ДобавитьЗаписьОНезагруженномОбъекте(ТекСтрока, ИмяТаблицы, Сч, ТекстОшибки);
		
		Стек = "ИМЯТАБЛИЦЫ: " + ИмяТаблицы + " ПОЛЕ: " + ТекСтрока.F_NREC + " Н: " +Строка(Сч) + " Е: " + Строка(РазмерПроции);
		
		СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек, ОбъектДляЗаписи);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьСозданиеСтатейРасходовИзТХО(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Менеджер = ПланыВидовХарактеристик.СтатьиРасходов;
	Индекс = 0;
	
	Попытка
		
		Для Сч = 1 По РазмерПроции Цикл
			
			ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
			
			Вариант = 1;
			
			ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
			
			Если ОбъектДляЗаписи = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			ОбъектДляЗаписи.Наименование = ТекСтрока.F_NAME1;
			ОбъектДляЗаписи.Описание = ТекСтрока.F_NAME2;
			ОбъектДляЗаписи.Код = ТекСтрока.F_CODE;
			
			СчетРасходов =  ТекСтрока.СчетРасходов +  "."+ ТекСтрока.СубСчетРасходов; 
			
			ОбъектДляЗаписи.СчетУчета = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСчет(СчетРасходов);
			
			СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
			
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		РегистрыСведений.НеЗагруженныеОбъекты.ДобавитьЗаписьОНезагруженномОбъекте(ТекСтрока, ИмяТаблицы, Сч, ТекстОшибки);
		
		Стек = "ИМЯТАБЛИЦЫ: " + ИмяТаблицы + " ПОЛЕ: " + ТекСтрока.F_NREC + " Н: " +Строка(Сч) + " Е: " + Строка(РазмерПроции);
		
		СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек, ОбъектДляЗаписи);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область МетодыЗагрузкиДокументовНакладных

//Описание:
//Акт инвентаризации о недостаче МЦ	katsopr.vidsopr = 612
//Акт инвентаризации об излишке МЦ	katsopr.vidsopr = 611
//Акт на оказание услуги	katsopr.vidsopr = 211
//Акт на пересортицу	katsopr.vidsopr = 630
//Акт на прием услуги	katsopr.vidsopr = 111 23,26,25,44
//Акт на списание МЦ из производства	katsopr.vidsopr = 504
//Акт на списание МЦ со склада	katsopr.vidsopr = 204
//Накладная на внутреннее перемещение /склад-склад	katsopr.vidsopr = 600
//Накладная на внутреннее перемещение в производстве	katsopr.vidsopr = 506
//Накладная на возврат сырья из производства	katsopr.vidsopr = 503
//Накладная на отпуск в производство	katsopr.vidsopr = 501
//Накладная на отпуск МЦ	katsopr.vidsopr = 201
//Накладная на передачу МЦ в спецоснастку	katsopr.vidsopr = 602
//Накладная на прием МЦ	katsopr.vidsopr = 101
//Накладная на приход готовой продукиции	katsopr.vidsopr = 502

Функция ПолучитьМенеджерНакладныхПоТипуОперации(ТекСтрока, СтруктураАналитики)
	
	Переопределяется = Ложь;
	
	МенеджерСтрока = Неопределено;
	
	Если Строка(ТекСтрока.F_VIDSOPR) = "612" Тогда 
		
		МенеджерСтрока = "СписаниеНедостачТоваров";
		
	ИначеЕсли Строка(ТекСтрока.F_VIDSOPR) = "611" Тогда
		
		МенеджерСтрока = "ОприходованиеИзлишковТоваров";
		
	ИначеЕсли Строка(ТекСтрока.F_VIDSOPR) = "211" Тогда
		
		//изменено 12 07 2016
		
		Переопределяется = Истина;
		
		МенеджерСтрока = "РеализацияТоваровУслуг";
		
	ИначеЕсли Строка(ТекСтрока.F_VIDSOPR) = "630" Тогда
		
		МенеджерСтрока = "ПересортицаТоваров";
		
	ИначеЕсли Строка(ТекСтрока.F_VIDSOPR) = "111" Тогда
		
		МенеджерСтрока = "ПоступлениеТоваровУслуг";
		
	ИначеЕсли Строка(ТекСтрока.F_VIDSOPR) = "504" Тогда
		
		//изменено 27 06 2016
		//МенеджерСтрока = "ПередачаМатериаловВПроизводство";
		МенеджерСтрока = "ВнутреннееПотреблениеТоваров";
		
	ИначеЕсли Строка(ТекСтрока.F_VIDSOPR) = "204" Тогда
		
		//МенеджерСтрока = "СписаниеНедостачТоваров";
		МенеджерСтрока = "ВнутреннееПотреблениеТоваров";
		
	ИначеЕсли Строка(ТекСтрока.F_VIDSOPR) = "600" Тогда
		
		МенеджерСтрока = "ПеремещениеТоваров";
		
	ИначеЕсли Строка(ТекСтрока.F_VIDSOPR) = "506" Тогда
		
		МенеджерСтрока = "ПеремещениеМатериаловВПроизводстве";
		
	ИначеЕсли Строка(ТекСтрока.F_VIDSOPR) = "503" Тогда
		
		МенеджерСтрока = "ВозвратМатериаловИзПроизводства";
		
	ИначеЕсли Строка(ТекСтрока.F_VIDSOPR) = "501" Тогда
		
		//изменено 27 06 2016
		
		Переопределяется = Истина;
		
		МенеджерСтрока = "ПередачаМатериаловВПроизводство";
		
	ИначеЕсли Строка(ТекСтрока.F_VIDSOPR) = "201" Тогда
		
		//изменено 12 07 2016
		
		Переопределяется = Истина;
		
		МенеджерСтрока = "РеализацияТоваровУслуг";
		
	ИначеЕсли Строка(ТекСтрока.F_VIDSOPR) = "602" Тогда
		
		//МенеджерСтрока = "ПеремещениеТоваров";
		МенеджерСтрока = "ВнутреннееПотреблениеТоваров";
		
	ИначеЕсли Строка(ТекСтрока.F_VIDSOPR) = "101" Тогда
		
		МенеджерСтрока = "ПоступлениеТоваровУслуг";
		
	ИначеЕсли Строка(ТекСтрока.F_VIDSOPR) = "502" Тогда
		
		МенеджерСтрока = "ВыпускПродукции";
		
	КонецЕсли;
	
	Если Переопределяется Тогда 
		
		//Документ «Накладная на отпуск в производство» выгружать как:
		
		//В случае если в первой проводке формируемой документом в дебете счета 79 (включая субсчета) или 10 (включая субсчета), 
		//то выгружать как «Перемещение товаров»
		
		//В случае если в первой проводке формируемой документом в дебете счета счет 20(включая субсчета) или забалансовые (220 или 230),
		//то выгружать как «Передача материалов в производство»
		
		Если МенеджерСтрока = "ПередачаМатериаловВПроизводство" Тогда 
			
			ДанныеНакладных = ПолучитьДанныеНакладных(ТекСтрока.F_NREC_BD, Ложь, Ложь);
			
			Движения = ДанныеНакладных.Движения;
			
			Если Движения.Количество()>0 Тогда 
				
				ТекДвиж = Движения[0];
				
				ЭтоПеремещение = (ТекДвиж.F_DBSCHETO="79") или (ТекДвиж.F_DBSCHETO = "10");
				Если ЭтоПеремещение Тогда 
					
					МенеджерСтрока = "ПеремещениеТоваров";
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли МенеджерСтрока = "РеализацияТоваровУслуг" Тогда 
			
			Если ТекСтрока.F_SUMMA<0 Тогда 
				
				//МенеджерСтрока = "ВозвратТоваровОтКлиента";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Строка(ТекСтрока.F_WADOC) = "23" Тогда 
		
		Если Строка(ТекСтрока.F_VIDSOPR) = "201" Тогда 
			МенеджерСтрока = "КорректировкаРеализации";
		Иначе 
			МенеджерСтрока = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если МенеджерСтрока = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	СинхронизацияГалактикаОбщегоНазначения.ПолучитьДанныеПоМенеджеру(МенеджерСтрока, СтруктураАналитики);
	
	Менеджер = Документы[МенеджерСтрока];
	
	Возврат Менеджер;
	
КонецФункции

Функция ПолучитьДанныеНакладных(F_NREC_BD, Шапка = Истина, ТабличнаяЧасть = Истина, Движения = Истина)
	
	СтруктураДокумента = Новый Структура("Шапка, ТабличнаяЧасть, Движения");

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	dbo___KATSOPR_HEADER.F_ATL_LASTTIME,
	|	GET_DT(dbo___KATSOPR_HEADER.F_DSOPR, dbo___KATSOPR_HEADER.F_ATL_LASTTIME) КАК Дата,
	|	dbo___KATSOPR_HEADER.F_DSOPR,
	|	dbo___KATSOPR_HEADER.F_CDOGOVOR,
	|	dbo___KATSOPR_HEADER.F_SUMMA,
	|	dbo___KATSOPR_HEADER.F_CVAL,
	|	dbo___KATSOPR_HEADER.F_CORG,
	|	dbo___KATSOPR_HEADER.F_NAME,
	|	dbo___KATSOPR_HEADER.F_CPODRFROM,
	|	dbo___KATSOPR_HEADER.F_CMOLFROM,
	|	dbo___KATSOPR_HEADER.F_CMOLTO,
	|	dbo___KATSOPR_HEADER.F_CGRUZFROM,
	|	dbo___KATSOPR_HEADER.F_CGRUZTO,
	|	dbo___KATSOPR_HEADER.F_CPODRTO,
	|	dbo___KATSOPR_HEADER.F_NSOPR,
	|	dbo___KATSOPR_HEADER.F_DOPR,
	|	dbo___KATSOPR_HEADER.F_CHOZOPER,
	|	dbo___KATSOPR_HEADER.F_SOPRHOZ,
	|	dbo___KATSOPR_HEADER.F_NREC,
	|	dbo___KATSOPR_HEADER.F_VIDSOPR
	|ИЗ
	|	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo___KATSOPR_HEADER КАК dbo___KATSOPR_HEADER
	|ГДЕ
	|	dbo___KATSOPR_HEADER.F_NREC = &F_NREC";
	
	Запрос.УстановитьПараметр("F_NREC", F_NREC_BD);
	
	Если Шапка Тогда 
		
		СтруктураДокумента.Вставить("Шапка", Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	dbo___KATSOPR_SECTIONS.F_NREC,
	|	dbo___KATSOPR_SECTIONS.F_ATL_LASTDATE,
	|	dbo___KATSOPR_SECTIONS.F_NPP КАК F_NPP,
	|	dbo___KATSOPR_SECTIONS.F_PRMC КАК F_PRMC,
	|	dbo___KATSOPR_SECTIONS.F_CMCUSL КАК F_CMCUSL,
	|	dbo___KATSOPR_SECTIONS.F_CVAL,
	|	dbo___KATSOPR_SECTIONS.F_KOL,
	|	dbo___KATSOPR_SECTIONS.F_KOLOPL,
	|	dbo___KATSOPR_SECTIONS.F_OSTKOL,
	|	dbo___KATSOPR_SECTIONS.F_PRICE,
	|	dbo___KATSOPR_SECTIONS.F_CGRNAL,
	|	dbo___KATSOPR_SECTIONS.F_CSOPR,
	|	dbo___KATSOPR_SECTIONS.F_SUMNDS,
	|	dbo___KATSOPR_SECTIONS.F_SUMVNDS,
	|	dbo___KATSOPR_SECTIONS.F_CPODR,
	|	dbo___KATSOPR_SECTIONS.F_CMOL,
	|	dbo___KATSOPR_SECTIONS.F_KOLFACT,
	|	dbo___KATSOPR_SECTIONS.F_KOLFACT2,
	|	dbo___KATSOPR_SECTIONS.F_KOL2
	|ИЗ
	|	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo___KATSOPR_SECTIONS КАК dbo___KATSOPR_SECTIONS
	|ГДЕ
	|	dbo___KATSOPR_SECTIONS.F_CSOPR = &F_NREC
	|
	|УПОРЯДОЧИТЬ ПО
	|	F_NPP,
	|	F_PRMC
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("F_NREC", F_NREC_BD);
	
	Если ТабличнаяЧасть Тогда 
		
		СтруктураДокумента.Вставить("ТабличнаяЧасть", Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	dbo___KATSOPR_MOTIONS.F_NREC,
	|	dbo___KATSOPR_MOTIONS.F_TIDK,
	|	dbo___KATSOPR_MOTIONS.F_TIDKGAL,
	|	dbo___KATSOPR_MOTIONS.F_KAUOS_1_,
	|	dbo___KATSOPR_MOTIONS.F_KAUOS_2_,
	|	dbo___KATSOPR_MOTIONS.F_KAUOS_3_,
	|	dbo___KATSOPR_MOTIONS.F_KAUOS_4_,
	|	dbo___KATSOPR_MOTIONS.F_KAUOS_5_,
	|	dbo___KATSOPR_MOTIONS.F_KAUOS_6_,
	|	dbo___KATSOPR_MOTIONS.F_SCHETK,
	|	dbo___KATSOPR_MOTIONS.F_KAUKS_1_,
	|	dbo___KATSOPR_MOTIONS.F_KAUKS_2_,
	|	dbo___KATSOPR_MOTIONS.F_KAUKS_3_,
	|	dbo___KATSOPR_MOTIONS.F_KAUKS_4_,
	|	dbo___KATSOPR_MOTIONS.F_KAUKS_5_,
	|	dbo___KATSOPR_MOTIONS.F_KAUKS_6_,
	|	dbo___KATSOPR_MOTIONS.F_KRSCHETK,
	|	dbo___KATSOPR_MOTIONS.F_DBSCHETO,
	|	dbo___KATSOPR_MOTIONS.F_CSOPRDOC,
	|	dbo___KATSOPR_MOTIONS.F_ATL_LASTDATE,
	|	dbo___KATSOPR_MOTIONS.F_ATL_LASTTIME,
	|	dbo___KATSOPR_MOTIONS.F_CHOZOPER,
	|	dbo___KATSOPR_MOTIONS.F_CSOPRHOZ,
	|	dbo___KATSOPR_MOTIONS.F_SCHETO,
	|	dbo___KATSOPR_MOTIONS.F_SUBOSSCH,
	|	dbo___KATSOPR_MOTIONS.F_SUBSCHK,
	|	dbo_T_SOPRHOZ.F_CHOZOPER КАК F_CHOZOPER1,
	|	dbo_T_HOZOPER.F_NAME1,
	|	dbo_T_HOZOPER.F_NAME2,
	|	dbo_T_HOZOPER.F_NAME3,
	|	dbo_T_HOZOPER.F_NAME4,
	|	dbo___KATSOPR_MOTIONS.F_KODSPK,
	|	dbo___KATSOPR_MOTIONS.F_KODSPO
	|ИЗ
	|	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo___KATSOPR_MOTIONS КАК dbo___KATSOPR_MOTIONS
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_SOPRHOZ КАК dbo_T_SOPRHOZ
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_HOZOPER КАК dbo_T_HOZOPER
	|			ПО dbo_T_SOPRHOZ.F_CHOZOPER = dbo_T_HOZOPER.F_NREC
	|		ПО dbo___KATSOPR_MOTIONS.F_CSOPRHOZ = dbo_T_SOPRHOZ.F_NREC
	|ГДЕ
	|	dbo___KATSOPR_MOTIONS.F_CSOPRDOC = &F_NREC";
	
	Запрос.УстановитьПараметр("F_NREC", F_NREC_BD);
	
	Если Движения Тогда 
		
		СтруктураДокумента.Вставить("Движения", Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
	Возврат СтруктураДокумента;
	
КонецФункции

//Описание:
//		Менеджер = Документы.СписаниеНедостачТоваров;
//		Менеджер = Документы.ОприходованиеИзлишковТоваров;
//		Менеджер = Документы.РеализацияТоваровУслуг;
//		Менеджер = Документы.ПересортицаТоваров;
//		Менеджер = Документы.ПоступлениеТоваровУслуг;
//		Менеджер = Документы.ПорчаТоваров;
//		Менеджер = Документы.ПеремещениеТоваров;
//		Менеджер = Документы.ПеремещениеМатериаловВПроизводстве;
//		Менеджер = Документы.ВозвратМатериаловИзПроизводства;
//		Менеджер = Документы.ПередачаМатериаловВПроизводство;
//		Менеджер = Документы.РеализацияТоваровУслуг;
//		Менеджер = Документы.РеализацияТоваровУслуг;
//		Менеджер = Документы.ПоступлениеТоваровУслуг;			 
//		Менеджер = Документы.ВозвратТоваровОтКлиента;			 
//		PrMC=1, KatMC.Name     
//		PrMC=2, KatUsl.Name
//		PrMC=3, GroupMC.Name
//		PrMC=4, GroupUsl.Name

Процедура ЗаполнитьДанныеНакладной(Документ, ДанныеНакладных, Организация, Валюта, Менеджер, БлокировкиПотоков, НомерПотока, СтруктураАналитики, СоздаватьПриходныйОрдер, СоздаватьРасходныйОрдер)
	
	МассивСчетовДляАнализаДТМЦ = Новый Массив;
	
	МассивСчетовДляАнализаДТМЦ.Добавить("10");
	МассивСчетовДляАнализаДТМЦ.Добавить("41");
	
	МассивСчетовДляАнализаДТУслуги = Новый Массив;
	
	МассивСчетовДляАнализаДТУслуги.Добавить("23");
	МассивСчетовДляАнализаДТУслуги.Добавить("26");
	МассивСчетовДляАнализаДТУслуги.Добавить("25");
	МассивСчетовДляАнализаДТУслуги.Добавить("44");
	МассивСчетовДляАнализаДТУслуги.Добавить("91");
	МассивСчетовДляАнализаДТУслуги.Добавить("97");

	Документ.Организация = Организация;
	
	Шапка = ДанныеНакладных.Шапка;
	Движения = ДанныеНакладных.Движения;
	ТабличнаяЧасть = ДанныеНакладных.ТабличнаяЧасть;
	
	Если Шапка.Количество() > 0 Тогда
		
		ТекСтрока = Шапка[0]; 
		
		Документ.Дата 			= ТекСтрока.Дата; 
		Документ.Номер 			= ТекСтрока.F_NSOPR; 
		Документ.Комментарий	= ТекСтрока.F_NAME;
		
		Если ТипЗнч(Менеджер) = Тип("ДокументМенеджер.СписаниеНедостачТоваров") Тогда
			
			Документ.СтатьяРасходов = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CHOZOPER, "dbo_T_HOZOPER", "Статья расходов", БлокировкиПотоков, НомерПотока); 
			
			Документ.Подразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CPODRFROM, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); 
			
			МОЛ = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CMOLFROM, "dbo_T_KATMOL", "Физическое лицо", БлокировкиПотоков, НомерПотока);  

			СтруктураСклада = ПолучитьОписаниеСклада(ТекСтрока.F_CPODRFROM);
			
			Склад = СтруктураСклада.Склад;
			Если СтруктураСклада.ЭтоТранзитный Тогда 
				
				Склад = ПолучитьСкладПоМОЛ(МОЛ, Документ.Подразделение);
				
			КонецЕсли;
			
			Документ.Склад = Склад;

			Если Документ.СтатьяРасходов.Пустая() Тогда  
				
				СтруктураАналитики.Свойство("Аналитика", Документ.СтатьяРасходов);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.ОприходованиеИзлишковТоваров") Тогда
			
			Документ.СтатьяДоходов = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CHOZOPER, "dbo_T_HOZOPER_DOHOD", "Статьи доходов", БлокировкиПотоков, НомерПотока); 
			
			Документ.Подразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CPODRTO, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); 
			
			МОЛ = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CMOLTO, "dbo_T_KATMOL", "Физическое лицо", БлокировкиПотоков, НомерПотока);  
			
			СтруктураСклада = ПолучитьОписаниеСклада(ТекСтрока.F_CPODRTO);
			
			Склад = СтруктураСклада.Склад;
			Если СтруктураСклада.ЭтоТранзитный Тогда 
				
				Склад = ПолучитьСкладПоМОЛ(МОЛ, Документ.Подразделение);
				
			КонецЕсли;
			
			Документ.Склад = Склад;
			
			Если Документ.СтатьяДоходов.Пустая() Тогда  
				
				СтруктураАналитики.Свойство("Аналитика", Документ.СтатьяДоходов);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.ПеремещениеТоваров") Тогда
			
			Документ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
			
			ПодразделениеОтправитель = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CPODRFROM, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); ;
			ПодразделениеПолучатель = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CPODRTO, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); ;
			
			МОЛОтправитель = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CMOLFROM, "dbo_T_KATMOL", "Физическое лицо", БлокировкиПотоков, НомерПотока);  
			МОЛПолучатель = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CMOLTO, "dbo_T_KATMOL", "Физическое лицо", БлокировкиПотоков, НомерПотока);  
			
			//отправитель
			СтруктураСкладаОтправителя = ПолучитьОписаниеСклада(ТекСтрока.F_CPODRFROM);
			СкладОтправитель = СтруктураСкладаОтправителя.Склад;
			СоздаватьРасходныйОрдер = Истина; 
			Если СтруктураСкладаОтправителя.ЭтоТранзитный Тогда 
				
				СкладОтправитель = ПолучитьСкладПоМОЛ(МОЛОтправитель, ПодразделениеОтправитель);
				
			КонецЕсли;
			Документ.СкладОтправитель = СкладОтправитель;

			//получатель
			СтруктураСкладаПолучатель = ПолучитьОписаниеСклада(ТекСтрока.F_CPODRTO);
			СкладПолучатель = СтруктураСкладаПолучатель.Склад;
			СоздаватьПриходныйОрдер = Истина;
			Если СтруктураСкладаПолучатель.ЭтоТранзитный Тогда 
				
				СкладПолучатель = ПолучитьСкладПоМОЛ(МОЛПолучатель, ПодразделениеПолучатель);
				
			КонецЕсли;
			Документ.СкладПолучатель = СкладПолучатель;
			
			Документ.Подразделение = ПодразделениеПолучатель;
			
			Документ.ДатаРаспоряжения = Документ.Дата;
			Документ.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
			Документ.АдресДоставки = Документ.Подразделение;
			
			//Если ТекСтрока.F_VIDSOPR = "602" тогда
			//	
			//	Документ.Комментарий = "Накладная на передачу МЦ в спецоснастку " + Документ.Комментарий;
			//	
			//КонецЕсли;
			
		ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.ПересортицаТоваров") Тогда
			
			Документ.СтатьяРасходов = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CHOZOPER, "dbo_T_HOZOPER", "Статья расходов", БлокировкиПотоков, НомерПотока); 
			
			Документ.ПриходоватьТоварыПоСебестоимостиСписания = Истина;
			
			Документ.Подразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CPODRFROM, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); 
			
			МОЛ = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CMOLFROM, "dbo_T_KATMOL", "Физическое лицо", БлокировкиПотоков, НомерПотока);  
			
			СтруктураСклада = ПолучитьОписаниеСклада(ТекСтрока.F_CPODRFROM);
			
			Склад = СтруктураСклада.Склад;
			Если СтруктураСклада.ЭтоТранзитный Тогда 
				
				Склад = ПолучитьСкладПоМОЛ(МОЛ, Документ.Подразделение);
				
			КонецЕсли;
			
			Документ.Склад = Склад;

		ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.ПередачаМатериаловВПроизводство") Тогда
			
			СоздаватьРасходныйОрдер = Истина;
			
			Документ.Подразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CPODRTO, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); 
			Документ.Статус = Перечисления.СтатусыПередачМатериаловВПроизводство.Принято; 
			Документ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВПроизводство;
			
			СтруктураСкладаОтправителя = ПолучитьОписаниеСклада(ТекСтрока.F_CPODRFROM);

			Документ.Склад =  СтруктураСкладаОтправителя.Склад;

		ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.ВозвратМатериаловИзПроизводства") Тогда
			                                                                                                            
			СоздаватьПриходныйОрдер = Истина;
			
			Документ.Подразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CPODRFROM, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); 
			Документ.Статус = Перечисления.СтатусыВозвратовМатериаловИзПроизводства.КВозврату;
			Документ.ХозяйственнаяОперация =  Перечисления.ХозяйственныеОперации.ВозвратИзПроизводства;
			
			//МОЛ = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CMOLFROM, "dbo_T_KATMOL", "Физическое лицо", БлокировкиПотоков, НомерПотока);  
			//
			//Документ.Склад = ПолучитьСкладПоМОЛ(МОЛ, Документ.Подразделение);
			
			СтруктураСкладаОтправителя = ПолучитьОписаниеСклада(ТекСтрока.F_CPODRTO);

			Документ.Склад =  СтруктураСкладаОтправителя.Склад;
			
		ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.ПеремещениеМатериаловВПроизводстве") Тогда
			
			Документ.ПодразделениеОтправитель = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CPODRFROM, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); 
			Документ.ПодразделениеПолучатель = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CPODRTO, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); 
			
			Документ.Статус = Перечисления.СтатусыПеремещенияМатериаловВПроизводстве.Принято;
			
		ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.ПоступлениеТоваровУслуг") Тогда
			
			Документ.Контрагент = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CORG, "dbo_T_KATORG", "Контрагент", БлокировкиПотоков, НомерПотока);
			Документ.Договор = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CDOGOVOR, "dbo_T_DOGOVOR", "Договор с контрагентом", БлокировкиПотоков, НомерПотока);
			
			Документ.СуммаДокумента = ТекСтрока.F_SUMMA;
			
			Документ.Валюта = Валюта;
			ТекВалюта = СинхронизацияГалактикаОбщегоНазначения.НайтиОбъект(ТекСтрока.F_CVAL, "dbo_T_KLVAL", "Валюта");
			Если Не ТекВалюта = Неопределено Тогда 
				Документ.Валюта = ТекВалюта;
			КонецЕсли;
			
			Документ.ВалютаВзаиморасчетов = Документ.Валюта;
			Документ.СуммаВзаиморасчетов = Документ.СуммаДокумента;            
			Документ.ДатаПлатежа = Документ.Дата;
			Документ.Партнер = Документ.Контрагент.Партнер;
			
			Документ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
			Документ.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
			Документ.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
			Документ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
			Документ.ЦенаВключаетНДС = Истина;
			Документ.СпособДоставки = Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада;

			СоздаватьПриходныйОрдер = Истина;
			
			Подразделение = Неопределено;
			ПодразделениеДТ = Неопределено;
			Склад = Неопределено;
			Договор = Неопределено;

			СтатьяРасходов = Неопределено;
			
			Если Движения.Количество()>0  Тогда 
				
				Для Каждого ТекДвиж Из Движения Цикл
					
					Если ТекДвиж.F_KRSCHETK = "60" Или 
							ТекДвиж.F_KRSCHETK = "76" Тогда 
						
						Документ.Договор = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекДвиж.F_KAUKS_2_, "dbo_T_DOGOVOR", "Договор с контрагентом", БлокировкиПотоков, НомерПотока);
						
						//подразделение КТ (F_KODSPK)
						Подразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекДвиж.F_KODSPK, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); 
						
					КонецЕсли;
					
					Если Не МассивСчетовДляАнализаДТМЦ.Найти(ТекДвиж.F_DBSCHETO) = Неопределено Тогда 
						
						МОЛ = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекДвиж.F_KAUOS_1_, "dbo_T_KATMOL", "Физическое лицо", БлокировкиПотоков, НомерПотока);  

						//предыдущий вариант, формирование складов из молов
						//Документ.Склад = ПолучитьСкладПоМОЛ(МОЛ, Документ.Подразделение);
						
						//подразделение ДТ (F_KODSPO)
						ПодразделениеДТ = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекДвиж.F_KODSPO, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); 

						СтруктураСклада = ПолучитьОписаниеСклада(ТекДвиж.F_KODSPO); 
						
						Склад = СтруктураСклада.Склад;
						Если СтруктураСклада.ЭтоТранзитный Тогда 
							
							Склад = ПолучитьСкладПоМОЛ(МОЛ, ПодразделениеДТ);
							
						КонецЕсли;
						
						Документ.Комментарий = Документ.Комментарий + " #МОЛ[" + МОЛ + "]";
						
					ИначеЕсли Не МассивСчетовДляАнализаДТУслуги.Найти(ТекДвиж.F_DBSCHETO) = Неопределено Тогда 
						
						СтатьяРасходов = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекДвиж.F_KAUOS_2_, "dbo_T_STZATR", "Статья расходов", БлокировкиПотоков, НомерПотока);  
						
						//предыдущий вариант
						//Подразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекДвиж.F_KODSPO, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); 
						//Документ.Подразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекДвиж.F_KODSPK, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); 
						
						//подразделение ДТ (F_KODSPO)
						ПодразделениеДТ = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекДвиж.F_KODSPO, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); 
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если Не Договор = Неопределено Тогда 
				Документ.Договор = Договор;
			КонеЦесли;
			
			Документ.Склад = Склад;
			Документ.Подразделение = Подразделение;
			
		ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.РеализацияТоваровУслуг") Тогда
			
			Документ.Подразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CPODRFROM, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); 
			
			МОЛ = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CMOLFROM, "dbo_T_KATMOL", "Физическое лицо", БлокировкиПотоков, НомерПотока);  

			СтруктураСклада = ПолучитьОписаниеСклада(ТекСтрока.F_CPODRFROM); 
			
			Склад = СтруктураСклада.Склад;
			Если СтруктураСклада.ЭтоТранзитный Тогда 
				
				Склад = ПолучитьСкладПоМОЛ(МОЛ, Документ.Подразделение);
				
			КонецЕсли;
			
			Документ.Склад = Склад;
			
			Документ.Комментарий = Документ.Комментарий + " #МОЛ[" + МОЛ +" #ПОДРАЗДЕЛЕНИЕ " + Документ.Подразделение + "]";

			Документ.Контрагент = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CORG, "dbo_T_KATORG", "Контрагент", БлокировкиПотоков, НомерПотока);
			Документ.СуммаДокумента = ТекСтрока.F_SUMMA;
			Документ.Партнер = Документ.Контрагент.Партнер;  
			Документ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
			
			Документ.ДатаРаспоряжения = Документ.Дата;
			Документ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
			Документ.ЦенаВключаетНДС = Истина;
			
			Документ.Валюта = Валюта;
			
			ТекВалюта = СинхронизацияГалактикаОбщегоНазначения.НайтиОбъект(ТекСтрока.F_CVAL, "dbo_T_KLVAL", "Валюта");
			Если Не ТекВалюта = Неопределено Тогда 
				Документ.Валюта = ТекВалюта;
			КонецЕсли;
			
			Документ.ВалютаВзаиморасчетов = Документ.Валюта;
			
			Документ.СуммаВзаиморасчетов = Документ.СуммаДокумента;            
			Документ.Договор = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CDOGOVOR, "dbo_T_DOGOVOR", "Договор с контрагентом", БлокировкиПотоков, НомерПотока);
			Документ.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;

			Документ.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
			Документ.АдресДоставки = Документ.Подразделение;
			
			СоздаватьРасходныйОрдер = Истина;
			
			Если Движения.Количество()>0  Тогда 
				
				Для Каждого ТекДвиж Из Движения Цикл
					
					Если ТекДвиж.F_DBSCHETO = "62" Тогда 
						
						//подразделение КТ (F_KODSPK)
						Документ.Подразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекДвиж.F_KODSPO, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); 
						
						//ПодразделениеТовары = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекДвиж.F_KODSPK, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); 
				
					КонецЕсли;
									
				КонецЦикла;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.ВозвратТоваровОтКлиента") Тогда
			
			Документ.Подразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CPODRTO, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); 
			
			СтруктураСкладаОтправителя = ПолучитьОписаниеСклада(ТекСтрока.F_CPODRTO);

			Документ.Склад =  СтруктураСкладаОтправителя.Склад;
			
			Документ.Контрагент = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CORG, "dbo_T_KATORG", "Контрагент", БлокировкиПотоков, НомерПотока);
			Документ.СуммаДокумента = ТекСтрока.F_SUMMA;
			Документ.Партнер = Документ.Контрагент.Партнер;  
			Документ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
			
			Документ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
			Документ.ЦенаВключаетНДС = Истина;
			
			Документ.Валюта = Валюта;
			
			ТекВалюта = СинхронизацияГалактикаОбщегоНазначения.НайтиОбъект(ТекСтрока.F_CVAL, "dbo_T_KLVAL", "Валюта");
			Если Не ТекВалюта = Неопределено Тогда 
				Документ.Валюта = ТекВалюта;
			КонецЕсли;
			
			Документ.Договор = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CDOGOVOR, "dbo_T_DOGOVOR", "Договор с контрагентом", БлокировкиПотоков, НомерПотока);
			
		ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.КорректировкаРеализации") Тогда
			
			//Документ.Подразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CPODRTO, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); 
			//
			//Документ.Контрагент = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CORG, "dbo_T_KATORG", "Контрагент", БлокировкиПотоков, НомерПотока);
			//Документ.СуммаДокумента = ТекСтрока.F_SUMMA;
			//Документ.Партнер = Документ.Контрагент.Партнер;  
			//Документ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
			//
			//Документ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
			//Документ.ЦенаВключаетНДС = Истина;
			//
			//Документ.Валюта = Валюта;
			//
			//ТекВалюта = СинхронизацияГалактикаОбщегоНазначения.НайтиОбъект(ТекСтрока.F_CVAL, "dbo_T_KLVAL", "Валюта");
			//Если Не ТекВалюта = Неопределено Тогда 
			//	Документ.Валюта = ТекВалюта;
			//КонецЕсли;
			//
			//Документ.Договор = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CDOGOVOR, "dbo_T_DOGOVOR", "Договор с контрагентом", БлокировкиПотоков, НомерПотока);
			//
			//МОЛ = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CMOLTO, "dbo_T_KATMOL", "Физическое лицо", БлокировкиПотоков, НомерПотока);  
			//
			//Документ.Склад = ПолучитьСкладПоМОЛ(МОЛ, Документ.Подразделение);
			//
			
		ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.ВыпускПродукции") Тогда
			
			Документ.Подразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CPODRTO, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); 
			
			СтруктураСкладаОтправителя = ПолучитьОписаниеСклада(ТекСтрока.F_CPODRTO);

			Документ.Склад =  СтруктураСкладаОтправителя.Склад;
			
			Документ.ВидЦены =  Справочники.ВидыЦен.ВидЦеныВыпускаПродукцииПоУмолчанию();
			//Документ.Распоряжение = 
			Документ.ВыпускПоРаспоряжениям = Ложь;
			Документ.ВыпускПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
			//Документ.НаправлениеВыпуска = 
			Документ.Валюта = Валюта;
			//Документ.НаправлениеДеятельности =  Справочники.НаправленияДеятельности.
			
		ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.ВнутреннееПотреблениеТоваров") Тогда
			
			Документ.Подразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CPODRFROM, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); 
			
			МОЛ = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CMOLFROM, "dbo_T_KATMOL", "Физическое лицо", БлокировкиПотоков, НомерПотока);  
			
			СтруктураСклада = ПолучитьОписаниеСклада(ТекСтрока.F_CPODRFROM);
			
			Склад = СтруктураСклада.Склад;
			Если СтруктураСклада.ЭтоТранзитный Тогда 
				
				Склад = ПолучитьСкладПоМОЛ(МОЛ, Документ.Подразделение);
				
			КонецЕсли;
			
			Документ.Склад = Склад;
			
			Документ.ДатаРаспоряжения = Документ.Дата;
			
			Документ.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию");
			
		Иначе  
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТабличнаяЧасть.Количество() > 0 Тогда 
		
		Попытка
			
			Документ.Товары.Очистить();
			
		Исключение
		КонецПопытки;
		
		Попытка
			
			Документ.МатериалыИРаботы.Очистить();
			
		Исключение
		КонецПопытки;
		
		Если ТипЗнч(Менеджер) = Тип("ДокументМенеджер.СписаниеНедостачТоваров") Тогда
			
			Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
				
				СтрокаТЧДок = Документ.Товары.Добавить();
				
				Если СтрокаТЧ.F_PRMC = 1 Тогда 
					
					СтрокаТЧДок.Номенклатура = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(СтрокаТЧ.F_CMCUSL, "dbo_T_KATMC", "Позиция номенклатуры", БлокировкиПотоков, НомерПотока); 
					СтрокаТЧДок.Количество = СтрокаТЧ.F_KOLFACT;
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.ОприходованиеИзлишковТоваров") Тогда
			
			Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
				
				СтрокаТЧДок = Документ.Товары.Добавить();
				
				Если СтрокаТЧ.F_PRMC = 1 Тогда 
					
					СтрокаТЧДок.Номенклатура = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(СтрокаТЧ.F_CMCUSL, "dbo_T_KATMC", "Позиция номенклатуры", БлокировкиПотоков, НомерПотока); 
					СтрокаТЧДок.Количество = СтрокаТЧ.F_KOLFACT;
					СтрокаТЧДок.Цена = СтрокаТЧ.F_PRICE;
					
					СтрокаТЧДок.Сумма = СтрокаТЧДок.Цена* СтрокаТЧДок.Количество;
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.ПеремещениеТоваров") Тогда
			
			Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
				
				СтрокаТЧДок = Документ.Товары.Добавить();
				
				Если СтрокаТЧ.F_PRMC = 1 Тогда 
					
					СтрокаТЧДок.Номенклатура = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(СтрокаТЧ.F_CMCUSL, "dbo_T_KATMC", "Позиция номенклатуры", БлокировкиПотоков, НомерПотока); 
					СтрокаТЧДок.Количество = СтрокаТЧ.F_KOLFACT;
					СтрокаТЧДок.КоличествоУпаковок = СтрокаТЧ.F_KOLFACT;
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.ПересортицаТоваров") Тогда
			
			Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
				
				Если ТабличнаяЧасть.Количество()%2 = 0 Тогда 
					
					Если СтрокаТЧ.F_PRMC = 0 Тогда  					
						
						СтрокаТЧДок = Документ.Товары.Добавить();
						
						СтрокаТЧДок.Номенклатура = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(СтрокаТЧ.F_CMCUSL, "dbo_T_KATMC", "Позиция номенклатуры", БлокировкиПотоков, НомерПотока); 
						
					Иначе
						
						Если СтрокаТЧДок = Неопределено Тогда 
							
							СтрокаТЧДок = Документ.Товары.Добавить();
							
						КонецЕсли;
						
						СтрокаТЧДок.НоменклатураОприходование = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(СтрокаТЧ.F_CMCUSL, "dbo_T_KATMC", "Позиция номенклатуры", БлокировкиПотоков, НомерПотока); 
						
						СтрокаТЧДок.Количество = СтрокаТЧ.F_KOLFACT;
						СтрокаТЧДок.Цена = СтрокаТЧ.F_PRICE;
						
					КонецЕсли;
					
				Иначе
					
					СтрокаТЧДок = Документ.Товары.Добавить();
					
					Если СтрокаТЧ.F_PRMC = 0 Тогда  					
						
						СтрокаТЧДок.Номенклатура = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(СтрокаТЧ.F_CMCUSL, "dbo_T_KATMC", "Позиция номенклатуры", БлокировкиПотоков, НомерПотока); 
						
					Иначе
						
						СтрокаТЧДок.НоменклатураОприходование = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(СтрокаТЧ.F_CMCUSL, "dbo_T_KATMC", "Позиция номенклатуры", БлокировкиПотоков, НомерПотока); 
						
					КонецЕсли;
					
					СтрокаТЧДок.Количество = СтрокаТЧ.F_KOLFACT;
					СтрокаТЧДок.Цена = СтрокаТЧ.F_PRICE;
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.ПередачаМатериаловВПроизводство") Тогда
			
			Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
				
				СтрокаТЧДок = Документ.Товары.Добавить();
				
				Если СтрокаТЧ.F_PRMC = 1 Тогда 
					
					СтрокаТЧДок.Номенклатура = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(СтрокаТЧ.F_CMCUSL, "dbo_T_KATMC", "Позиция номенклатуры", БлокировкиПотоков, НомерПотока); 
					
				ИначеЕсли СтрокаТЧ.F_PRMC = 2 Тогда
					
					СтрокаТЧДок.Номенклатура = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(СтрокаТЧ.F_CMCUSL, "dbo_T_KATUSL", "Позиция номенклатуры", БлокировкиПотоков, НомерПотока); 
					
				КонецЕсли;
				
				СтрокаТЧДок.Количество = СтрокаТЧ.F_KOLFACT;
				СтрокаТЧДок.КоличествоУпаковок = СтрокаТЧ.F_KOLFACT;
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.ВозвратМатериаловИзПроизводства") Тогда
			
			Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
				
				СтрокаТЧДок = Документ.Товары.Добавить();
				
				СтрокаТЧДок.Номенклатура = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(СтрокаТЧ.F_CMCUSL, "dbo_T_KATMC", "Позиция номенклатуры", БлокировкиПотоков, НомерПотока); 
				СтрокаТЧДок.Количество = СтрокаТЧ.F_KOLFACT;
				СтрокаТЧДок.КоличествоУпаковок = СтрокаТЧ.F_KOLFACT;
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.ПеремещениеМатериаловВПроизводстве") Тогда
			
			Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
				
				СтрокаТЧДок = Документ.МатериалыИРаботы.Добавить();
				
				СтрокаТЧДок.Номенклатура = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(СтрокаТЧ.F_CMCUSL, "dbo_T_KATMC", "Позиция номенклатуры", БлокировкиПотоков, НомерПотока); 
				СтрокаТЧДок.Количество = СтрокаТЧ.F_KOLFACT;
				СтрокаТЧДок.КоличествоУпаковок = СтрокаТЧ.F_KOLFACT;
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.ПоступлениеТоваровУслуг") Тогда
			
			Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
				
				СтрокаТЧДок = Документ.Товары.Добавить();
				
				Если СтрокаТЧ.F_PRMC = 1 Тогда 
					
					СтрокаТЧДок.Номенклатура = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(СтрокаТЧ.F_CMCUSL, "dbo_T_KATMC", "Позиция номенклатуры", БлокировкиПотоков, НомерПотока); 
					
					СтрокаТЧДок.Склад = Документ.Склад; 
					
				ИначеЕсли СтрокаТЧ.F_PRMC = 2 Тогда
					
					СтрокаТЧДок.Номенклатура = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(СтрокаТЧ.F_CMCUSL, "dbo_T_KATUSL", "Позиция номенклатуры", БлокировкиПотоков, НомерПотока); 
					
					СтрокаТЧДок.Подразделение = ПодразделениеДТ;  
					
					СтрокаТЧДок.СтатьяРасходов = СтатьяРасходов; 
					
					СоздаватьПриходныйОрдер = Ложь;
					
				КонецЕсли;
				
				СтрокаТЧДок.Количество = СтрокаТЧ.F_KOLFACT;
				СтрокаТЧДок.КоличествоУпаковок = СтрокаТЧ.F_KOLFACT;
				СтрокаТЧДок.Цена = СтрокаТЧ.F_PRICE;
				СтрокаТЧДок.Сумма = СтрокаТЧДок.Цена* СтрокаТЧДок.Количество;
				СтрокаТЧДок.СуммаСНДС =  СтрокаТЧДок.Сумма + СтрокаТЧДок.СуммаНДС;
				СтрокаТЧДок.СуммаНДС = СтрокаТЧ.F_SUMNDS;
				
				СтрокаТЧДок.СтавкаНДС = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтавкуНДСПосуммам(СтрокаТЧДок.Сумма, СтрокаТЧДок.СуммаНДС);
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.РеализацияТоваровУслуг") Тогда
			
			Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
				
				СтрокаТЧДок = Документ.Товары.Добавить();
				
				Если СтрокаТЧ.F_PRMC = 1 Тогда 
					
					СтрокаТЧДок.Номенклатура = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(СтрокаТЧ.F_CMCUSL, "dbo_T_KATMC", "Позиция номенклатуры", БлокировкиПотоков, НомерПотока); 
					
					СтрокаТЧДок.Склад = Документ.Склад; 
					
				ИначеЕсли СтрокаТЧ.F_PRMC = 2 Тогда
					
					СтрокаТЧДок.Номенклатура = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(СтрокаТЧ.F_CMCUSL, "dbo_T_KATUSL", "Позиция номенклатуры", БлокировкиПотоков, НомерПотока); 
					
					//СтрокаТЧДок.Подразделение = Документ.Подразделение;  
					//
					//СтрокаТЧДок.СтатьяРасходов = СтатьяРасходов; 
					
					
				КонецЕсли;
				
				СтрокаТЧДок.Количество = СтрокаТЧ.F_KOLFACT;
				СтрокаТЧДок.КоличествоУпаковок = СтрокаТЧ.F_KOLFACT;
				СтрокаТЧДок.Цена = СтрокаТЧ.F_PRICE;
				СтрокаТЧДок.Сумма = СтрокаТЧДок.Цена* СтрокаТЧДок.Количество;
				СтрокаТЧДок.СуммаСНДС =  СтрокаТЧДок.Сумма + СтрокаТЧДок.СуммаНДС;
				СтрокаТЧДок.СуммаНДС = СтрокаТЧ.F_SUMNDS;
				
				СтрокаТЧДок.СтавкаНДС = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтавкуНДСПосуммам(СтрокаТЧДок.Сумма, СтрокаТЧДок.СуммаНДС);
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.ВозвратТоваровОтКлиента") Тогда
			
			Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
				
				СтрокаТЧДок = Документ.Товары.Добавить();
				
				Если СтрокаТЧ.F_PRMC = 1 Тогда 
					
					СтрокаТЧДок.Номенклатура = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(СтрокаТЧ.F_CMCUSL, "dbo_T_KATMC", "Позиция номенклатуры", БлокировкиПотоков, НомерПотока); 
					
				ИначеЕсли СтрокаТЧ.F_PRMC = 2 Тогда
					
					СтрокаТЧДок.Номенклатура = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(СтрокаТЧ.F_CMCUSL, "dbo_T_KATUSL", "Позиция номенклатуры", БлокировкиПотоков, НомерПотока); 
					
				КонецЕсли;
				
				СтрокаТЧДок.НоменклатураОприходование = СтрокаТЧДок.Номенклатура;
				
				СтрокаТЧДок.Количество = СтрокаТЧ.F_KOLFACT;
				СтрокаТЧДок.КоличествоУпаковок = СтрокаТЧ.F_KOLFACT;
				СтрокаТЧДок.Цена = СтрокаТЧ.F_PRICE;
				СтрокаТЧДок.Сумма = СтрокаТЧДок.Цена* СтрокаТЧДок.Количество;
				СтрокаТЧДок.СуммаСНДС =  СтрокаТЧДок.Сумма + СтрокаТЧДок.СуммаНДС;
				СтрокаТЧДок.СуммаНДС = СтрокаТЧ.F_SUMNDS;
				
				СтрокаТЧДок.СтавкаНДС = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтавкуНДСПосуммам(СтрокаТЧДок.Сумма, СтрокаТЧДок.СуммаНДС);
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.ВыпускПродукции") Тогда
			
			Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
				
				СтрокаТЧДок = Документ.Товары.Добавить();
				
				СтрокаТЧДок.Номенклатура = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(СтрокаТЧ.F_CMCUSL, "dbo_T_KATMC", "Позиция номенклатуры", БлокировкиПотоков, НомерПотока); 
				
				СтрокаТЧДок.Количество = СтрокаТЧ.F_KOLFACT;
				СтрокаТЧДок.КоличествоУпаковок = СтрокаТЧ.F_KOLFACT;
				СтрокаТЧДок.Цена = СтрокаТЧ.F_PRICE;
				СтрокаТЧДок.Сумма = СтрокаТЧДок.Цена* СтрокаТЧДок.Количество;
				СтрокаТЧДок.ТипСтоимости = Перечисления.ТипыСтоимостиВыходныхИзделий.Рассчитывается;
				
				СтрокаТЧДок.ВидЗапасов = Справочники.ВидыЗапасов.ВидЗапасовДокумента(Организация, Перечисления.ХозяйственныеОперации.ВыпускПродукции); 
				СтрокаТЧДок.Подразделение = Документ.Подразделение;
				СтрокаТЧДок.Склад = Документ.Склад;

			КонецЦикла;
			
		ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.ВнутреннееПотреблениеТоваров") Тогда
			
			СтатьяРасходов= Неопределено;

			Если Движения.Количество() > 0 Тогда 
				
				Для Каждого ТекДвиж Из Движения Цикл
					
					Если (ТекДвиж.F_DBSCHETO = "44") или 
						(ТекДвиж.F_DBSCHETO = "23") или 
						(ТекДвиж.F_DBSCHETO = "26") или 
						(ТекДвиж.F_DBSCHETO = "29") или 
						(ТекДвиж.F_DBSCHETO = "25") Тогда  
						
						СтатьяРасходов = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекДвиж.F_KAUOS_2_, "dbo_T_STZATR", "Статья расходов", БлокировкиПотоков, НомерПотока);  
						
						Прервать;
						
					Иначе
												
						СтрукутураЛога = Новый Структура;
						
						СтрукутураЛога.Вставить("Вид", "НеопределенноеПоведение");
						СтрукутураЛога.Вставить("Текст", "Не указан алгоритм преобразования Номер строки: 2153 Номер потока");
						СтрукутураЛога.Вставить("НомерПотока", НомерПотока);
						СтрукутураЛога.Вставить("ОбъектДляЗаписи", Строка(Документ));
						СтрукутураЛога.Вставить("F_NREC", ТекСтрока.F_NREC);
						
						СинхронизацияГалактикаОбщегоНазначения.ЗаписатьЛог(СтрукутураЛога, "att_");
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
				
				СтрокаТЧДок = Документ.Товары.Добавить();
				
				СтрокаТЧДок.Номенклатура = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(СтрокаТЧ.F_CMCUSL, "dbo_T_KATMC", "Позиция номенклатуры", БлокировкиПотоков, НомерПотока); 
				
				СтрокаТЧДок.Количество = СтрокаТЧ.F_KOLFACT;
				СтрокаТЧДок.КоличествоУпаковок = СтрокаТЧ.F_KOLFACT;
				
				СтрокаТЧДок.СтатьяРасходов = СтатьяРасходов;
				
			КонецЦикла;
		
		Иначе
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьСозданиеНакладных(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Вариант = 3;
	Индекс = 0;
	
	Организация = Справочники.Организации.ПустаяСсылка();
	
	ОрганизацияЗапись = СтатическиеДанные.Найти("ОРГАНИЗАЦИЯ", "Реквизит");
	Если Не ОрганизацияЗапись = Неопределено Тогда 
		Организация = ОрганизацияЗапись.Значение;
	КонецЕсли;
	
	Валюта = Справочники.Валюты.ПустаяСсылка();
	
	ВалютаЗапись = СтатическиеДанные.Найти("ВАЛЮТАДОГОВОРОВ", "Реквизит");
	Если Не ВалютаЗапись = Неопределено Тогда 
		Валюта = ВалютаЗапись.Значение;
	КонецЕсли;	
	
	Для Сч = 1 По РазмерПроции Цикл
		
		Попытка
			
			СтруктураАналитики = Неопределено;
			
			Менеджер = Неопределено;
			
			ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
			
			Менеджер = ПолучитьМенеджерНакладныхПоТипуОперации(ТекСтрока, СтруктураАналитики);
			
			ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
			
			Если ОбъектДляЗаписи = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			//не обрабатываем проведенные документы
			
			Если ОбъектДляЗаписи.Проведен Тогда 
				Продолжить;
			КонецЕсли;
			
			ДанныеНакладных = ПолучитьДанныеНакладных(ТекСтрока.F_NREC_BD);
			
			СоздаватьПриходныйОрдер = Ложь;
			СоздаватьРасходныйОрдер = Ложь;
			
			ЗаполнитьДанныеНакладной(
			ОбъектДляЗаписи, ДанныеНакладных, Организация, Валюта, Менеджер,
			БлокировкиПотоков, НомерПотока, СтруктураАналитики, СоздаватьПриходныйОрдер, СоздаватьРасходныйОрдер
			);
			
			СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
			
			Если ОбъектДляЗаписи.Дата < Константы.СинхронизацияГалактикаДатаЗагрузки.Получить() Тогда 
				
				сч = 0;
				
			КонецЕсли;
			
			Если СоздаватьПриходныйОрдер Тогда 
				
				//изменение 15 07 2016
				//ПараметрыДополнительнойЗаписи = Новый Массив;
				//ПараметрыДополнительнойЗаписи.Добавить(ОбъектДляЗаписи.Ссылка);
				//
				//ФоновыеЗадания.Выполнить("СинхронизацияГалактикаПокупкиПродажи.ОформитьПриходныйОрдерНаТовары", ПараметрыДополнительнойЗаписи);
				
			КонецЕсли;
			
			Если СоздаватьРасходныйОрдер Тогда
				
				//изменение 15 07 2016
				//ПараметрыДополнительнойЗаписи = Новый Массив;
				//ПараметрыДополнительнойЗаписи.Добавить(ОбъектДляЗаписи.Ссылка);
				//
				//ФоновыеЗадания.Выполнить("СинхронизацияГалактикаПокупкиПродажи.ОформитьРасходныйОрдерНаТовары", ПараметрыДополнительнойЗаписи);
				
			КонецЕсли;
			
		Исключение
			
			ТекстОшибки = ОписаниеОшибки();
			
			РегистрыСведений.НеЗагруженныеОбъекты.ДобавитьЗаписьОНезагруженномОбъекте(ТекСтрока, ИмяТаблицы, Сч, ТекстОшибки);
			
			Стек = "ИМЯТАБЛИЦЫ: " + ИмяТаблицы + " ПОЛЕ: " + ТекСтрока.F_NREC + " Н: " +Строка(Сч) + " Е: " + Строка(РазмерПроции);
			
			СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек, ОбъектДляЗаписи);
			
		КонецПопытки;
		
	КонецЦикла;
	
	СтрукутураЛога = Новый Структура;
	
	СтрукутураЛога.Вставить("Вид", "Завершение");
	СтрукутураЛога.Вставить("Текст", "");
	СтрукутураЛога.Вставить("НомерПотока", НомерПотока);
	
	СинхронизацияГалактикаОбщегоНазначения.ЗаписатьЛог(СтрукутураЛога, "inf_");
	
КонецПроцедуры

Процедура ОформитьПриходныйОрдерНаТовары(СсылкаНаИсточник) Экспорт
	
	//отказ от обработки 15 07 2016
	
	Возврат;
	
	Запрос = Новый Запрос(
	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПриходныйОрдерНаТовары.Ссылка
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Распоряжение = &Распоряжение");
	
	Запрос.УстановитьПараметр("Распоряжение", СсылкаНаИсточник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		
		Ордер = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
		
		Ордер.УстановитьНовыйНомер();
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Выборка.Следующий();
		
		Ордер = Выборка.Ссылка.ПолучитьОбъект();
		Ордер.Товары.Очистить();
		
	КонецЕсли;
	
	Если ТипЗнч(СсылкаНаИсточник) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда 
		
		Склад = СсылкаНаИсточник.Склад;
		
		СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаОтПоставщика;
		
	ИначеЕсли ТипЗнч(СсылкаНаИсточник) = Тип("ДокументСсылка.ВозвратМатериаловИзПроизводства") Тогда
		
		Склад = СсылкаНаИсточник.Склад;
		
		СкладскаяОперация = Перечисления.СкладскиеОперации.ПередачаВПроизводствоПриемка;
		
	ИначеЕсли ТипЗнч(СсылкаНаИсточник) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		Склад = СсылкаНаИсточник.СкладПолучатель;
		
		СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаПоПеремещению;
		
	КонецЕсли;
	
	Ордер.Склад = Склад;
	Ордер.СкладскаяОперация = СкладскаяОперация;

	Ордер.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
	Ордер.Распоряжение = СсылкаНаИсточник;
	Ордер.Дата = СсылкаНаИсточник.Дата;
	Ордер.F_NREC = СсылкаНаИсточник.F_NREC;
	
	ТаблицаТоваров = СсылкаНаИсточник.Товары.Выгрузить();
	Ордер.Товары.Загрузить(ТаблицаТоваров);
	
	Ордер.Комментарий = "#Создан автоматически перемещение "+ СсылкаНаИсточник.Номер + " от " + СсылкаНаИсточник.Дата;
	
	Ордер.ОбменДанными.Загрузка = Истина;
	Ордер.Записать();
	
	Ордер.ОбменДанными.Загрузка = Ложь;
	
	Попытка
		Ордер.Записать();
	Исключение
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОформитьРасходныйОрдерНаТовары(СсылкаНаИсточник) Экспорт 
	
	//отказ от обработки 27 06 2016
	
	Возврат;
	
	Запрос = Новый Запрос(
	
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|ГДЕ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение = &Распоряжение");
	
	Запрос.УстановитьПараметр("Распоряжение", СсылкаНаИсточник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		
		Ордер = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
		
		Ордер.УстановитьНовыйНомер();
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Выборка.Следующий();
		
		Ордер = Выборка.Ссылка.ПолучитьОбъект();
		
		Ордер.ОтгружаемыеТовары.Очистить();
		Ордер.ТоварыПоРаспоряжениям.Очистить();
		
	КонецЕсли;

	Если ТипЗнч(СсылкаНаИсточник) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		Склад = СсылкаНаИсточник.СкладОтправитель;
		
		Ордер.Получатель = СсылкаНаИсточник.СкладПолучатель;
		
		СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению;
		
	ИначеЕсли ТипЗнч(СсылкаНаИсточник) = Тип("ДокументСсылка.ПередачаМатериаловВПроизводство") Тогда
		
		Склад = СсылкаНаИсточник.Склад;
		
		СкладскаяОперация = Перечисления.СкладскиеОперации.ПередачаВПроизводствоОтгрузка;
		
		Ордер.Получатель = СсылкаНаИсточник.Подразделение;
		
	Иначе
		
		Склад = СсылкаНаИсточник.Склад;
		
		СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаКлиенту;

	КонецЕсли;
	
	Ордер.Склад = Склад;
	Ордер.СкладскаяОперация = СкладскаяОперация;
	Ордер.F_NREC = СсылкаНаИсточник.F_NREC;
	
	Ордер.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
	Ордер.Дата = СсылкаНаИсточник.Дата;
	Ордер.ДатаОтгрузки = Ордер.Дата;
	Ордер.Приоритет = Справочники.Приоритеты.ПолучитьВысшийПриоритет();
	
	ТаблицаТоваров = СсылкаНаИсточник.Товары.Выгрузить();
	
	Если Не ТипЗнч(СсылкаНаИсточник) = Тип("ДокументСсылка.ПередачаМатериаловВПроизводство") Тогда
		
		ТаблицаТоваров.Колонки.Добавить("Распоряжение");
		
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить("Действие");
	
	ТаблицаТоваров.ЗаполнитьЗначения(СсылкаНаИсточник, "Распоряжение");
	ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить, "Действие");
	
	Ордер.ОтгружаемыеТовары.Загрузить(ТаблицаТоваров);
	Ордер.ТоварыПоРаспоряжениям.Загрузить(ТаблицаТоваров);
	
	Ордер.Комментарий = "#Создан автоматически перемещение "+ СсылкаНаИсточник.Номер + " от " + СсылкаНаИсточник.Дата;
	
	Ордер.ОбменДанными.Загрузка = Истина;
	Ордер.Записать();
	
	Ордер.ОбменДанными.Загрузка = Ложь;
	
	Попытка
		Ордер.Записать();
	Исключение
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область МетодыЗагрузкиОрдеровПоТоварам

Функция ПолучитьДанныеПоОрдерам(ТекСтрока)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	dbo_T_SPORDER.F_CSKLORDER,
	|	dbo_T_SPORDER.F_DORD,
	|	dbo_T_SPORDER.F_CMC,
	|	dbo_T_SPORDER.F_KOL,
	|	dbo_T_SPORDER.F_CCMOL,
	|	dbo_T_SPORDER.F_CCPODR,
	|	dbo_T_SPORDER.F_CSPORDER,
	|	dbo_T_SPORDER.F_CSPSOPR,
	|	dbo_T_SPORDER.F_GLOB_NPP
	|ИЗ
	|	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_SPORDER КАК dbo_T_SPORDER
	|ГДЕ
	|	BD_TO_NVARCHAR(dbo_T_SPORDER.F_CSKLORDER) = &F_CSKLORDER";
	
	Запрос.УстановитьПараметр("F_CSKLORDER", ТекСтрока.F_NREC);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура ВыполнитьСозданиеОрдеровНаТовары(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Вариант = 3;
	Индекс = 0;
	
	Организация = Справочники.Организации.ПустаяСсылка();
	
	ОрганизацияЗапись = СтатическиеДанные.Найти("ОРГАНИЗАЦИЯ", "Реквизит");
	Если Не ОрганизацияЗапись = Неопределено Тогда 
		Организация = ОрганизацияЗапись.Значение;
	КонецЕсли;
	
	Валюта = Справочники.Валюты.ПустаяСсылка();
	
	ВалютаЗапись = СтатическиеДанные.Найти("ВАЛЮТАДОГОВОРОВ", "Реквизит");
	Если Не ВалютаЗапись = Неопределено Тогда 
		Валюта = ВалютаЗапись.Значение;
	КонецЕсли;	
	
	Попытка
		
		Для Сч = 1 По РазмерПроции Цикл
			
			СтруктураАналитики = Неопределено;
			
			Менеджер = Неопределено;
			
			ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
			
			Менеджер = Документы.ПриходныйОрдерНаТовары;
			
			Если ТекСтрока.vidorder = 1 Тогда 
				Менеджер = Документы.РасходныйОрдерНаТовары;
			КонецЕсли;
			
			ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
			
			Если ОбъектДляЗаписи = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			ОбъектДляЗаписи.Дата = ТекСтрока.Дата; 
			ОбъектДляЗаписи.Номер = ТекСтрока.F_NORDER; 
			ОбъектДляЗаписи.Комментарий = ТекСтрока.F_NPP;
			
			ДанныеПоОрдерам = ПолучитьДанныеПоОрдерам(ТекСтрока);
			
			Если ТипЗнч(Менеджер) = Тип("ДокументМенеджер.ПриходныйОрдерНаТовары") Тогда
				
				МОЛ = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CMOL, "dbo_T_KATMOL", "Физическое лицо", БлокировкиПотоков, НомерПотока);  
				Подразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CPODR, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока);  
				
				ОбъектДляЗаписи.Склад = ПолучитьСкладПоМОЛ(МОЛ, Подразделение);
				
				ОбъектДляЗаписи.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаОтПоставщика;
				ОбъектДляЗаписи.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
				ОбъектДляЗаписи.Распоряжение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CSOPR, "dbo_T_KATSOPR", "Поступления товаров и услуг", БлокировкиПотоков, НомерПотока);  
				
				Для Каждого СтрокаТЧ Из ДанныеПоОрдерам Цикл
					
					СтрокаТЧДок = ОбъектДляЗаписи.Товары.Добавить();
					
					СтрокаТЧДок.Номенклатура = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(СтрокаТЧ.F_CMCUSL, "dbo_T_KATMC", "Позиция номенклатуры", БлокировкиПотоков, НомерПотока); 
					
					СтрокаТЧДок.Количество = СтрокаТЧ.F_KOL;
					СтрокаТЧДок.КоличествоУпаковок = СтрокаТЧ.F_KOL;
					
				КонецЦикла;
				
			ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.РасходныйОрдерНаТовары") Тогда
				
				МОЛ = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CMOL, "dbo_T_KATMOL", "Физическое лицо", БлокировкиПотоков, НомерПотока);  
				Подразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CPODR, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока);  
				
				ОбъектДляЗаписи.Склад = ПолучитьСкладПоМОЛ(МОЛ, Подразделение);
				
				ОбъектДляЗаписи.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаКлиенту;
				ОбъектДляЗаписи.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
				
				ОбъектДляЗаписи.ОтгрузкаПоЗаданиюНаПеревозку = Ложь;
				ОбъектДляЗаписи.Приоритет = Справочники.Приоритеты.ПолучитьВысшийПриоритет();
				ОбъектДляЗаписи.ДатаОтгрузки = ОбъектДляЗаписи.Дата;
				
				Для Каждого СтрокаТЧ Из ДанныеПоОрдерам Цикл
					
					СтрокаТЧДок = ОбъектДляЗаписи.ОтгружаемыеТовары.Добавить();
					
					СтрокаТЧДок.Номенклатура = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(СтрокаТЧ.F_CMCUSL, "dbo_T_KATMC", "Позиция номенклатуры", БлокировкиПотоков, НомерПотока); 
					
					СтрокаТЧДок.Количество = СтрокаТЧ.F_KOL;
					СтрокаТЧДок.КоличествоУпаковок = СтрокаТЧ.F_KOL;
					
					СтрокаТЧДок.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
					
				КонецЦикла;
				
			КонецЕсли;
			
			СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
			
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		РегистрыСведений.НеЗагруженныеОбъекты.ДобавитьЗаписьОНезагруженномОбъекте(ТекСтрока, ИмяТаблицы, Сч, ТекстОшибки);
		
		СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область МетодыЗагрузкиДокументовПоСпецОстнастки

Функция ПолучитьДанныеДокументовПоСпецОстнастки(F_NREC_BD)
	
	СтруктураДокумента = Новый Структура("Шапка, ТабличнаяЧасть, Движения");

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	dbo___MBPMOVE.F_NREC,
	|	dbo___MBPMOVE.F_CMOL,
	|	dbo___MBPMOVE.F_CMBP,
	|	dbo___MBPMOVE.F_CMC,
	|	dbo___MBPMOVE.F_NAME,
	|	dbo___MBPMOVE.F_PRICE,
	|	dbo___MBPMOVE.F_KOLDOC,
	|	dbo___MBPMOVE.F_CMOLF,
	|	dbo___MBPMOVE.F_CPODRF,
	|	dbo___MBPMOVE.F_CPODR,
	|	dbo_T_OBOROT.F_SCHETO,
	|	dbo_T_OBOROT.F_SUBOSSCH,
	|	dbo_T_OBOROT.F_SCHETK,
	|	dbo_T_OBOROT.F_SUBSCHK
	|ИЗ
	|	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo___MBPMOVE КАК dbo___MBPMOVE
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_OBOROT КАК dbo_T_OBOROT
	|		ПО dbo___MBPMOVE.MBPIN = dbo_T_OBOROT.F_CSOPRDOC
	|ГДЕ
	|	dbo___MBPMOVE.F_NREC = &F_NREC";
	
	Запрос.УстановитьПараметр("F_NREC", F_NREC_BD);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ВыполнитьСозданиеДокументовПоСпецОстнастке(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Вариант = 3;
	Индекс = 0;
	
	Организация = Справочники.Организации.ПустаяСсылка();
	
	ОрганизацияЗапись = СтатическиеДанные.Найти("ОРГАНИЗАЦИЯ", "Реквизит");
	Если Не ОрганизацияЗапись = Неопределено Тогда 
		Организация = ОрганизацияЗапись.Значение;
	КонецЕсли;
	
	МассивСчетовДляАнализаДТМЦ = Новый Массив;
	
	МассивСчетовДляАнализаДТМЦ.Добавить("10");
	МассивСчетовДляАнализаДТМЦ.Добавить("41");
	
	Попытка
		
		Для Сч = 1 По РазмерПроции Цикл
			
			СтруктураАналитики = Неопределено;
			МенеджерСтрока = Неопределено;
			
			ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
			
			Если ТекСтрока.F_STATUS = 2 Тогда
				МенеджерСтрока = "ПеремещениеВЭксплуатации";
			ИначеЕсли ТекСтрока.F_STATUS = 4 Тогда 
				МенеджерСтрока = "ВнутреннееПотреблениеТоваров";
			КонецЕсли;
			
			Если МенеджерСтрока=Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			Менеджер = Документы[МенеджерСтрока];
			
			ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
			
			Если ОбъектДляЗаписи = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			ДанныеНакладных = ПолучитьДанныеДокументовПоСпецОстнастки(ТекСтрока.F_NREC_BD);

			ОбъектДляЗаписи.Дата 			= ТекСтрока.Дата; 
			ОбъектДляЗаписи.Номер 			= ТекСтрока.F_NOM; 
			ОбъектДляЗаписи.Комментарий		= ТекСтрока.F_DOPINFO;
			ОбъектДляЗаписи.Организация		= Организация;

			Если ТипЗнч(Менеджер) = Тип("ДокументМенеджер.ВнутреннееПотреблениеТоваров") Тогда
				
				ОбъектДляЗаписи.Подразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CPODRT, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); 
				
				МОЛ = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CMOL, "dbo_T_KATMOL", "Физическое лицо", БлокировкиПотоков, НомерПотока);  
				
				СтруктураСклада = ПолучитьОписаниеСклада(ТекСтрока.F_CPODRT);
				Склад = СтруктураСклада.Склад;
				Если СтруктураСклада.ЭтоТранзитный Тогда 
					
					Склад = ПолучитьСкладПоМОЛ(МОЛ, ОбъектДляЗаписи.Подразделение);
					
				КонецЕсли;
				ОбъектДляЗаписи.Склад = Склад;

				ОбъектДляЗаписи.ДатаРаспоряжения = ОбъектДляЗаписи.Дата;
				
				ОбъектДляЗаписи.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаВЭксплуатацию");
				
				ОбъектДляЗаписи.Товары.Очистить();
						
				Для Каждого ТекСтрокаДанных Из ДанныеНакладных Цикл
					
					Если МассивСчетовДляАнализаДТМЦ.Найти(ТекСтрокаДанных.F_DBSCHETO) = Неопределено Тогда 
						Продолжить;
					КонецЕсли;
					
					КатегорияЭксплуатацииСтрокой = ТекСтрокаДанных.F_DBSCHETO;
					
					СтрокаТЧДок = ОбъектДляЗаписи.Товары.Добавить();
					
					СтрокаТЧДок.Номенклатура = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрокаДанных.F_CMC, "dbo_T_KATMC", "Позиция номенклатуры", БлокировкиПотоков, НомерПотока); 
					
					СтрокаТЧДок.Количество = ТекСтрокаДанных.F_KOLDOC;
					СтрокаТЧДок.КоличествоУпаковок = ТекСтрокаДанных.F_KOLDOC;
					
					СтрокаТЧДок.ФизическоеЛицо = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрокаДанных.F_CMOL, "dbo_T_KATMOL", "Физическое лицо", БлокировкиПотоков, НомерПотока);  		
					
					КатегорияЭксплуатации = Справочники.КатегорииЭксплуатации.НайтиПоНаименованию(КатегорияЭксплуатацииСтрокой);
					Если КатегорияЭксплуатации.Пустая() Тогда 
						
						КатегорияЭксплуатации = Справочники.КатегорииЭксплуатации.СоздатьЭлемент();
						
						КатегорияЭксплуатации.Наименование = КатегорияЭксплуатацииСтрокой;
						
						КатегорияЭксплуатации.ОбменДанными.Загрузка = Истина;
						
						КатегорияЭксплуатации.Записать();
						
					КонецЕсли;
					СтрокаТЧДок.КатегорияЭксплуатации =  КатегорияЭксплуатации.Ссылка;
					
					СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.НайтиПоНаименованию(КатегорияЭксплуатацииСтрокой);
					Если СтатьяРасходов.Пустая() Тогда 
						
						СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.СоздатьЭлемент();
						
						СтатьяРасходов.Наименование = КатегорияЭксплуатацииСтрокой;
						
						СтатьяРасходов.ОбменДанными.Загрузка = Истина;
						
						СтатьяРасходов.Записать();
						
					КонецЕсли;
					СтрокаТЧДок.СтатьяРасходов =  СтатьяРасходов.Ссылка;
					
				КонецЦикла;
					
				ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.ПеремещениеВЭксплуатации") Тогда 
										
					ОбъектДляЗаписи.Подразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CPODRF, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока);  
					
					ОбъектДляЗаписи.ПодразделениеПолучатель = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CPODRT, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока);  		
					
					Если ДанныеНакладных.Количество()>0 Тогда 
						
						ОбъектДляЗаписи.Товары.Очистить();
						
						Для Каждого ТекСтрокаДанных Из ДанныеНакладных Цикл
							
							НоваяСтрока = ОбъектДляЗаписи.Товары.Добавить();
							
							НоваяСтрока.Количество = ТекСтрокаДанных.F_KOLDOC;
							
							Если НоваяСтрока.Количество = 0 Тогда 
								
								НоваяСтрока.Количество = 1;
								
							КонецЕсли;
							
							НоваяСтрока.Номенклатура = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрокаДанных.F_CMC, "dbo_T_KATMC", "Позиция номенклатуры", БлокировкиПотоков, НомерПотока);  		
							
							НоваяСтрока.ФизическоеЛицо = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрокаДанных.F_CMOLF, "dbo_T_KATMOL", "Физическое лицо", БлокировкиПотоков, НомерПотока);  		
							НоваяСтрока.ФизическоеЛицоПолучатель = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрокаДанных.F_CMOL, "dbo_T_KATMOL", "Физическое лицо", БлокировкиПотоков, НомерПотока);  		
							
							Если Не ЗначениеЗаполнено(ОбъектДляЗаписи.Подразделение) Тогда
								
								ОбъектДляЗаписи.Подразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрокаДанных.F_CPODR, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока);  
								
							КонецЕсли;
							
							Если Не ЗначениеЗаполнено(ОбъектДляЗаписи.ПодразделениеПолучатель) Тогда 
								
								ОбъектДляЗаписи.ПодразделениеПолучатель = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрокаДанных.F_CPODRF, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока);  		
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
			
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		РегистрыСведений.НеЗагруженныеОбъекты.ДобавитьЗаписьОНезагруженномОбъекте(ТекСтрока, ИмяТаблицы, Сч, ТекстОшибки);
		
		Стек = "ИМЯТАБЛИЦЫ: " + ИмяТаблицы + " ПОЛЕ: " + ТекСтрока.F_NREC + " Н: " +Строка(Сч) + " Е: " + Строка(РазмерПроции);
			
		СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек, ОбъектДляЗаписи);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область МетодыЗагрузкиДокументовСчетФактур

Процедура ВыполнитьСозданиеСчетФактур(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Вариант = 3;
	Индекс = 0;
	
	Организация = Справочники.Организации.ПустаяСсылка();
	
	ОрганизацияЗапись = СтатическиеДанные.Найти("ОРГАНИЗАЦИЯ", "Реквизит");
	Если Не ОрганизацияЗапись = Неопределено Тогда 
		Организация = ОрганизацияЗапись.Значение;
	КонецЕсли;
	
	Валюта = Справочники.Валюты.ПустаяСсылка();
	
	ВалютаЗапись = СтатическиеДанные.Найти("ВАЛЮТАДОГОВОРОВ", "Реквизит");
	Если Не ВалютаЗапись = Неопределено Тогда 
		Валюта = ВалютаЗапись.Значение;
	КонецЕсли;	
	
	Попытка
		
		Для Сч = 1 По РазмерПроции Цикл
			
			СтруктураАналитики = Неопределено;
			
			Менеджер = Неопределено;
			
			ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
			
			МенеджерСтрока = "СчетФактураВыданный";
			Если ТекСтрока.F_DIRECT = 2 Тогда 
				МенеджерСтрока = "СчетФактураПолученный";
			КонецЕсли;
			
			Менеджер = Документы[МенеджерСтрока];
			
			ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
			
			Если ОбъектДляЗаписи = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			Если ТекСтрока.F_TIPUSER = "7218" Тогда 
				
				ОбъектДляЗаписи.Корректировочный = Истина;
				
			КонецЕсли;
			
			ОбъектДляЗаписи.Валюта = Валюта;
			ОбъектДляЗаписи.Организация = Организация;
			
			ОбъектДляЗаписи.Номер = ТекСтрока.F_NUM;
			
			ОбъектДляЗаписи.КодВидаОперации = "01";
			
			Если ТекСтрока.F_TIPUSER = "7241" Тогда 
				
				ОбъектДляЗаписи.Корректировочный = Истина;
				
			КонецЕсли;
			
			ДокументОснование = Неопределено;
			
			Если ТипЗнч(Менеджер) = Тип("ДокументМенеджер.СчетФактураВыданный") Тогда
				
				ДокументОснование = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.Основание, "dbo_T_KATSOPR", "Реализация товаров и услуг", БлокировкиПотоков, НомерПотока);
				
				ОбъектДляЗаписи.ДатаВыставления = ОбъектДляЗаписи.Дата;
				
			ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.СчетФактураПолученный") Тогда
				
				ДокументОснование = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.Основание, "dbo_T_KATSOPR", "Поступление товаров и услуг", БлокировкиПотоков, НомерПотока);
				
				ОбъектДляЗаписи.ДатаСоставления = ОбъектДляЗаписи.Дата;
				
			Иначе
		
				СтрукутураЛога = Новый Структура;
				
				СтрукутураЛога.Вставить("Вид", "НеопределенноеПоведение");
				СтрукутураЛога.Вставить("Текст", "Не указан алгоритм преобразования Номер строки: 2985 Номер потока");
				СтрукутураЛога.Вставить("НомерПотока", НомерПотока);
				СтрукутураЛога.Вставить("ОбъектДляЗаписи", Строка(ОбъектДляЗаписи));
				СтрукутураЛога.Вставить("F_NREC", ТекСтрока.F_NREC);
				
				СинхронизацияГалактикаОбщегоНазначения.ЗаписатьЛог(СтрукутураЛога, "att_");

				Продолжить;
				
			КонецЕсли;
			
			Если ДокументОснование = Неопределено Тогда 
				
				СтрукутураЛога = Новый Структура;
				
				СтрукутураЛога.Вставить("Вид", "НеопределенноеПоведение");
				СтрукутураЛога.Вставить("Текст", "Неопределено основание");
				СтрукутураЛога.Вставить("НомерПотока", НомерПотока);
				СтрукутураЛога.Вставить("ОбъектДляЗаписи", Строка(ОбъектДляЗаписи));
				СтрукутураЛога.Вставить("F_NREC", ТекСтрока.F_NREC);
				
				СинхронизацияГалактикаОбщегоНазначения.ЗаписатьЛог(СтрукутураЛога, "att_");

				Продолжить;
				
			КонецЕсли;
			
			Если ДокументОснование.Пустая() Тогда 
				
				СтрукутураЛога = Новый Структура;
				
				СтрукутураЛога.Вставить("Вид", "НеопределенноеПоведение");
				СтрукутураЛога.Вставить("Текст", "Пустая ссылка основания");
				СтрукутураЛога.Вставить("НомерПотока", НомерПотока);
				СтрукутураЛога.Вставить("ОбъектДляЗаписи", Строка(ОбъектДляЗаписи));
				СтрукутураЛога.Вставить("F_NREC", ТекСтрока.F_NREC);
				
				СинхронизацияГалактикаОбщегоНазначения.ЗаписатьЛог(СтрукутураЛога, "att_");
				
				Продолжить;
				
			КонецЕсли;
			
			//изменение от 10082016
			//ОбъектДляЗаписи.Дата = ТекСтрока.Дата;
			ОбъектДляЗаписи.Дата = ДокументОснование.Дата;
			
			//СсылкаСчетФактура = ЗакупкиВызовСервера.СчетФактураДокумента(ДокументОснование.Ссылка, Организация, Ложь);
			//
			//Если Не СсылкаСчетФактура=Неопределено Тогда 
			//	
			//	ОбъектДляЗаписи = СсылкаСчетФактура.ПолучитьОбъект();
			//	
			//КонецЕсли;
			
			//ДанныеСчетаФактуры = ЗакупкиСервер.ДанныеСчетаФактурыСтруктурой(ДокументОснование, Организация, ДокументОснование.Контрагент, ДокументОснование.Номер, ДокументОснование.ДатаСоставления, ДокументОснование.Валюта, ДокументОснование.ДатаПолучения) Экспорт
			
			//ОбъектДляЗаписи = Менеджер.СоздатьДокумент();
			
			Нстрока = ОбъектДляЗаписи.ДокументыОснования.Добавить();
			
			Нстрока.ДокументОснование = ДокументОснование;
			
			ОбъектДляЗаписи.ЗаполнитьПараметрыСчетаФактурыПоОснованию();
			
			СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
			
			#Область устарело04072016
			
			//	ОбъектДляЗаписи.Контрагент = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CORG, "dbo_T_KATORG", "Контрагент", БлокировкиПотоков, НомерПотока);
			
			//	ОбъектДляЗаписи.ДокументыОснования.Очистить();
			//	
			//	Если ТипЗнч(Менеджер) = Тип("ДокументМенеджер.СчетФактураВыданный") Тогда
			//		
			//		ОбъектДляЗаписи.ВыставленВЭлектронномВиде = Истина;
			//		
			//		ОбъектДляЗаписи.ДокументОснование = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.Основание, "dbo_T_KATSOPR", "Реализация товаров и услуг", БлокировкиПотоков, НомерПотока);
			//
			//		ОбъектДляЗаписи.ДатаВыставления = ТекСтрока.ДатаРегистрации;
			//		
			//		ОбъектДляЗаписи.КППКонтрагента = ТекСтрока.F_SS_2_;				
			//		Если Не ЗначениеЗаполнено(ОбъектДляЗаписи.КППКонтрагента) Тогда 
			//			ОбъектДляЗаписи.КППКонтрагента = ТекСтрока.F_SS_1_;				
			//		КонецЕсли;
			//		
			//		СтрокаТЧ = ОбъектДляЗаписи.ДокументыОснования.Добавить();
			//		
			//		СтрокаТЧ.ДокументОснование = ОбъектДляЗаписи.ДокументОснование;
			//		
			//		Если ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование) Тогда 
			//			
			//			СтрокаТЧ.НомерИсходногоДокумента = СтрокаТЧ.ДокументОснование.Номер;
			//			СтрокаТЧ.ДатаИсходногоДокумента = СтрокаТЧ.ДокументОснование.Дата;
			//			
			//		КонецЕсли;
			//		
			//	ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.СчетФактураПолученный") Тогда
			//		
			//		СтрокаТЧ = ОбъектДляЗаписи.ДокументыОснования.Добавить();
			//		
			//		СтрокаТЧ.ДокументОснование = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.Основание, "dbo_T_KATSOPR", "Поступление товаров и услуг", БлокировкиПотоков, НомерПотока);
			//		
			//		Если ЗначениеЗаполнено(СтрокаТЧ.ДокументОснование) Тогда 
			//			
			//			СтрокаТЧ.НомерИсходногоДокумента = СтрокаТЧ.ДокументОснование.Номер;
			//			СтрокаТЧ.ДатаИсходногоДокумента = СтрокаТЧ.ДокументОснование.Дата;
			//			
			//		КонецЕсли;
			//		
			//	КонецЕсли;
			
			//	СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
			
			#КонецОбласти
			
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		РегистрыСведений.НеЗагруженныеОбъекты.ДобавитьЗаписьОНезагруженномОбъекте(ТекСтрока, ИмяТаблицы, Сч, ТекстОшибки);
		
		Стек = "ИМЯТАБЛИЦЫ: " + ИмяТаблицы + " ПОЛЕ: " + ТекСтрока.F_NREC + " Н: " +Строка(Сч) + " Е: " + Строка(РазмерПроции);
		
		СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек, ОбъектДляЗаписи);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область МетодыЗагрузкиДокументовКнигиПокупокПродаж

Функция ПолучитьДанныеКнигиПокупок(F_CSCHFACT)
	
	СтруктураДокумента = Новый Структура("Шапка, ТабличнаяЧасть, Движения");

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	dbo_T_SPSCHF.F_NREC,
	|	dbo_T_SPSCHF.F_NAME,
	|	dbo_T_SPSCHF.F_PRICE,
	|	dbo_T_SPSCHF.F_CMCUSL,
	|	dbo_T_SPSCHF.F_KOLOPL,
	|	dbo_T_SPSCHF.F_SUM,
	|	dbo_T_SPSCHF.F_NDS,
	|	dbo_T_SPSCHF.F_PRMC
	|ИЗ
	|	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_SPSCHF КАК dbo_T_SPSCHF
	|ГДЕ
	|	dbo_T_SPSCHF.F_CSCHFACT = &F_NREC";
	
	Запрос.УстановитьПараметр("F_NREC", F_CSCHFACT);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ВыполнитьСозданиеДокументовКнигиПокупокПродаж(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Вариант = 3;
	Индекс = 0;
	
	Организация = Справочники.Организации.ПустаяСсылка();
	
	ОрганизацияЗапись = СтатическиеДанные.Найти("ОРГАНИЗАЦИЯ", "Реквизит");
	Если Не ОрганизацияЗапись = Неопределено Тогда 
		Организация = ОрганизацияЗапись.Значение;
	КонецЕсли;
	
	Валюта = Справочники.Валюты.ПустаяСсылка();
	ВалютаЗапись = СтатическиеДанные.Найти("ВАЛЮТАДОГОВОРОВ", "Реквизит");
	Если Не ВалютаЗапись = Неопределено Тогда 
		Валюта = ВалютаЗапись.Значение;
	КонецЕсли;	
	
	Попытка
		
		Для Сч = 1 По РазмерПроции Цикл
			
			СтруктураАналитики = Неопределено;
			
			Менеджер = Неопределено;
			
			ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
			
			МенеджерСтрока = "ЗаписьКнигиПродаж";
			Если ТекСтрока.F_DIRECT = 2 Тогда 
				МенеджерСтрока = "ЗаписьКнигиПокупок";
			КонецЕсли;
			
			Менеджер = Документы[МенеджерСтрока];
			
			ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
			Если ОбъектДляЗаписи = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			ДанныеКниги = ПолучитьДанныеКнигиПокупок(ТекСтрока.F_CSCHFACT);
			
			ОбъектДляЗаписи.Валюта = Валюта;
			ОбъектДляЗаписи.Организация = Организация;
			
			ОбъектДляЗаписи.Дата = ТекСтрока.Дата;
			ОбъектДляЗаписи.Номер = ТекСтрока.F_NUM;
			ОбъектДляЗаписи.Комментарий = ТекСтрока.F_NAZN;
			ОбъектДляЗаписи.Подразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_COTVPODR, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока);  		
			
			ОбъектДляЗаписи.КодВидаОперации = "01"; 
			
			ОбъектДляЗаписи.Контрагент = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CORG, "dbo_T_KATORG", "Контрагент", БлокировкиПотоков, НомерПотока);
			
			Если ТипЗнч(Менеджер) = Тип("ДокументМенеджер.ЗаписьКнигиПокупок") Тогда
				
				ОбъектДляЗаписи.ПолученВЭлектронномВиде = Истина;
				ОбъектДляЗаписи.ДатаСчетаФактуры = ТекСтрока.F_DFACT_SCHFACT;
				ОбъектДляЗаписи.НомерСчетаФактуры = ТекСтрока.F_NUM_SCHFACT;
				
			Иначе
				
				ОбъектДляЗаписи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочееНачислениеНДС;
				
			КонецЕсли;
			
			ОбъектДляЗаписи.Ценности.Очистить();
			Для Каждого ТекСтрокаДанных Из ДанныеКниги Цикл
				
				СтрокаТЧ = ОбъектДляЗаписи.Ценности.Добавить();
				
				Если ТекСтрокаДанных.F_PRMC = 1 Тогда 
					СтрокаТЧ.Номенклатура = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрокаДанных.F_CMCUSL, "dbo_T_KATMC", "Позиция номенклатуры", БлокировкиПотоков, НомерПотока); 
				ИначеЕсли ТекСтрокаДанных.F_PRMC = 2 Тогда
					СтрокаТЧ.Номенклатура = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрокаДанных.F_CMCUSL, "dbo_T_KATUSL", "Позиция номенклатуры", БлокировкиПотоков, НомерПотока); 
				КонецЕсли;
				
				СтрокаТЧ.ВидЦенности = Перечисления.ВидыЦенностей.Товары;
				СтрокаТЧ.Событие = Перечисления.СобытияПоНДСПокупки.ПолученСчетФактура;
				
				СтрокаТЧ.Количество = ТекСтрокаДанных.F_KOLOPL;
				СтрокаТЧ.Сумма = ТекСтрокаДанных.F_SUM;
				СтрокаТЧ.СтавкаНДС = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтавкуНДСПосуммам(ТекСтрокаДанных.F_SUM, ТекСтрокаДанных.F_NDS);
				СтрокаТЧ.СуммаНДС = ТекСтрокаДанных.F_NDS;
				
			КонецЦикла;
			
			СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
			
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		РегистрыСведений.НеЗагруженныеОбъекты.ДобавитьЗаписьОНезагруженномОбъекте(ТекСтрока, ИмяТаблицы, Сч, ТекстОшибки);
		
		Стек = "ИМЯТАБЛИЦЫ: " + ИмяТаблицы + " ПОЛЕ: " + ТекСтрока.F_NREC + " Н: " +Строка(Сч) + " Е: " + Строка(РазмерПроции);
		
		СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек, ОбъектДляЗаписи);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтрефейс

Процедура ДанныеИзВнешнихИсточников(ВариантПолучения, СтруктураУсловий, Запрос, Разделитель) Экспорт
	
	ЭтоОтладка = Константы.СинхронизацияГалатикаОтладка.Получить();			
	
	Если ВариантПолучения="dbo_T_HDR_PS" Или ВариантПолучения=Неопределено Тогда 
		        
		Запрос.Текст =
		
		  "ВЫБРАТЬ
		 |	dbo_T_HDR_PS.F_NREC,
		 |	dbo_T_HDR_PS.F_ATL_LASTDATE,
		 |	dbo_T_HDR_PS.F_ATL_LASTTIME,
		 |	dbo_T_HDR_PS.F_NAME,
		 |	dbo_T_HDR_PS.F_NAME_0_61,
		 |	dbo_T_HDR_PS.F_CTECH
		 |ИЗ
		 |	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_HDR_PS КАК dbo_T_HDR_PS";
				
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
	Если ВариантПолучения="dbo_T_BOOKPRZK" Или ВариантПолучения=Неопределено Тогда 
		        
		Запрос.Текст =
		"ВЫБРАТЬ 
		|	dbo_T_BOOKPRZK.Таблица,
		|	dbo_T_BOOKPRZK.F_NREC КАК F_NREC_BD,
		|	BD_TO_NVARCHAR(dbo_T_BOOKPRZK.F_NREC) КАК F_NREC,
		|	GET_DT(dbo_T_BOOKPRZK.F_DREG, 0) КАК Дата,
		|	dbo_T_BOOKPRZK.F_ATL_LASTDATE,
		|	dbo_T_BOOKPRZK.F_ATL_LASTTIME,
		|	dbo_T_BOOKPRZK.F_REGDOC,
		|	dbo_T_BOOKPRZK.F_STATE,
		|	dbo_T_BOOKPRZK.F_CSCHFACT,
		|	dbo_T_BOOKPRZK.F_CSCHFACTS,
		|	dbo_T_BOOKPRZK.F_DREG,
		|	dbo_T_BOOKPRZK.F_NUM,
		|	dbo_T_BOOKPRZK.F_CORG,
		|	dbo_T_BOOKPRZK.F_NAZN,
		|	dbo_T_BOOKPRZK.F_COTVPODR,
		|	GET_DT(dbo_T_BOOKPRZK.F_DFACT_SCHFACT, 0) КАК F_DFACT_SCHFACT,
		|	dbo_T_BOOKPRZK.F_NUM_SCHFACT,
		|	dbo_T_BOOKPRZK.F_DIRECT,
		|	dbo_T_BOOKPRZK.F_TIPUSER
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫРАЗИТЬ(""dbo_T_BOOKPRZK"" КАК СТРОКА(14)) КАК Таблица,
		|		dbo_T_BOOKPRZK.F_NREC КАК F_NREC,
		|		dbo_T_BOOKPRZK.F_ATL_LASTDATE КАК F_ATL_LASTDATE,
		|		dbo_T_BOOKPRZK.F_ATL_LASTTIME КАК F_ATL_LASTTIME,
		|		dbo_T_BOOKPRZK.F_REGDOC КАК F_REGDOC,
		|		dbo_T_BOOKPRZK.F_STATE КАК F_STATE,
		|		dbo_T_BOOKPRZK.F_CSCHFACT КАК F_CSCHFACT,
		|		dbo_T_BOOKPRZK.F_CSCHFACTS КАК F_CSCHFACTS,
		|		dbo_T_BOOKPRZK.F_DREG КАК F_DREG,
		|		dbo_T_BOOKPRZK.F_NUM КАК F_NUM,
		|		dbo_T_BOOKPRZK.F_CORG КАК F_CORG,
		|		dbo_T_BOOKPRZK.F_NAZN КАК F_NAZN,
		|		dbo_T_BOOKPRZK.F_COTVPODR КАК F_COTVPODR,
		|		dbo_T_SCHFACT.F_NUM КАК F_NUM_SCHFACT,
		|		dbo_T_SCHFACT.F_DFACT КАК F_DFACT_SCHFACT,
		|		dbo_T_BOOKPRZK.F_DIRECT КАК F_DIRECT,
		|		dbo_T_SCHFACT.F_TIPUSER КАК F_TIPUSER
		|	ИЗ
		|		ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_BOOKPRZK КАК dbo_T_BOOKPRZK
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_SCHFACT КАК dbo_T_SCHFACT
		|			ПО dbo_T_BOOKPRZK.F_CSCHFACT = dbo_T_SCHFACT.F_NREC
		|	ГДЕ
		|		dbo_T_BOOKPRZK.F_DOPR >= START_DATE()
		|		И dbo_T_BOOKPRZK.F_DREG > 0) КАК dbo_T_BOOKPRZK";
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
	Если ВариантПолучения="dbo_T_SCHFACT" Или ВариантПолучения=Неопределено Тогда 
		        
		Запрос.Текст =
		"ВЫБРАТЬ
		|	dbo_T_SCHFACT.Таблица КАК Таблица,
		|	BD_TO_NVARCHAR(dbo_T_SCHFACT.F_NREC) КАК F_NREC,
		|	dbo_T_SCHFACT.F_NUM,
		|	dbo_T_SCHFACT.F_CORG,
		|	dbo_T_SCHFACT.F_NAZN,
		|	GET_DT(dbo_T_SCHFACT.F_DFACT, 0) КАК Дата,
		|	GET_DT(dbo_T_SCHFACT.F_DREG, 0) КАК ДатаРегистрации,
		|	dbo_T_SCHFACT.F_TIPUSER,
		|	BD_TO_NVARCHAR(dbo_T_SCHFACT.F_NREC_KATSOPR) КАК Основание,
		|	dbo_T_SCHFACT.F_DFACT,
		|	dbo_T_SCHFACT.F_STATUS,
		|	dbo_T_SCHFACT.F_STATE,
		|	dbo_T_SCHFACT.F_DIRECT,
		|	dbo_T_SCHFACT.F_SS_1_,
		|	dbo_T_SCHFACT.F_SS_2_,
		|	dbo_T_SCHFACT.F_ATL_LASTDATE
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫРАЗИТЬ(""dbo_T_SCHFACT"" КАК СТРОКА(14)) КАК Таблица,
		|		dbo_T_SCHFACT.F_NREC КАК F_NREC,
		|		dbo_T_SCHFACT.F_ATL_LASTTIME КАК F_ATL_LASTTIME,
		|		dbo_T_SCHFACT.F_NUM КАК F_NUM,
		|		dbo_T_SCHFACT.F_CORG КАК F_CORG,
		|		dbo_T_SCHFACT.F_NAZN КАК F_NAZN,
		|		dbo_T_SCHFACT.F_DFACT КАК F_DFACT,
		|		dbo_T_SCHFACT.F_DIRECT КАК F_DIRECT,
		|		dbo_T_SCHFACT.F_TIPUSER КАК F_TIPUSER,
		|		dbo___KATSOPR_HEADER.F_NREC КАК F_NREC_KATSOPR,
		|		dbo_T_SCHFACT.F_DREG КАК F_DREG,
		|		dbo_T_SCHFACT.F_STATE КАК F_STATE,
		|		dbo_T_SCHFACT.F_STATUS КАК F_STATUS,
		|		dbo_T_SCHFACT.F_SS_1_ КАК F_SS_1_,
		|		dbo_T_SCHFACT.F_SS_2_ КАК F_SS_2_,
		|		dbo_T_SCHFACT.F_ATL_LASTDATE КАК F_ATL_LASTDATE
		|	ИЗ
		|		ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_SCHFACT КАК dbo_T_SCHFACT
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo___KATSOPR_HEADER КАК dbo___KATSOPR_HEADER
		|			ПО dbo_T_SCHFACT.F_NREC = dbo___KATSOPR_HEADER.F_CSCHFACT
		|	ГДЕ
		|		dbo_T_SCHFACT.F_DFACT >= START_DATE()
		|		И dbo_T_SCHFACT.F_DREG > 0
		|		И dbo_T_SCHFACT.F_DIRECT = 2) КАК dbo_T_SCHFACT";
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
	Если ВариантПолучения="dbo_T_MBPMOVE" Или ВариантПолучения=Неопределено Тогда 
		        
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(""dbo_T_MBPMOVE"" КАК СТРОКА(14)) КАК Таблица,
		|	BD_TO_NVARCHAR(dbo_T_MBPMOVE.F_NREC) КАК F_NREC,
		|	dbo_T_MBPMOVE.F_NREC КАК F_NREC_BD,
		|	dbo_T_MBPMOVE.F_ATL_LASTDATE,
		|	dbo_T_MBPMOVE.F_CMOLF,
		|	dbo_T_MBPMOVE.F_STATUS КАК F_STATUS,
		|	dbo_T_MBPMOVE.F_NOM,
		|	dbo_T_MBPMOVE.F_DOPINFO,
		|	dbo_T_MBPMOVE.F_CPODRT,
		|	dbo_T_MBPMOVE.F_CPODRF,
		|	GET_DT(dbo_T_MBPMOVE.F_DMOVE, dbo_T_MBPMOVE.F_ATL_LASTTIME) КАК Дата,
		|	dbo_T_MBPMOVE.F_CMOLT
		|ИЗ
		|	(ВЫБРАТЬ
		|		dbo_T_MBPMOVE.F_NREC КАК F_NREC,
		|		dbo_T_MBPMOVE.F_ATL_LASTDATE КАК F_ATL_LASTDATE,
		|		dbo_T_MBPMOVE.F_ATL_LASTTIME КАК F_ATL_LASTTIME,
		|		dbo_T_MBPMOVE.F_CMOLF КАК F_CMOLF,
		|		dbo_T_MBPMOVE.F_STATUS КАК F_STATUS,
		|		dbo_T_MBPMOVE.F_NOM КАК F_NOM,
		|		dbo_T_MBPMOVE.F_DOPINFO КАК F_DOPINFO,
		|		dbo_T_MBPMOVE.F_CPODRT КАК F_CPODRT,
		|		dbo_T_MBPMOVE.F_CPODRF КАК F_CPODRF,
		|		dbo_T_MBPMOVE.F_DMOVE КАК F_DMOVE,
		|		dbo_T_MBPMOVE.F_CMOLT КАК F_CMOLT
		|	ИЗ
		|		ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_MBPMOVE КАК dbo_T_MBPMOVE
		|	ГДЕ
		|		dbo_T_MBPMOVE.F_DMOVE >= START_DATE()
		|		И dbo_T_MBPMOVE.F_STATUS = 2) КАК dbo_T_MBPMOVE";
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
	Если ВариантПолучения="dbo_T_PERSONS_KONTR" Или ВариантПолучения=Неопределено Тогда 
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	""dbo_T_PERSONS_KONTR"" КАК Таблица,
		|	BD_TO_NVARCHAR(dbo_T_PERSONS_KONTR.F_NREC) F_NREC,
		|	dbo_T_PERSONS_KONTR.F_ATL_LASTDATE,
		|	dbo_T_PERSONS_KONTR.F_FIO
		|ИЗ
		|	(ВЫБРАТЬ
		|		""dbo_T_PERSONS_KONTR"" КАК Таблица,
		|		BD_TO_NVARCHAR(dbo_T_PERSONS.F_NREC) КАК F_NREC,
		|		dbo_T_PERSONS.F_ATL_LASTDATE КАК F_ATL_LASTDATE,
		|		dbo_T_PERSONS.F_FIO КАК F_FIO
		|	ИЗ
		|		ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_PERSONS КАК dbo_T_PERSONS) КАК dbo_T_PERSONS_KONTR";
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
	Если ВариантПолучения="dbo_T_SKLORDER" Или ВариантПолучения=Неопределено Тогда 
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	""dbo_T_SKLORDER"" КАК Таблица,
		|	dbo_T_SKLORDER.F_NREC,
		|	dbo_T_SKLORDER.F_ATL_LASTDATE,
		|	dbo_T_SKLORDER.F_NORDER,
		|	dbo_T_SKLORDER.F_VIDORDER,
		|	dbo_T_SKLORDER.F_CSOPR,
		|	dbo_T_SKLORDER.F_CRZDOC,
		|	dbo_T_SKLORDER.F_CPODR,
		|	dbo_T_SKLORDER.F_CMOL,
		|	dbo_T_SKLORDER.Дата,
		|	dbo_T_SKLORDER.F_DORD,
		|	dbo_T_SKLORDER.F_CHOZOPER,
		|	dbo_T_SKLORDER.F_NPP
		|ИЗ
		|	(ВЫБРАТЬ
		|		dbo_T_SKLORDER.F_NREC КАК F_NREC,
		|		dbo_T_SKLORDER.F_ATL_LASTDATE КАК F_ATL_LASTDATE,
		|		dbo_T_SKLORDER.F_NORDER КАК F_NORDER,
		|		dbo_T_SKLORDER.F_VIDORDER КАК F_VIDORDER,
		|		dbo_T_SKLORDER.F_CSOPR КАК F_CSOPR,
		|		dbo_T_SKLORDER.F_CRZDOC КАК F_CRZDOC,
		|		dbo_T_SKLORDER.F_CPODR КАК F_CPODR,
		|		dbo_T_SKLORDER.F_CMOL КАК F_CMOL,
		|		GET_DT(dbo_T_SKLORDER.F_DORD, dbo_T_SKLORDER.F_ATL_LASTTIME) КАК Дата,
		|		dbo_T_SKLORDER.F_DORD КАК F_DORD,
		|		dbo_T_SKLORDER.F_CHOZOPER КАК F_CHOZOPER,
		|		dbo_T_SKLORDER.F_NPP КАК F_NPP
		|	ИЗ
		|		ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_SKLORDER КАК dbo_T_SKLORDER
		|	ГДЕ
		|		dbo_T_SKLORDER.F_DORD >= START_DATE()) КАК dbo_T_SKLORDER";
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;	
	
	Если ВариантПолучения="dbo_T_KATUSL" Или ВариантПолучения=Неопределено Тогда 
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	""dbo_T_KATUSL"" КАК Таблица,
		|	BD_TO_NVARCHAR(dbo_T_KATUSL.F_NREC) КАК F_NREC,
		|	dbo_T_KATUSL.F_ATL_LASTDATE,
		|	dbo_T_KATUSL.F_NAME,
		|	dbo_T_KATUSL.F_KOD,
		|	dbo_T_KATUSL.F_CSTZATR,
		|	dbo_T_KATUSL.F_CED,
		|	dbo_T_KATUSL.F_CGROUPUSL,
		|	dbo_T_KATUSL.F_KGROUPUSL,
		|	dbo_T_KATUSL.F_OBOZN,
		|	dbo_T_KATED.F_ABBR,
		|	dbo_T_KATED.F_KOD КАК F_KOD1,
		|	dbo_T_GROUPUSL.F_NAME КАК F_NAME1
		|ИЗ
		|	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KATUSL КАК dbo_T_KATUSL
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KATED КАК dbo_T_KATED
		|		ПО dbo_T_KATUSL.F_CED = dbo_T_KATED.F_NREC
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_GROUPUSL КАК dbo_T_GROUPUSL
		|		ПО dbo_T_KATUSL.F_CGROUPUSL = dbo_T_GROUPUSL.F_NREC";
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
	Если ВариантПолучения="dbo_T_KATSOPR" Или ВариантПолучения=Неопределено Тогда 
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	BD_TO_NVARCHAR(dbo_T_KATSOPR.F_NREC) КАК F_NREC,
		|	dbo_T_KATSOPR.F_NREC_BD,
		|	dbo_T_KATSOPR.Таблица,
		|	dbo_T_KATSOPR.F_ATL_LASTDATE,
		|	dbo_T_KATSOPR.F_VIDSOPR,
		|	dbo_T_KATSOPR.F_TIPSOPR,
		|	dbo_T_KATSOPR.F_SUMMA,
		|	dbo_T_KATSOPR.F_WADOC,
		|	dbo_T_KATSOPR.F_DOPR,
		|	dbo_T_KATSOPR.F_DSOPR
		|ИЗ
		|	(ВЫБРАТЬ
		|		dbo_T_KATSOPR.F_NREC КАК F_NREC,
		|		dbo_T_KATSOPR.F_NREC КАК F_NREC_BD,
		|		ВЫРАЗИТЬ(""dbo_T_KATSOPR"" КАК СТРОКА(14)) КАК Таблица,
		|		dbo_T_KATSOPR.F_ATL_LASTDATE КАК F_ATL_LASTDATE,
		|		dbo_T_KATSOPR.F_VIDSOPR КАК F_VIDSOPR,
		|		dbo_T_KATSOPR.F_TIPSOPR КАК F_TIPSOPR,
		|		dbo_T_KATSOPR.F_SUMMA КАК F_SUMMA,
		|		dbo_T_KATSOPR.F_WADOC КАК F_WADOC,
		|		dbo_T_KATSOPR.F_DOPR КАК F_DOPR,
		|		dbo_T_KATSOPR.F_DSOPR КАК F_DSOPR
		|	ИЗ
		|		ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KATSOPR КАК dbo_T_KATSOPR
		|	ГДЕ
		|		dbo_T_KATSOPR.F_DOPR >= START_DATE()
		|		И dbo_T_KATSOPR.F_DSOPR > 0
		|		И dbo_T_KATSOPR.F_VIDSOPR В
		|				(ВЫБРАТЬ
		|					612 КАК F_VIDSOPR
		|			
		|				ОБЪЕДИНИТЬ ВСЕ
		|			
		|				ВЫБРАТЬ
		|					611
		|			
		|				ОБЪЕДИНИТЬ ВСЕ
		|			
		|				ВЫБРАТЬ
		|					211
		|			
		|				ОБЪЕДИНИТЬ ВСЕ
		|			
		|				ВЫБРАТЬ
		|					504
		|			
		|				ОБЪЕДИНИТЬ ВСЕ
		|			
		|				ВЫБРАТЬ
		|					501
		|			
		|				ОБЪЕДИНИТЬ ВСЕ
		|			
		|				ВЫБРАТЬ
		|					502
		|			
		|				ОБЪЕДИНИТЬ ВСЕ
		|			
		|				ВЫБРАТЬ
		|					204
		|			
		|				ОБЪЕДИНИТЬ ВСЕ
		|			
		|				ВЫБРАТЬ
		|					506
		|			
		|				ОБЪЕДИНИТЬ ВСЕ
		|			
		|				ВЫБРАТЬ
		|					503
		|			
		|				ОБЪЕДИНИТЬ ВСЕ
		|			
		|				ВЫБРАТЬ
		|					501
		|			
		|				ОБЪЕДИНИТЬ ВСЕ
		|			
		|				ВЫБРАТЬ
		|					201
		|			
		|				ОБЪЕДИНИТЬ ВСЕ
		|			
		|				ВЫБРАТЬ
		|					602
		|			
		|				ОБЪЕДИНИТЬ ВСЕ
		|			
		|				ВЫБРАТЬ
		|					101
		|			
		|				ОБЪЕДИНИТЬ ВСЕ
		|			
		|				ВЫБРАТЬ
		|					630
		|			
		|				ОБЪЕДИНИТЬ ВСЕ
		|			
		|				ВЫБРАТЬ
		|					111
		|			
		|				ОБЪЕДИНИТЬ ВСЕ
		|			
		|				ВЫБРАТЬ
		|					600)) КАК dbo_T_KATSOPR";


		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
	Если ВариантПолучения="dbo_T_HOZOPER" Или ВариантПолучения=Неопределено Тогда 
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	""dbo_T_HOZOPER"" КАК Таблица,
		|	BD_TO_NVARCHAR(dbo_T_HOZOPER.F_NREC) КАК F_NREC,
		|	dbo_T_HOZOBOR.F_DBSCHETO КАК СчетРасходов,
		|	dbo_T_HOZOBOR.F_SUBOS КАК СубСчетРасходов,
		|	dbo_T_HOZOPER.F_NAME1,
		|	dbo_T_HOZOPER.F_NAME2,
		|	dbo_T_HOZOPER.F_CODE,
		|	dbo_T_HOZOPER.F_ATL_LASTDATE
		|ИЗ
		|	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_HOZOPER КАК dbo_T_HOZOPER
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_HOZOBOR КАК dbo_T_HOZOBOR
		|		ПО dbo_T_HOZOPER.F_NREC = dbo_T_HOZOBOR.F_CHOZOPER";
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
	Если ВариантПолучения="dbo_T_KATBANK" Или ВариантПолучения=Неопределено Тогда 
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	0 КАК F_id,
		|	""dbo_T_KATBANK"" КАК Таблица,
		|	BD_TO_NVARCHAR(dbo_T_KATBANK.F_NREC) F_NREC,
		|	dbo_T_KATBANK.F_ATL_LASTDATE,
		|	BD_TO_NVARCHAR(dbo_T_KATBANK.F_CORG) F_CORG,
		|	dbo_T_KATBANK.F_CBANK,
		|	dbo_T_KATBANK.F_NAME,
		|	dbo_T_KATBANK.F_REMARK,
		|	dbo_T_KATBANK.F_ADDR,
		|	dbo_T_KATBANK.F_MFO1,
		|	dbo_T_KATBANK.F_MFO2,
		|	dbo_T_KATBANK.F_SCHET1,
		|	dbo_T_KATBANK.F_SCHET2,
		|	dbo_T_KATBANK.F_SCHET3,
		|	dbo_T_KATBANK.F_TIPSCHET,
		|	dbo_T_KATBANK.F_AKTIV,
		|	dbo_T_KATB.F_KODBANK
		|ИЗ
		|	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KATBANK КАК dbo_T_KATBANK
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KATB КАК dbo_T_KATB
		|		ПО dbo_T_KATBANK.F_CBANK = dbo_T_KATB.F_NREC";
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
	Если ВариантПолучения="dbo_T_KATMC" Или ВариантПолучения=Неопределено Тогда 
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	""dbo_T_KATMC"" КАК Таблица,
		|	dbo_T_GRNAL.F_KOD КАК СтавкаНДС,
		|	dbo_T_KATMC.F_ATL_LASTDATE,
		|	BD_TO_NVARCHAR(dbo_T_KATMC.F_NREC) КАК F_NREC,
		|	dbo_T_KATMC.F_NAME,
		|	dbo_T_KATED.F_ABBR КАК ЕдИзм,
		|	dbo_T_TYPEMC.F_NAME КАК ВидНоменклатуры,
		|	BD_TO_NVARCHAR(dbo_T_GROUPMC.F_NREC) КАК Родитель,
		|	dbo_T_KATMC.F_BARKOD,
		|	dbo_T_GROUPMC.F_NAME КАК РодительНаименование,
		|	ЕСТЬNULL(dbo_T_GROUPMC.F_NAME, """") КАК ГруппаАУ,
		|	BD_TO_NVARCHAR(dbo_T_GROUPMC.F_NREC) КАК ГруппаАУF_NREC,
		|	dbo_T_GROUPMC.F_NAME КАК ГруппаФУ
		|ИЗ
		|	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KATMC КАК dbo_T_KATMC
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_GRNAL КАК dbo_T_GRNAL
		|		ПО dbo_T_KATMC.F_CGRNAL = dbo_T_GRNAL.F_NREC
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KATED КАК dbo_T_KATED
		|		ПО dbo_T_KATMC.F_CED = dbo_T_KATED.F_NREC
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_TYPEMC КАК dbo_T_TYPEMC
		|		ПО dbo_T_KATMC.F_CTYPE = dbo_T_TYPEMC.F_NREC
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_GROUPMC КАК dbo_T_GROUPMC
		|		ПО dbo_T_KATMC.F_CGROUPMC = dbo_T_GROUPMC.F_NREC";
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
	Если ВариантПолучения="dbo_T_GROUPMC" Или ВариантПолучения=Неопределено Тогда 
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	""dbo_T_GROUPMC"" КАК Таблица,
		|	ЕСТЬNULL(dbo_T_GROUPMC.F_NAME, """") КАК Наименование,
		|	BD_TO_NVARCHAR(dbo_T_GROUPMC.F_NREC) КАК F_NREC,
		|	dbo_T_GROUPMC.F_ATL_LASTDATE F_ATL_LASTDATE
		|ИЗ
		|	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_GROUPMC КАК dbo_T_GROUPMC";
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
	Если ВариантПолучения="dbo_T_KATORG" Или ВариантПолучения=Неопределено Тогда 
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	""dbo_T_KATORG"" КАК Таблица,
		|	BD_TO_NVARCHAR(dbo_T_KATORG.F_NREC) КАК F_NREC,
		|	dbo_T_KATORG.F_ATL_LASTDATE,
		|	dbo_T_KATORG.F_NAME,
		|	dbo_T_KATORG.F_CODE,
		|	dbo_T_KATORG.F_ADDR,
		|	dbo_T_KATORG.F_OKPO,
		|	dbo_T_KATORG.F_OKDP,
		|	dbo_T_KATORG.F_OKONH,
		|	dbo_T_KATORG.F_TEL,
		|	dbo_T_KATORG.F_UNN,
		|	dbo_T_KATORG.F_EMAIL,
		|	dbo_T_KATORG.F_CADDR,
		|	dbo_T_KATORG.F_CKPP,
		|	dbo_T_KATORG.F_KODPLATNDS,
		|	dbo_T_KATORG.F_TIPORG
		|ИЗ
		|	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KATORG КАК dbo_T_KATORG";
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
	Если ВариантПолучения="dbo_T_DOGOVOR" Или ВариантПолучения=Неопределено Тогда 
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	dbo_T_DOGOVOR.Таблица,
		|	BD_TO_NVARCHAR(dbo_T_DOGOVOR.F_NREC) КАК F_NREC,
		|	BD_TO_NVARCHAR(dbo_T_DOGOVOR.Контрагент) КАК Контрагент,
		|	dbo_T_DOGOVOR.Сумма,
		|	dbo_T_DOGOVOR.Номер,
		|	dbo_T_DOGOVOR.НомерВнеш,
		|	dbo_T_DOGOVOR.ВидДоговора,
		|	dbo_T_DOGOVOR.СокрНаименование,
		|	dbo_T_DOGOVOR.ТипДоговора,
		|	dbo_T_DOGOVOR.ТипДоговораСокр,
		|	dbo_T_DOGOVOR.F_DBEG,
		|	dbo_T_DOGOVOR.F_MFO1,
		|	dbo_T_DOGOVOR.F_MFO2,
		|	dbo_T_DOGOVOR.F_SCHET1,
		|	dbo_T_DOGOVOR.F_SCHET2,
		|	dbo_T_DOGOVOR.F_SCHET3,
		|	dbo_T_DOGOVOR.F_CBANKPOL,
		|	dbo_T_DOGOVOR.F_CCURPODR,
		|	dbo_T_DOGOVOR.F_ATL_LASTDATE,
		|	BD_TO_NVARCHAR(dbo_T_DOGOVOR.F_CVAL) КАК F_CVAL,
		|	dbo_T_DOGOVOR.F_CNODE,
		|	dbo_T_DOGOVOR.F_ISO,
		|	dbo_T_DOGOVOR.F_SIMVOLV
		|ИЗ
		|	(ВЫБРАТЬ
		|		""dbo_T_DOGOVOR"" КАК Таблица,
		|		dbo_T_DOGOVOR.F_NREC КАК F_NREC,
		|		dbo_T_DOGOVOR.F_CORG КАК Контрагент,
		|		dbo_T_DOGOVOR.F_SUMMA КАК Сумма,
		|		dbo_T_DOGOVOR.F_NODOC КАК Номер,
		|		dbo_T_DOGOVOR.F_NODOC_EXT КАК НомерВнеш,
		|		dbo_T_KATVIDD.F_NAME КАК ВидДоговора,
		|		dbo_T_KATVIDD.F_SNAME КАК СокрНаименование,
		|		dbo_T_KATNOTES.F_NAME КАК ТипДоговора,
		|		dbo_T_KATNOTES.F_SNAME КАК ТипДоговораСокр,
		|		dbo_T_DOGOVOR.F_DBEG КАК F_DBEG,
		|		dbo_T_KATBANK.F_MFO1 КАК F_MFO1,
		|		dbo_T_KATBANK.F_MFO2 КАК F_MFO2,
		|		dbo_T_KATBANK.F_SCHET1 КАК F_SCHET1,
		|		dbo_T_KATBANK.F_SCHET2 КАК F_SCHET2,
		|		dbo_T_KATBANK.F_SCHET3 КАК F_SCHET3,
		|		BD_TO_NVARCHAR(dbo_T_DOGOVOR.F_CBANKPOL) КАК F_CBANKPOL,
		|		dbo_T_DOGOVOR.F_CCURPODR КАК F_CCURPODR,
		|		dbo_T_DOGOVOR.F_ATL_LASTDATE КАК F_ATL_LASTDATE,
		|		dbo_T_DOGOVOR.F_CVAL КАК F_CVAL,
		|		dbo_T_KLVAL.F_CNODE КАК F_CNODE,
		|		dbo_T_KLVAL.F_ISO КАК F_ISO,
		|		dbo_T_KLVAL.F_SIMVOLV КАК F_SIMVOLV
		|	ИЗ
		|		ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_DOGOVOR КАК dbo_T_DOGOVOR
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KATVIDD КАК dbo_T_KATVIDD
		|			ПО dbo_T_DOGOVOR.F_CVIDDOG = dbo_T_KATVIDD.F_NREC
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KLVAL КАК dbo_T_KLVAL
		|			ПО dbo_T_DOGOVOR.F_CVAL = dbo_T_KLVAL.F_NREC
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KATNOTES КАК dbo_T_KATNOTES
		|			ПО dbo_T_DOGOVOR.F_STATUS = dbo_T_KATNOTES.F_STATUS
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KATBANK КАК dbo_T_KATBANK
		|			ПО dbo_T_DOGOVOR.F_CBANKPOL = dbo_T_KATBANK.F_NREC
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KATORG КАК dbo_T_KATORG
		|			ПО dbo_T_DOGOVOR.F_CORG = dbo_T_KATORG.F_NREC
		|	ГДЕ
		|		dbo_T_KATNOTES.F_VIDDOC = 400
		|		И НЕ dbo_T_KATORG.F_NREC ЕСТЬ NULL ) КАК dbo_T_DOGOVOR
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KLVAL КАК dbo_T_KLVAL
		|		ПО dbo_T_DOGOVOR.F_CVAL = dbo_T_KLVAL.F_NREC";
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
		
	Если ВариантПолучения="dbo_T_STZATR" Или ВариантПолучения=Неопределено Тогда 
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	""dbo_T_STZATR"" КАК Таблица,
		|	BD_TO_NVARCHAR(dbo_T_STZATR.F_NREC) F_NREC,
		|	dbo_T_STZATR.F_ATL_LASTDATE,
		|	dbo_T_STZATR.F_NAME,
		|	dbo_T_STZATR.F_KOD,
		|	BD_TO_NVARCHAR(dbo_T_STZATR.F_CSTZATR) КАК F_CSTZATR
		|ИЗ
		|	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_STZATR КАК dbo_T_STZATR";
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
	Если ВариантПолучения="dbo_T_KATPODR" Или ВариантПолучения=Неопределено Тогда 
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|		BD_TO_NVARCHAR(dbo_T_KATPODR.F_NREC) КАК F_NREC,
		|		dbo_T_KATPODR.F_ATL_LASTDATE КАК F_ATL_LASTDATE,
		|		dbo_T_KATPODR.F_ATL_LASTTIME КАК F_ATL_LASTTIME,
		|		dbo_T_KATPODR.F_FILIALNO КАК F_FILIALNO,
		|		dbo_T_KATPODR.F_CODE КАК F_CODE,
		|		BD_TO_NVARCHAR(dbo_T_KATPODR.F_CPODR) КАК F_CPODR,
		|		dbo_T_KATPODR.F_ISLEAF КАК F_ISLEAF,
		|		dbo_T_KATPODR.F_NAME КАК F_NAME,
		|		dbo_T_KATPODR.F_KOD КАК F_KOD,
		|		dbo_T_KATPODR.F_FIO КАК F_FIO,
		|		dbo_T_KATPODR.F_CUSER КАК F_CUSER,
		|		dbo_T_KATPODR.F_ADDR КАК F_ADDR,
		|		dbo_T_KATPODR.F_TEL КАК F_TEL,
		|		dbo_T_KATPODR.F_SKLAD КАК F_SKLAD,
		|		dbo_T_KATPODR.F_VOLUME КАК F_VOLUME,
		|		dbo_T_KATPODR.F_CRESHR КАК F_CRESHR,
		|		dbo_T_KATPODR.F_CGRPODR КАК F_CGRPODR,
		|		dbo_T_KATPODR.F_SKPRIOR КАК F_SKPRIOR,
		|		dbo_T_KATPODR.F_INTERN КАК F_INTERN,
		|		dbo_T_KATPODR.F_CFUNC КАК F_CFUNC,
		|		dbo_T_KATPODR.F_SMEN КАК F_SMEN,
		|		dbo_T_KATPODR.F_PRSKLAD КАК F_PRSKLAD,
		|		dbo_T_KATPODR.F_TYPEUCH КАК F_TYPEUCH,
		|		dbo_T_KATPODR.F_CORG КАК F_CORG,
		|		""dbo_T_KATPODR"" КАК Таблица,
		|		dbo_T_KATPODR.F_ISARCH КАК F_ISARCH
		|	ИЗ
		|		ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KATPODR КАК dbo_T_KATPODR";
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
	Если ВариантПолучения="dbo_T_KATPODR_STOCK" Или ВариантПолучения=Неопределено Тогда 
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	BD_TO_NVARCHAR(dbo_T_KATPODR_STOCK.F_NREC) КАК F_NREC,
		|	dbo_T_KATPODR_STOCK.F_ATL_LASTDATE,
		|	dbo_T_KATPODR_STOCK.F_ATL_LASTTIME,
		|	dbo_T_KATPODR_STOCK.F_FILIALNO,
		|	dbo_T_KATPODR_STOCK.F_CODE,
		|	BD_TO_NVARCHAR(dbo_T_KATPODR_STOCK.F_CPODR) КАК F_CPODR,
		|	dbo_T_KATPODR_STOCK.F_ISLEAF,
		|	dbo_T_KATPODR_STOCK.F_NAME,
		|	dbo_T_KATPODR_STOCK.F_KOD,
		|	dbo_T_KATPODR_STOCK.F_FIO,
		|	dbo_T_KATPODR_STOCK.F_CUSER,
		|	dbo_T_KATPODR_STOCK.F_ADDR,
		|	dbo_T_KATPODR_STOCK.F_TEL,
		|	dbo_T_KATPODR_STOCK.F_SKLAD,
		|	dbo_T_KATPODR_STOCK.F_VOLUME,
		|	dbo_T_KATPODR_STOCK.F_CRESHR,
		|	dbo_T_KATPODR_STOCK.F_CGRPODR,
		|	dbo_T_KATPODR_STOCK.F_SKPRIOR,
		|	dbo_T_KATPODR_STOCK.F_INTERN,
		|	dbo_T_KATPODR_STOCK.F_CFUNC,
		|	dbo_T_KATPODR_STOCK.F_SMEN,
		|	dbo_T_KATPODR_STOCK.F_PRSKLAD,
		|	dbo_T_KATPODR_STOCK.F_TYPEUCH,
		|	dbo_T_KATPODR_STOCK.F_CORG,
		|	dbo_T_KATPODR_STOCK.Таблица,
		|	dbo_T_KATPODR_STOCK.F_ISARCH
		|ИЗ
		|	(ВЫБРАТЬ
		|		dbo_T_KATPODR_STOCK.F_NREC КАК F_NREC,
		|		dbo_T_KATPODR_STOCK.F_ATL_LASTDATE КАК F_ATL_LASTDATE,
		|		dbo_T_KATPODR_STOCK.F_ATL_LASTTIME КАК F_ATL_LASTTIME,
		|		dbo_T_KATPODR_STOCK.F_FILIALNO КАК F_FILIALNO,
		|		dbo_T_KATPODR_STOCK.F_CODE КАК F_CODE,
		|		dbo_T_KATPODR_STOCK.F_CPODR КАК F_CPODR,
		|		dbo_T_KATPODR_STOCK.F_ISLEAF КАК F_ISLEAF,
		|		dbo_T_KATPODR_STOCK.F_NAME КАК F_NAME,
		|		dbo_T_KATPODR_STOCK.F_KOD КАК F_KOD,
		|		dbo_T_KATPODR_STOCK.F_FIO КАК F_FIO,
		|		dbo_T_KATPODR_STOCK.F_CUSER КАК F_CUSER,
		|		dbo_T_KATPODR_STOCK.F_ADDR КАК F_ADDR,
		|		dbo_T_KATPODR_STOCK.F_TEL КАК F_TEL,
		|		dbo_T_KATPODR_STOCK.F_SKLAD КАК F_SKLAD,
		|		dbo_T_KATPODR_STOCK.F_VOLUME КАК F_VOLUME,
		|		dbo_T_KATPODR_STOCK.F_CRESHR КАК F_CRESHR,
		|		dbo_T_KATPODR_STOCK.F_CGRPODR КАК F_CGRPODR,
		|		dbo_T_KATPODR_STOCK.F_SKPRIOR КАК F_SKPRIOR,
		|		dbo_T_KATPODR_STOCK.F_INTERN КАК F_INTERN,
		|		dbo_T_KATPODR_STOCK.F_CFUNC КАК F_CFUNC,
		|		dbo_T_KATPODR_STOCK.F_SMEN КАК F_SMEN,
		|		dbo_T_KATPODR_STOCK.F_PRSKLAD КАК F_PRSKLAD,
		|		dbo_T_KATPODR_STOCK.F_TYPEUCH КАК F_TYPEUCH,
		|		dbo_T_KATPODR_STOCK.F_CORG КАК F_CORG,
		|		""dbo_T_KATPODR_STOCK"" КАК Таблица,
		|		dbo_T_KATPODR_STOCK.F_ISARCH КАК F_ISARCH
		|	ИЗ
		|		ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KATPODR КАК dbo_T_KATPODR_STOCK
		|	ГДЕ
		|		dbo_T_KATPODR_STOCK.F_SKLAD = 1) КАК dbo_T_KATPODR_STOCK";
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
	Если ВариантПолучения="dbo_T_KATPODR_SUBDIVISION" Или ВариантПолучения=Неопределено Тогда 
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	BD_TO_NVARCHAR(dbo_T_KATPODR_SUBDIVISION.F_NREC) КАК F_NREC,
		|	dbo_T_KATPODR_SUBDIVISION.F_ATL_LASTDATE КАК F_ATL_LASTDATE,
		|	dbo_T_KATPODR_SUBDIVISION.F_ATL_LASTTIME КАК F_ATL_LASTTIME,
		|	dbo_T_KATPODR_SUBDIVISION.F_FILIALNO КАК F_FILIALNO,
		|	dbo_T_KATPODR_SUBDIVISION.F_CODE КАК F_CODE,
		|	BD_TO_NVARCHAR(dbo_T_KATPODR_SUBDIVISION.F_CPODR) КАК F_CPODR,
		|	dbo_T_KATPODR_SUBDIVISION.F_ISLEAF КАК F_ISLEAF,
		|	dbo_T_KATPODR_SUBDIVISION.F_NAME КАК F_NAME,
		|	dbo_T_KATPODR_SUBDIVISION.F_KOD КАК F_KOD,
		|	dbo_T_KATPODR_SUBDIVISION.F_FIO КАК F_FIO,
		|	dbo_T_KATPODR_SUBDIVISION.F_CUSER КАК F_CUSER,
		|	dbo_T_KATPODR_SUBDIVISION.F_ADDR КАК F_ADDR,
		|	dbo_T_KATPODR_SUBDIVISION.F_TEL КАК F_TEL,
		|	dbo_T_KATPODR_SUBDIVISION.F_SKLAD КАК F_SKLAD,
		|	dbo_T_KATPODR_SUBDIVISION.F_VOLUME КАК F_VOLUME,
		|	dbo_T_KATPODR_SUBDIVISION.F_CRESHR КАК F_CRESHR,
		|	dbo_T_KATPODR_SUBDIVISION.F_CGRPODR КАК F_CGRPODR,
		|	dbo_T_KATPODR_SUBDIVISION.F_SKPRIOR КАК F_SKPRIOR,
		|	dbo_T_KATPODR_SUBDIVISION.F_INTERN КАК F_INTERN,
		|	dbo_T_KATPODR_SUBDIVISION.F_CFUNC КАК F_CFUNC,
		|	dbo_T_KATPODR_SUBDIVISION.F_SMEN КАК F_SMEN,
		|	dbo_T_KATPODR_SUBDIVISION.F_PRSKLAD КАК F_PRSKLAD,
		|	dbo_T_KATPODR_SUBDIVISION.F_TYPEUCH КАК F_TYPEUCH,
		|	dbo_T_KATPODR_SUBDIVISION.F_CORG КАК F_CORG,
		|	""dbo_T_KATPODR_SUBDIVISION"" КАК Таблица,
		|	dbo_T_KATPODR_SUBDIVISION.F_ISARCH КАК F_ISARCH
		|ИЗ
		|	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KATPODR КАК dbo_T_KATPODR_SUBDIVISION";
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;

КонецПроцедуры

Функция ЗаданиеПоТаблице(ИмяТаблицы, НаборПараметров) Экспорт
	
	Задание = Неопределено;
	          
	Если ИмяТаблицы = "dbo_T_KATPODR" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаПокупкиПродажи.ВыполнитьСозданиеСтруктурыОрганизации", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_KATPODR_SUBDIVISION" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаПокупкиПродажи.ВыполнитьСозданиеПодразделенияИзструктурыПредприятия", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_KATPODR_STOCK" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаПокупкиПродажи.ВыполнитьСозданиеСкладовИзПодразделения", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_KATMC" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаПокупкиПродажи.ВыполнитьСозданиеНоменклатуры", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_DOGOVOR" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаПокупкиПродажи.ВыполнитьСозданиеДоговоров", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_STZATR" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаПокупкиПродажи.ВыполнитьСозданиеСтатейРасходов", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_KATBANK" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаПокупкиПродажи.ВыполнитьСозданиеБанковскихСчетов", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_KATORG" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаПокупкиПродажи.ВыполнитьСозданиеКонтрагентов", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_HOZOPER" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаПокупкиПродажи.ВыполнитьСозданиеСтатейРасходовИзТХО", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_KATSOPR" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаПокупкиПродажи.ВыполнитьСозданиеНакладных", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_KATUSL" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаПокупкиПродажи.ВыполнитьСозданиеУслуг", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_SKLORDER" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаПокупкиПродажи.ВыполнитьСозданиеОрдеровНаТовары", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_PERSONS_KONTR" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаПокупкиПродажи.ВыполнитьСозданиеКонтрагентовИзСотрудников", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_MBPMOVE" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаПокупкиПродажи.ВыполнитьСозданиеДокументовПоСпецОстнастке", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_SCHFACT" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаПокупкиПродажи.ВыполнитьСозданиеСчетФактур", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_BOOKPRZK" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаПокупкиПродажи.ВыполнитьСозданиеДокументовКнигиПокупокПродаж", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_GROUPMC" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаПокупкиПродажи.ВыполнитьСозданиеГруппАналитическогоУчета", НаборПараметров);
	КонецЕсли;
	
	Возврат Задание;
	
КонецФункции

#КонецОбласти