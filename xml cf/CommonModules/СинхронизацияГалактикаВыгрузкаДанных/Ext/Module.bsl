#Область ПрограммныйИнтерфейс

Процедура ВыполнитьВыгрузкуДанных() Экспорт
	
	СтруктураПараметров = ПолучитьПараметры();
	
	//Данные по изменениям БУ
	//ВариантВыгрузки = 1
	ФильтрИзменений = Новый Массив;
	ФильтрИзменений.Добавить(Метаданные.РегистрыБухгалтерии.Хозрасчетный.ПолноеИмя());
	
	СтруктураПараметров.ФильтрИзменений = ФильтрИзменений; 	
	СтруктураПараметров.ВариантВыгрузки = 1;
	ВыполнитьВыгрузкуДанныхБУ(СтруктураПараметров);
	
КонецПроцедуры

Функция ПолучитьПараметры()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ИмяПланаОбмена", 		"СинхронизацияГалактика");
	
	ВсеУзлыПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьМассивУзловПланаОбмена(СтруктураПараметров.ИмяПланаОбмена);
	
	СтруктураПараметров.Вставить("ВсеУзлыПланаОбмена", 	ВсеУзлыПланаОбмена);
	СтруктураПараметров.Вставить("ФильтрИзменений", 	Неопределено);
	СтруктураПараметров.Вставить("ВариантВыгрузки", 	Неопределено);
	СтруктураПараметров.Вставить("ЭтоВставкаМассивом", 	Ложь);
	
	Возврат СтруктураПараметров;    
	
КонецФункции

#КонецОбласти

#Область Итерация1

Функция ПолучитьМассивИсключаемыхТипов()
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый ОписаниеТипов("МоментВремени"));
	
	Возврат Массив;
	
КонецФункции

Функция СтруктураПолейРБНЗХ()
	
	МассивИсключаемыхТипов = ПолучитьМассивИсключаемыхТипов();
	
	МассивПолей = Новый Массив;
	
	ПустойНаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	
	СтруктураПолей = ПустойНаборЗаписей.Выгрузить();
	
	Для Каждого ТекКолонка Из СтруктураПолей.Колонки Цикл
		
		ТекТип = ТипЗнч(ТекКолонка.ТипЗначения);
		Если МассивИсключаемыхТипов.Найти(ТекКолонка.ТипЗначения) = Неопределено Тогда 
			МассивПолей.Добавить(ТекКолонка.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивПолей;
	
КонецФункции

Функция ВыбираемыеПоля(Тип)
	
	Если Тип = Тип("РегистрБухгалтерииНаборЗаписей.Хозрасчетный") Тогда
		
		Возврат СтруктураПолейРБНЗХ();
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСхемуЗапросаОбъединенияДанных(СоответсвиеИсточников)
	
	ВременныеТаблицы = Новый Массив;
	
	Префикс = "&";
	
	Для Каждого Источник Из СоответсвиеИсточников Цикл
		
		ИмяТаблицы = Источник.Ключ;
		Значение = Источник.Значение;
		
		Если ТипЗнч(Значение) = Тип("РегистрБухгалтерииНаборЗаписей.Хозрасчетный") Тогда 
			
			СхемаЗапроса = Новый СхемаЗапроса;
			
			Пакет = СхемаЗапроса.ПакетЗапросов[0];
			Пакет.ТаблицаДляПомещения = ИмяТаблицы;
			
			ПоляВыборки = Пакет.Операторы[0];
			ПоляВыборки.Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"), Префикс + ИмяТаблицы);
			
			ДоступныеПоля = ПоляВыборки.Источники[0].Источник.ДоступныеПоля;
			
			ВыбираемыеПоля = ВыбираемыеПоля(Тип("РегистрБухгалтерииНаборЗаписей.Хозрасчетный"));
			Для Каждого ТекПоле Из ВыбираемыеПоля Цикл
				
				ДоступныеПоля.Добавить(ТекПоле);
				
				ПоляВыборки.ВыбираемыеПоля.Добавить(ДоступныеПоля.Найти(ТекПоле));
				
			КонецЦикла;
			
			ВременныеТаблицы.Добавить(СхемаЗапроса.ПолучитьТекстЗапроса());
			
		КонецЕсли;
		
	КонецЦикла;
	
	РазделительЗапросов = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////" + Символы.ПС;
	
	ТекстЗапросаВременныхТаблиц = СтрСоединить(ВременныеТаблицы, РазделительЗапросов);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаВременныхТаблиц);
	
	Объединение = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	
	ГруппаВременныхТаблиц = Объединение.ДоступныеТаблицы.Найти("Временные таблицы");
	
	СоставИсточников = ГруппаВременныхТаблиц.Состав;
	
	Для Сч=0 По СоставИсточников.Количество()-1 Цикл
		
		Если Сч>0 Тогда 
			Объединение.Операторы.Добавить();
		КонецЕсли;
		
		Оператор = Объединение.Операторы[Сч];
		
		Оператор.ТипОбъединения = ТипОбъединенияСхемыЗапроса.ОбъединитьВсе;
		
		Источник = СоставИсточников[Сч];
		
		Оператор.Источники.Добавить(Источник);
		
		Для Каждого ТекПолеСтроки Из Источник.Поля Цикл 		
			
			Оператор.ВыбираемыеПоля.Добавить(ТекПолеСтроки);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СхемаЗапроса; 
	
КонецФункции

#КонецОбласти

#Область МетодыРаботыСДаннымиНаУзлахПланаОбмена

Функция ПолучитьСоответствиеИсточников(МассивИзменений)
	
	СоответсвиеИсточников = Новый Соответствие;
	
	ШаблонПрефиксаТаблиц = "Источник%1_";
	НомерЗапроса = 0;
	
	Для Каждого ТекСтрока Из МассивИзменений Цикл
		
		ИмяТаблицы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПрефиксаТаблиц, НомерЗапроса);
		
		СоответсвиеИсточников.Вставить(ИмяТаблицы, ТекСтрока);
		
		НомерЗапроса = НомерЗапроса + 1;
		
	КонецЦикла;
	
	Возврат СоответсвиеИсточников;
	
КонецФункции

Процедура УдалитьРегистрациюПоУзлу(УзелОбмена, ФильтрИзменений) Экспорт
	
	Для Каждого Фильтр ИЗ ФильтрИзменений Цикл
		
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Фильтр);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьВыгрузкуДанныхБУ(СтруктураПараметров) Экспорт
	
	Для Каждого УзелОбмена Из СтруктураПараметров.ВсеУзлыПланаОбмена Цикл
		
		ПараметрыВыгрузки = Новый Массив;
		
		ПараметрыВыгрузки.Добавить(УзелОбмена);
		ПараметрыВыгрузки.Добавить(СтруктураПараметров);
		
		ФоновыеЗадания.Выполнить("СинхронизацияГалактикаВыгрузкаДанных.ОбработатьИзмененияПоУзлу", ПараметрыВыгрузки);
		
	КонецЦикла;
	
КонецПроцедуры

Функция МассивИзменений(УзелОбмена, ФильтрИзменений)
	
	НомерСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелОбмена, "НомерОтправленного") + 1;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивИзменений = Новый Массив;
	Для Каждого Фильтр ИЗ ФильтрИзменений Цикл
		
		МетаФильтр = Метаданные.НайтиПоПолномуИмени(Фильтр);
		
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбмена, НомерСообщения, МетаФильтр);
		Пока ВыборкаИзменений.Следующий() Цикл
			МассивИзменений.Добавить(ВыборкаИзменений.Получить());
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивИзменений;
	
КонецФункции

#КонецОбласти

#Область МетодыРаботыСБД

Процедура ЗапуститьОперациюВставки(ДанныеВставки, ЭтоВставкаМассивом = Ложь, МассивЗаданий)
	
	Если ДанныеВставки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыВставки = Новый Массив;
	
	ПараметрыВставки.Добавить(ДанныеВставки);
	
	Если ЭтоВставкаМассивом Тогда 
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаВыгрузкаДанных.ВставитьЗаписиМассивом", 	ПараметрыВставки);
	Иначе
		
		//возможно с багом, пока не используется, нужно выяснить
		//Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаВыгрузкаДанных.ВставитьЗапись", 			ПараметрыВставки);
		//замена пока на 
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаВыгрузкаДанных.ВставитьЗаписиМассивом", 	ПараметрыВставки);
		
	КонецЕсли;
	
	Если Задание = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	МассивЗаданий.Добавить(Задание);
	
КонецПроцедуры

//Вставка записи ПОКА НЕ ИСПОЛЬЗУЕТСЯ!!! 
//ОПИСАНИЕ:
//
//insert v$oborot(f$tidk, f$tidkgal, f$cplanssch, f$scheto, f$subossch, f$tblos#1#, f$tblos#2#, f$tblos#3#,
//f$tblos#4#, f$tblos#5#, f$tblos#6#, f$kauos#1#, f$kauos#2#, f$kauos#3#, f$kauos#4#, f$kauos#5#, f$kauos#6#,
//f$kodspo, f$schetk, f$subschk, f$tblks#1#, f$tblks#2#, f$tblks#3#, f$tblks#4#, f$tblks#5#, f$tblks#6#,
//f$kauks#1#, f$kauks#2#, f$kauks#3#, f$kauks#4#, f$kauks#5#, f$kauks#6#, f$kodspk, f$datob, f$nodok, f$sumob,
//f$sumvalut, f$kodvalut, f$kol, f$ced, f$sodpr, f$vhprop, f$dbscheto, f$krschetk)

Процедура ВставитьЗапись(СтруктураВставки) Экспорт 
	
	ВнешниеИсточникиДанных.ГалактикаБД.INSERT_RECORD
	
	(
	
	СтруктураВставки.Параметр1, 	СтруктураВставки.Параметр2,		СтруктураВставки.Параметр3, 	СтруктураВставки.Параметр4, 	
	СтруктураВставки.Параметр5, 	СтруктураВставки.Параметр6, 	СтруктураВставки.Параметр7, 	СтруктураВставки.Параметр8, 	
	СтруктураВставки.Параметр9, 	СтруктураВставки.Параметр10, 	СтруктураВставки.Параметр11, 	СтруктураВставки.Параметр12, 	
	СтруктураВставки.Параметр13, 	СтруктураВставки.Параметр14, 	СтруктураВставки.Параметр15, 	СтруктураВставки.Параметр16, 	
	СтруктураВставки.Параметр17,    СтруктураВставки.Параметр18,	СтруктураВставки.Параметр19, 	СтруктураВставки.Параметр20, 	
	СтруктураВставки.Параметр21, 	СтруктураВставки.Параметр22,   	СтруктураВставки.Параметр23, 	СтруктураВставки.Параметр24, 
	СтруктураВставки.Параметр25, 	СтруктураВставки.Параметр26,    СтруктураВставки.Параметр27, 	СтруктураВставки.Параметр28, 
	СтруктураВставки.Параметр29, 	СтруктураВставки.Параметр30, 	СтруктураВставки.Параметр31, 	СтруктураВставки.Параметр32, 	
	СтруктураВставки.Параметр33, 	СтруктураВставки.Параметр34,    СтруктураВставки.Параметр35,   	СтруктураВставки.Параметр36,	
	СтруктураВставки.Параметр37, 	СтруктураВставки.Параметр38, 	СтруктураВставки.Параметр39, 	СтруктураВставки.Параметр40, 	
	СтруктураВставки.Параметр41, 	СтруктураВставки.Параметр42,    СтруктураВставки.Параметр43, 	СтруктураВставки.Параметр44
	
	,
	
	СтруктураВставки.ИмяТаблицы
	
	);
	
КонецПроцедуры

//Вставка записей массивом значений
//ОПИСАНИЕ:
//insert 
//v$oborot
//(
//f$tidk, f$tidkgal, f$cplanssch, f$scheto, f$subossch, f$tblos#1#, f$tblos#2#, f$tblos#3#,
//f$tblos#4#, f$tblos#5#, f$tblos#6#, f$kauos#1#, f$kauos#2#, f$kauos#3#, f$kauos#4#, f$kauos#5#, f$kauos#6#,
//f$kodspo, f$schetk, f$subschk, f$tblks#1#, f$tblks#2#, f$tblks#3#, f$tblks#4#, f$tblks#5#, f$tblks#6#,
//f$kauks#1#, f$kauks#2#, f$kauks#3#, f$kauks#4#, f$kauks#5#, f$kauks#6#, f$kodspk, f$datob, f$nodok, f$sumob,
//f$sumvalut, f$kodvalut, f$kol, f$ced, f$sodpr, f$vhprop, f$dbscheto, f$krschetk	
//)
//
//VALUES 
//
//(	
//&1, 	&2, 	&3, 	&4, 	&5, 	&6, 	&7,  	&8,
//&9, 	&10, 	&11, 	&12, 	&13, 	&14, 	&15, 	&16, &17,
//&18,	&19, 	&20, 	&21, 	&22, 	&23, 	&24, 	&25, &26,
//&27, 	&28, 	&29, 	&30, 	&31, 	&32, 	&33, 	&34, &35, 
//&36,	&37, 	&38, 	&39, 	&40, 	&41, 	&42, 	&43, &44
//)

Процедура ВставитьЗаписиМассивом(СтруктураВставки) Экспорт 
	
	ВнешниеИсточникиДанных.ГалактикаБД.INSERT_RECORDS
	
	(
	
	СтруктураВставки.Параметр1, 	СтруктураВставки.Параметр2,		СтруктураВставки.Параметр3, 	СтруктураВставки.Параметр4, 	
	СтруктураВставки.Параметр5, 	СтруктураВставки.Параметр6, 	СтруктураВставки.Параметр7, 	СтруктураВставки.Параметр8, 	
	СтруктураВставки.Параметр9, 	СтруктураВставки.Параметр10, 	СтруктураВставки.Параметр11, 	СтруктураВставки.Параметр12, 	
	СтруктураВставки.Параметр13, 	СтруктураВставки.Параметр14, 	СтруктураВставки.Параметр15, 	СтруктураВставки.Параметр16, 	
	СтруктураВставки.Параметр17,    СтруктураВставки.Параметр18,	СтруктураВставки.Параметр19, 	СтруктураВставки.Параметр20, 	
	СтруктураВставки.Параметр21, 	СтруктураВставки.Параметр22,   	СтруктураВставки.Параметр23, 	СтруктураВставки.Параметр24, 
	СтруктураВставки.Параметр25, 	СтруктураВставки.Параметр26,    СтруктураВставки.Параметр27, 	СтруктураВставки.Параметр28, 
	СтруктураВставки.Параметр29, 	СтруктураВставки.Параметр30, 	СтруктураВставки.Параметр31, 	СтруктураВставки.Параметр32, 	
	СтруктураВставки.Параметр33, 	СтруктураВставки.Параметр34,    СтруктураВставки.Параметр35,   	СтруктураВставки.Параметр36,	
	СтруктураВставки.Параметр37, 	СтруктураВставки.Параметр38, 	СтруктураВставки.Параметр39, 	СтруктураВставки.Параметр40, 	
	СтруктураВставки.Параметр41, 	СтруктураВставки.Параметр42,    СтруктураВставки.Параметр43, 	СтруктураВставки.Параметр44
	
	,
	
	СтруктураВставки.ИмяТаблицы
	
	);
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеМетодыКонвертации

Процедура ОбработатьИзмененияПоУзлу(УзелОбмена, СтруктураПараметров) Экспорт
	
	ЭтоВставкаМассивом =СтруктураПараметров.ЭтоВставкаМассивом;
	
	ЕстьОшибкиСинхронизации = Ложь;
	
	Если СтруктураПараметров.ФильтрИзменений = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	МассивИзменений = МассивИзменений(УзелОбмена, СтруктураПараметров.ФильтрИзменений);
	
	СоответсвиеИсточников = ПолучитьСоответствиеИсточников(МассивИзменений);
	
	ДанныеВставки = ПолучитьДанныеДляВставки(СоответсвиеИсточников, ЭтоВставкаМассивом, СтруктураПараметров);
	
	Возврат;
	
	МассивЗаданий = Новый Массив;
	
	Если ЭтоВставкаМассивом Тогда 
		
		ЗапуститьОперациюВставки(ДанныеВставки, ЭтоВставкаМассивом, МассивЗаданий);
		
	Иначе
		
		ДинамВыборка = ДанныеВставки.Выбрать();
		
		Пока ДинамВыборка.Следующий() Цикл
			
			//Для Каждого ТекСтрокаДанныхДляВставки Из ДанныеВставки Цикл
			
			ЗапуститьОперациюВставки(ДинамВыборка, ЭтоВставкаМассивом, МассивЗаданий);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивЗаданий.Количество() > 0 Тогда
		
		Попытка
			
			ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
			
		Исключение
			
			ЕстьОшибкиСинхронизации = Истина;
			
			ТекстОшибки = ОписаниеОшибки();
			
			СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки);
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если ЕстьОшибкиСинхронизации Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыУдаленияРегистрации = Новый Массив;
	
	ПараметрыУдаленияРегистрации.Добавить(УзелОбмена);
	ПараметрыУдаленияРегистрации.Добавить(СтруктураПараметров.ФильтрИзменений);
	
	ФоновыеЗадания.Выполнить("СинхронизацияГалактикаВыгрузкаДанных.УдалитьРегистрациюПоУзлу", ПараметрыУдаленияРегистрации);
	
КонецПроцедуры

Функция ПолучитьДанныеДляВставки(СоответсвиеИсточников, ЭтоВставкаМассивом, СтруктураПараметров)	
	
	//Итерация 1 
	//объединение источников (изменений на узлах) по схеме запроса
	//схема запроса может содержать может мофицирироваться (юнионы, селекты, отборы, джойны и пр.)
	
	СхемаЗапроса = ПолучитьСхемуЗапросаОбъединенияДанных(СоответсвиеИсточников);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Для Каждого ТекСтрока Из СоответсвиеИсточников Цикл
		
		ТаблицаПараметра = ТекСтрока.Значение.Выгрузить(); 
		
		Запрос.УстановитьПараметр(ТекСтрока.Ключ, ТаблицаПараметра);
		
	КонецЦикла;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	//Итерация 1а 
	//дополнительные действия
	
	
	//пока пропущено
	
	
	//Итерация 2
	//приведение результата шага 1 к общему виду для вставки 
	//шаблоном является общие макеты например: оборотов, или другой таблицы для вставки
	//на этом этапе происходит приведение полей, типов к результирующей таблице
	
	СхемаШаблонаПриведения = Новый СхемаЗапроса;
	
	СхемаШаблонаПриведения.УстановитьТекстЗапроса(ПолучитьОбщийМакет("СинхронизацияГалактикаШаблонРегистраБухгалтерии"));
	
	ТаблицаПараметровПриведения = ПолучитьОбщийМакет("СинхронизацияГалактикаСтруктураПолейРегистраБухгалтерии");
	
	
	
	//Итерация 3
	//формирование приведенного результата Шага 2 к данным для вставки 
	//тип выходной - таблица значений, структура (взаивисимости от флага)
	//На этом этапе должны быть анонимные колонки 
	//Параметр1, Параметр2 ...
	//анонимные колонки являются имененем параметра для вставки 
	
	//результирующий РезультатЗапроса
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеВставки = РезультатЗапроса;
	
	Если ЭтоВставкаМассивом Тогда
		
		ДанныеВставки = Новый Структура;
		
		ЗаполнитьСтруктуруДляВставкиМассивом(ДанныеВставки, РезультатЗапроса);
		
	КонецЕсли;
	
	Возврат ДанныеВставки;
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьСтруктуруДляВставкиМассивом(ДанныеВставки, РезультатЗапроса = Неопределено)
	
	Если РезультатЗапроса = Неопределено Тогда 
		
		ДанныеВставки = Неопределено;
		Возврат;
		
	Конецесли;
	
	ВыгрузкаДанных = РезультатЗапроса.Выгрузить();
	
	Для Каждого ТекКолонка Из ВыгрузкаДанных Цикл
		
		ДанныеВставки.Вставить(ТекКолонка.Имя, ВыгрузкаДанных.ВыгрузитьКолонку(ТекКолонка.Имя));
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЗначениеГалактика(Значение1С)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Соответствие1СГалактикаСрезПоследних.ИмяТаблицы,
		|	Соответствие1СГалактикаСрезПоследних.F_NREC
		|ИЗ
		|	РегистрСведений.Соответствие1СГалактика.СрезПоследних(, Значение1С = &Значение1С) КАК Соответствие1СГалактикаСрезПоследних";
	
	Запрос.УстановитьПараметр("Значение1С", Значение1С);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ДвоичныеДанные(ВыборкаДетальныеЗаписи.F_NREC);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Значение1С.F_NREC) Тогда 
		
		Возврат ДвоичныеДанные(Значение1С.F_NREC);
		
	КонецЕсли;
	
	Возврат ДвоичныеДанные();
	
КонецФункции

#Область ОбщиеМетоды

Функция ПолучитьУникальныйИдентификаторПриемника(ДанныеВставки)
	
	Если Не ДанныеВставки.ЛинейныйПоискСоответствия Тогда 
		
		УникальныйИдентификаторПриемника = Неопределено;
		
		//получаем нрек записи в галактика по ид1с, по другим реквизитам
		ОшибкаПоиска = ВыполнитьПоискПоАтрибутамГалактика(ДанныеВставки, УникальныйИдентификаторПриемника);
		Если ОшибкаПоиска Тогда 
			
			//в галактика нет атрибутов с таким ид1с и видом документа,
			//в соответвии объектов информационных баз его тоже быть не должно
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
	|ГДЕ
	|	СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы = &УзелИнформационнойБазы
	|	И СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника = &УникальныйИдентификаторИсточника";
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("УзелИнформационнойБазы",           ДанныеВставки.УзелДляОбмена);
	Запрос.УстановитьПараметр("УникальныйИдентификаторИсточника", ДанныеВставки.Ссылка);
	Запрос.Текст = ТекстЗапроса;
	
	//дополнительное условие по ид приемника
	//сам запрос проверяет наличие записи по условиям
	Если Не ДанныеВставки.ЛинейныйПоискСоответствия Тогда
		
		Запрос.Текст = Запрос.Текст+Символы.ПС+"И СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника = &УникальныйИдентификаторПриемника ";
		
		Запрос.УстановитьПараметр("УникальныйИдентификаторПриемника", УникальныйИдентификаторПриемника);
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		
		Если Не ДанныеВставки.ЛинейныйПоискСоответствия Тогда 
			
			//ситуация когда атрибуты в галактика есть
			//в 1с нет соответсвия
			//очищаем спецификацию накладной
			
			ВнешниеИсточникиДанных.ГалактикаБД.__DELETE_RECORD_SPSOPR(ДвоичныеДанные(УникальныйИдентификаторПриемника));
			ВнешниеИсточникиДанных.ГалактикаБД.__DELETE_RECORD_NrecATTRVAL(ДвоичныеДанные(УникальныйИдентификаторПриемника));
			
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Строка = Запрос.Выполнить().Выгрузить();
	
	Возврат Строка[0].УникальныйИдентификаторПриемника;
	
КонецФункции

Функция ВыполнитьПоискПоАтрибутамГалактика(СтруктураВставки, УникальныйИдентификаторПриемника)
	
	ОшибкаПоиска = Ложь;
	
	ФункцияПоиска = СтруктураВставки.ФункцияПоиска;
	Если ФункцияПоиска="_NrecATTRVAL" Тогда 
		
		УникальныйИдентификаторПриемника = ВнешниеИсточникиДанных.ГалактикаБД._NrecATTRVAL(СтруктураВставки._atr, СтруктураВставки.id1C);
		
	ИначеЕсли ФункцияПоиска="_NrecATTRVAL_KATSOPR" Тогда 
		
		УникальныйИдентификаторПриемника = ВнешниеИсточникиДанных.ГалактикаБД._NrecATTRVAL_KATSOPR(СтруктураВставки._atr, СтруктураВставки.id1C, СтруктураВставки.vidsopr);
		
	ИначеЕсли ФункцияПоиска="_NrecATTRVAL_SCHFACT" Тогда 
		
		УникальныйИдентификаторПриемника = ВнешниеИсточникиДанных.ГалактикаБД._NrecATTRVAL_SCHFACT(СтруктураВставки._atr, СтруктураВставки.id1C, СтруктураВставки.Накладная);
		
	КонецЕсли;
	
	ОшибкаПоиска = (УникальныйИдентификаторПриемника="0x8000000000000000") Или (Не ЗначениеЗаполнено(УникальныйИдентификаторПриемника)); 
	
	Возврат ОшибкаПоиска;
	
КонецФункции

Процедура ЗавершитьЗапись(СтруктураВставки, Обновлять = Ложь) Экспорт
	
	УникальныйИдентификаторПриемника = Неопределено;
	
	ОшибкаПоиска = ВыполнитьПоискПоАтрибутамГалактика(СтруктураВставки, УникальныйИдентификаторПриемника); 
	
	Если ОшибкаПоиска Тогда 
		
		Стек = "ПУСТАЯ ССЫЛКА В ГАЛАТИКА ИД 1С: "+Строка(СтруктураВставки.id1C);
		
		СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке("ОШИБКА ВСТАВКИ ", Стек);
		
		Возврат;
		
	КонецЕсли;

	Если Обновлять Тогда 
		
		Набор = РегистрыСведений.СоответствияОбъектовИнформационныхБаз.СоздатьНаборЗаписей();
		
		Набор.Отбор.УникальныйИдентификаторПриемника.Установить(УникальныйИдентификаторПриемника);
		
		Набор.Записать();
		
	КонецЕсли;

	Если Не СтруктураВставки.ОбъектЕстьВРегистре или Обновлять Тогда 
		
		СтруктураЗаписи = Новый Структура;
		
		СтруктураЗаписи.Вставить("УзелИнформационнойБазы", СтруктураВставки.УзелДляОбмена);
		СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", СтруктураВставки.Ссылка);
		СтруктураЗаписи.Вставить("УникальныйИдентификаторПриемника", УникальныйИдентификаторПриемника);
		СтруктураЗаписи.Вставить("ТипИсточника", Строка(ТипЗнч(СтруктураВставки.Ссылка)));
		СтруктураЗаписи.Вставить("ТипПриемника", СтруктураВставки.ТипПриемника);
		СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточникаСтрокой", СтруктураВставки.id1C);
		СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Ложь);
		
		РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи);
		
		СтруктураВставки.Вставить("УникальныйИдентификаторПриемника", УникальныйИдентификаторПриемника);
		
	КонецЕсли;
	
	МассивДокументов = Новый Массив;
	
	МассивДокументов.Добавить(СтруктураВставки.Ссылка);
	
	ПараметрыУдаленияРегистрации = Новый Массив;
	
	ПараметрыУдаленияРегистрации.Добавить(СтруктураВставки.УзелДляОбмена);
	ПараметрыУдаленияРегистрации.Добавить(МассивДокументов);
	
	ФоновыеЗадания.Выполнить("СинхронизацияГалактикаВыгрузкаДанных.УдалитьРегистрациюПоУзлу", ПараметрыУдаленияРегистрации);
	
КонецПроцедуры

Функция ПолучитьДанныеВставкиПоТипу(ТекСтрока, УзелДляОбмена, Параметры = Неопределено, ВыгружатьКакБухСправка = Ложь)
	
	ДанныеВставки = Неопределено;
	
	ТекТипЗнч = ТипЗнч(ТекСтрока); 
	
	Если ВыгружатьКакБухСправка Тогда 
		
		ОписаниеВставкиБухСправка(ДанныеВставки, ТекСтрока, Параметры);

	Иначе
				
		Если ТекТипЗнч = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") или
			ТекТипЗнч = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств") Тогда 
			
			ОписаниеВставкиПоступлениеБезналичныхДенежныхСредств(ДанныеВставки, ТекСтрока);
			
		ИначеЕсли ТекТипЗнч = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") или
			ТекТипЗнч = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда 
			
			ОписаниеВставкиСписаниеБезналичныхДенежныхСредств(ДанныеВставки, ТекСтрока);
			
		ИначеЕсли ТекТипЗнч = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") или 
			ТекТипЗнч = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда 
			
			ОписаниеВставкиПоступлениеТоваровУслуг(ДанныеВставки, ТекСтрока, Параметры);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ДанныеВставки=Неопределено Тогда 
		
		ДанныеВставки.Вставить("id1C", Строка(ТекСтрока.Ссылка.УникальныйИдентификатор()));
		ДанныеВставки.Вставить("Ссылка", ТекСтрока.Ссылка);
		ДанныеВставки.Вставить("УзелДляОбмена", УзелДляОбмена);
		
		ОбъектЕстьВРегистре(ДанныеВставки);
		
	КонецЕсли;
	
	Возврат ДанныеВставки;
	
КонецФункции

Процедура ОбъектЕстьВРегистре(ДанныеВставки)
	
	ОбъектЕстьВРегистре = РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(ДанныеВставки.Ссылка, ДанныеВставки.УзелДляОбмена);
	
	ДанныеВставки.Вставить("ОбъектЕстьВРегистре", ОбъектЕстьВРегистре);
	
	Если ОбъектЕстьВРегистре Тогда 
		
		УникальныйИдентификаторПриемника = ПолучитьУникальныйИдентификаторПриемника(ДанныеВставки);
		
		Если УникальныйИдентификаторПриемника=Неопределено Тогда 
			
			ДанныеВставки.Вставить("ОбъектЕстьВРегистре", Ложь);
			
		Иначе
			
			ДанныеВставки.Вставить("УникальныйИдентификаторПриемника", УникальныйИдентификаторПриемника);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДвоичныеДанные(Данные = Неопределено, Префикс = "0x", Формат = "@@@@@@@@@@@@@@@@", СимволПоУмолчанию = "0") Экспорт
	
	ОписаниеДанных = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "hexBinary"); 
	
	ДвоичныеДанные = ФабрикаXDTO.Создать(ОписаниеДанных, "0000000000000000");
	
	ДвоичныеДанныеНеопределено = ДвоичныеДанные.Значение;
	
	ДвоичныеДанныеСтрокой = "0000000000000000";
	
	Если ЗначениеЗаполнено(Данные) Тогда 
		
		Если Не ТипЗнч(Данные)=Тип("Строка") Тогда
			
			Возврат ДвоичныеДанныеНеопределено;
			
		КонецЕсли;
		
		ДвоичныеДанныеСтрокой = СокрЛП(Данные);
		
		//"0x8000000000000000"
		
		ДвоичныеДанныеСтрокой = СтрЗаменить(ДвоичныеДанныеСтрокой, " ", "");
		
		Если Префикс="0x" Тогда 
			
			Если Лев(ДвоичныеДанныеСтрокой, 2)="0x" Тогда 
				
				ДвоичныеДанныеСтрокой = Сред(ДвоичныеДанныеСтрокой, 3);
				
			КонецЕсли;
			
		КонецЕсли;
		
		//"8000000000000000"
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Формат) Тогда 
		
		ВыходнаяСтрока = "";
		
		Для Позиция = 1 По СтрДлина(Формат) Цикл
			
			Символ = Сред(Формат, Позиция, 1);
			
			//Значение из входной строки
			Если Символ="@" Тогда 
				
				Символ = СимволПоУмолчанию;
				
				ЭтоВыравнивание = Позиция>СтрДлина(ДвоичныеДанныеСтрокой); 
				Если Не ЭтоВыравнивание Тогда 
					
					Символ = Сред(ДвоичныеДанныеСтрокой, Позиция, 1);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ВыходнаяСтрока = ВыходнаяСтрока+Символ;
			
		КонецЦикла;
		
		ДвоичныеДанныеСтрокой = ВыходнаяСтрока;
		
	КонецЕсли;
	
	Попытка
		
		ДвоичныеДанные = ФабрикаXDTO.Создать(ОписаниеДанных, ДвоичныеДанныеСтрокой);
		
	Исключение
		
		Возврат ДвоичныеДанныеНеопределено;
		
	КонецПопытки;
	
	Возврат ДвоичныеДанные.Значение;
	
КонецФункции

#КонецОбласти

#Область _RECORD_PLPOR

Функция СписокНрековСобственныхЮрЛиц()
	
	Массив = Новый Массив;
	
	Массив.Добавить("0x8000000000000C92");
	Массив.Добавить("0x800120000000356F");
	Массив.Добавить("0x8000000000000C94");
	Массив.Добавить("0x800120000000356D");
	Массив.Добавить("0x8001000000004432");
	Массив.Добавить("0x8001000000004433");
	Массив.Добавить("0x8001000000002BFD");
	Массив.Добавить("0x800100000000262D");
	Массив.Добавить("0x8001000000004434");
	Массив.Добавить("0x800100000000262E");
	Массив.Добавить("0x8000000000000C70");
	
	Возврат Массив;
	
КонецФункции

Функция МассивДокументовПоступлениеБезналичныхДенежныхСредств(УзелДляОбмена)
	
	ДатаТестовойВыгрузки = Дата('20160729');	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеБезналичныхДенежныхСредств.Ссылка
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ПоступлениеБезналичныхДенежныхСредств
	|ГДЕ
	|	ПоступлениеБезналичныхДенежныхСредств.Проведен
	|	И ПоступлениеБезналичныхДенежныхСредств.Дата >= &Дата";
	
	Запрос.УстановитьПараметр("Дата", ДатаТестовойВыгрузки);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	МассивДокументов = РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивДокументов;
	
КонецФункции

Функция МассивДокументовСписаниеБезналичныхДенежныхСредств(УзелДляОбмена)
	
	ДатаТестовойВыгрузки = Дата('20160729');	
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписаниеБезналичныхДенежныхСредств.Ссылка
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
	|ГДЕ
	|	СписаниеБезналичныхДенежныхСредств.Проведен
	|	И СписаниеБезналичныхДенежныхСредств.Дата >= &Дата";
	
	Запрос.УстановитьПараметр("Дата", ДатаТестовойВыгрузки);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	МассивДокументов = РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивДокументов;
	
КонецФункции

Процедура ВыгрузитьПлатежныеПоручения() Экспорт
	
	ВыгрузитьПлатежныеПорученияПоступлениеДС();
	
	ВыгрузитьПлатежныеПорученияСписаниеДС();
	
КонецПроцедуры

Процедура ОписаниеВставкиСписаниеБезналичныхДенежныхСредств(ДанныеВставки, ТекСтрока)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписаниеБезналичныхДенежныхСредств.Дата КАК datob,
	|	СписаниеБезналичныхДенежныхСредств.Номер КАК numer,
	|	СписаниеБезналичныхДенежныхСредств.СуммаДокумента КАК sumnde,
	|	1 КАК tipdok,
	|	0 КАК direct,
	|	0 КАК sumv,
	|	ВЫРАЗИТЬ(""#ВыгрузкаДанных1с "" + (ВЫРАЗИТЬ(СписаниеБезналичныхДенежныхСредств.НазначениеПлатежа КАК СТРОКА(255))) КАК СТРОКА(255)) КАК _nazn,
	|	СписаниеБезналичныхДенежныхСредств.ДатаВходящегоДокумента КАК datvip,
	|	""0x8000000000000000"" КАК _kval,
	|	ВЫБОР
	|		КОГДА _KATORG.F_NREC ЕСТЬ NULL 
	|			ТОГДА ""0x8000000000000000""
	|		ИНАЧЕ _KATORG.F_NREC
	|	КОНЕЦ КАК _cpol,
	|	""0x8000000000000000"" КАК _cbankplat,
	|	""0x8000000000000000"" КАК _cplatza,
	|	""0x8000000000000000"" КАК _cplat,
	|	""0x8000000000000000"" КАК _cbankpol,
	|	СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.НомерСчета КАК БанковскийСчетКонтрагента,
	|	СписаниеБезналичныхДенежныхСредств.БанковскийСчет.НомерСчета КАК БанковскийСчет,
	|	СписаниеБезналичныхДенежныхСредств.НомерВходящегоДокумента _numer
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Соответствие1СГалактика.СрезПоследних(&ДатаСреза, ) КАК _KATORG
	|		ПО СписаниеБезналичныхДенежныхСредств.Контрагент = _KATORG.Значение1С
	|ГДЕ
	|	СписаниеБезналичныхДенежныхСредств.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ТекСтрока.Ссылка);
	Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаВыборки = РезультатЗапроса.Выгрузить();
	
	ДанныеВставки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаВыборки[0]);
	
	cashbank = ВнешниеИсточникиДанных.ГалактикаБД.__GET_KATBANK(ДанныеВставки.БанковскийСчет);
	ДанныеВставки.Вставить("cashbank", cashbank);
	
	ДанныеВставки._cbankplat = cashbank;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	dbo_T_KATBANK.F_CORG КАК F_CORG
	|ИЗ
	|	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KATBANK КАК dbo_T_KATBANK
	|ГДЕ
	|	dbo_T_KATBANK.F_NREC = &F_NREC";
	
	Запрос.УстановитьПараметр("F_NREC", cashbank);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда 
		
		СтрокаВыборки = РезультатЗапроса.Выгрузить();
		
		ДанныеВставки._cplat = СтрокаВыборки[0].F_CORG;
		
	КонецЕсли;
	
	ДанныеВставки._cpol = ДвоичныеДанные(ДанныеВставки._cpol);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	dbo_T_KATBANK.F_NREC КАК F_NREC
	|ИЗ
	|	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KATBANK КАК dbo_T_KATBANK
	|ГДЕ
	|	dbo_T_KATBANK.F_CORG = &F_CORG
	|	И dbo_T_KATBANK.F_SCHET1 = &F_SCHET1";
	
	Запрос.УстановитьПараметр("F_CORG", ДанныеВставки._cpol);
	Запрос.УстановитьПараметр("F_SCHET1", ДанныеВставки.БанковскийСчетКонтрагента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеВставки._cbankpol = ДвоичныеДанные(ДанныеВставки._cbankpol);
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		
		СтрокаВыборки = РезультатЗапроса.Выгрузить();
		
		ДанныеВставки._cbankpol = СтрокаВыборки[0].F_NREC;
		
	КонецЕсли;
	
	ДанныеВставки.Вставить("tableid", 9015);
	ДанныеВставки.Вставить("_atr", ДвоичныеДанные("0x8001000000000246"));
	ДанныеВставки.Вставить("ТипПриемника", "dbo_T_PLPOR");
	
	КодГруппыПользователей = "tu";
	
	ДанныеВставки.Вставить("DESGR", КодГруппыПользователей);
	
	ДанныеВставки.Вставить("ФункцияПоиска", "_NrecATTRVAL");
	ДанныеВставки.Вставить("ЛинейныйПоискСоответствия", Истина);
	
КонецПроцедуры

Процедура ОписаниеВставкиПоступлениеБезналичныхДенежныхСредств(ДанныеВставки, ТекСтрока)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеБезналичныхДенежныхСредств.Дата КАК datob,
	|	ПоступлениеБезналичныхДенежныхСредств.Номер КАК numer,
	|	ПоступлениеБезналичныхДенежныхСредств.СуммаДокумента КАК sumnde,
	|	2 КАК tipdok,
	|	1 КАК direct,
	|	0 КАК sumv,
	|	ВЫРАЗИТЬ(""#ВыгрузкаДанных1с "" + (ВЫРАЗИТЬ(ПоступлениеБезналичныхДенежныхСредств.НазначениеПлатежа КАК СТРОКА(255))) КАК СТРОКА(255)) КАК _nazn,
	|	ПоступлениеБезналичныхДенежныхСредств.ДатаВходящегоДокумента КАК datvip,
	|	""0x8000000000000000"" КАК _kval,
	|	ВЫБОР
	|		КОГДА _KATORG.F_NREC ЕСТЬ NULL 
	|			ТОГДА ""0x8000000000000000""
	|		ИНАЧЕ _KATORG.F_NREC
	|	КОНЕЦ КАК _cplat,
	|	""0x8000000000000000"" КАК _cbankplat,
	|	""0x8000000000000000"" КАК _cplatza,
	|	""0x8000000000000000"" КАК _cpol,
	|	""0x8000000000000000"" КАК _cbankpol,
	|	ПоступлениеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.НомерСчета КАК БанковскийСчетКонтрагента,
	|	ПоступлениеБезналичныхДенежныхСредств.БанковскийСчет.НомерСчета КАК БанковскийСчет,
	|	ПоступлениеБезналичныхДенежныхСредств.НомерВходящегоДокумента КАК _numer
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ПоступлениеБезналичныхДенежныхСредств
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Соответствие1СГалактика.СрезПоследних(&ДатаСреза, ) КАК _KATORG
	|		ПО ПоступлениеБезналичныхДенежныхСредств.Контрагент = _KATORG.Значение1С
	|ГДЕ
	|	ПоступлениеБезналичныхДенежныхСредств.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ТекСтрока.Ссылка);
	Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаВыборки = РезультатЗапроса.Выгрузить();
	
	ДанныеВставки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаВыборки[0]);
	
	cashbank = ВнешниеИсточникиДанных.ГалактикаБД.__GET_KATBANK(ДанныеВставки.БанковскийСчет);
	ДанныеВставки.Вставить("cashbank", cashbank);
	ДанныеВставки._cbankpol = cashbank; 

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	dbo_T_KATBANK.F_CORG КАК F_CORG
	|ИЗ
	|	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KATBANK КАК dbo_T_KATBANK
	|ГДЕ
	|	dbo_T_KATBANK.F_NREC = &F_NREC";
	
	Запрос.УстановитьПараметр("F_NREC", cashbank);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда 
		
		СтрокаВыборки = РезультатЗапроса.Выгрузить();
		
		ДанныеВставки._cpol = СтрокаВыборки[0].F_CORG;
		
	КонецЕсли;
	
	ДанныеВставки._cplat = ДвоичныеДанные(ДанныеВставки._cplat);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	dbo_T_KATBANK.F_NREC КАК F_NREC
	|ИЗ
	|	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KATBANK КАК dbo_T_KATBANK
	|ГДЕ
	|	dbo_T_KATBANK.F_CORG = &F_CORG
	|	И dbo_T_KATBANK.F_SCHET1 = &F_SCHET1";
	
	Запрос.УстановитьПараметр("F_CORG", ДанныеВставки._cplat);
	Запрос.УстановитьПараметр("F_SCHET1", ДанныеВставки.БанковскийСчетКонтрагента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеВставки._cbankplat = ДвоичныеДанные(ДанныеВставки._cbankplat);
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		
		СтрокаВыборки = РезультатЗапроса.Выгрузить();
		
		ДанныеВставки._cbankplat = СтрокаВыборки[0].F_NREC;
		
	КонецЕсли;
	
	ДанныеВставки.Вставить("tableid", 9015);
	ДанныеВставки.Вставить("_atr", ДвоичныеДанные("0x8001000000000246"));
	ДанныеВставки.Вставить("ТипПриемника", "dbo_T_PLPOR");
	
	КодГруппыПользователей = "tu";
	
	ДанныеВставки.Вставить("DESGR", КодГруппыПользователей);
	
	ДанныеВставки.Вставить("ФункцияПоиска", "_NrecATTRVAL");
	ДанныеВставки.Вставить("ЛинейныйПоискСоответствия", Истина);
	
КонецПроцедуры

Процедура ВыгрузитьПлатежныеПорученияПоступлениеДС()
	
	СтруктураПараметров = ПолучитьПараметры();
	
	ФильтрИзменений = Новый Массив;
	ФильтрИзменений.Добавить(Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств.ПолноеИмя());
	
	СтруктураПараметров.Вставить("ФильтрИзменений", ФильтрИзменений);
	
	ВсеУзлыПланаОбмена = СтруктураПараметров.ВсеУзлыПланаОбмена;
	
	Для Каждого УзелДляОбмена Из ВсеУзлыПланаОбмена Цикл
		
		МассивЗаданий = Новый Массив;
		
		//МассивДокументов = МассивДокументовПоступлениеБезналичныхДенежныхСредств(УзелДляОбмена);
		МассивДокументов = МассивИзменений(УзелДляОбмена, СтруктураПараметров.ФильтрИзменений);
		
		Для Каждого ТекСтрока Из МассивДокументов Цикл
			
			СтруктураВставки = ПолучитьДанныеВставкиПоТипу(ТекСтрока, УзелДляОбмена);
			Если СтруктураВставки = Неопределено Тогда 
				
				Продолжить;
				
			КонецЕсли;
			
			Если Не СтруктураВставки.ОбъектЕстьВРегистре Тогда  
				
				Попытка
					
					ВнешниеИсточникиДанных.ГалактикаБД.__INSERT_RECORD_PLPOR(
					
					СтруктураВставки.tipdok, 		СтруктураВставки._cpol,		СтруктураВставки._cbankpol, 	
					СтруктураВставки.datob, 		СтруктураВставки.datvip, 	СтруктураВставки.numer,
					СтруктураВставки.sumnde, 		СтруктураВставки.sumv, 		ДвоичныеДанные(СтруктураВставки._kval),
					СтруктураВставки._nazn, 		ДвоичныеДанные(СтруктураВставки._cplatza), 	
					СтруктураВставки._cplat,
					СтруктураВставки._cbankplat,	СтруктураВставки.id1C, 		СтруктураВставки._atr,
					СтруктураВставки.DESGR, 		СтруктураВставки.direct, 	СтруктураВставки.cashbank
					
					);
					
				Исключение
					
					ТекстОшибки = ОписаниеОшибки();
					
					Стек = "ОШИБКА ВСТАВКИ " + Строка(ТекСтрока);
					
					СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек);
					
					Продолжить;
					
				КонецПопытки;
				
				ЗавершитьЗапись(СтруктураВставки);
				
				Если СтруктураВставки.Свойство("УникальныйИдентификаторПриемника") Тогда 
					
					СтруктураВставки.Вставить("Событие", "Добавление");
					
					СинхронизацияГалактикаОбщегоНазначения.ЗаписатьЛог(СтруктураВставки, "tran_");
					
				КонецЕсли;
				
			Иначе
				
				Попытка
					
					ВнешниеИсточникиДанных.ГалактикаБД.__UPDATE_RECORD_PLPOR(
					
					СтруктураВставки.tipdok, 		СтруктураВставки._cpol,		СтруктураВставки._cbankpol, 	
					СтруктураВставки.datob, 		СтруктураВставки.datvip, 	СтруктураВставки.numer,
					СтруктураВставки.sumnde, 		СтруктураВставки.sumv, 		ДвоичныеДанные(СтруктураВставки._kval),
					СтруктураВставки._nazn, 		ДвоичныеДанные(СтруктураВставки._cplatza), 	
					СтруктураВставки._cplat,
					СтруктураВставки._cbankplat,	СтруктураВставки.id1C, 		СтруктураВставки._atr,  
					СтруктураВставки.УникальныйИдентификаторПриемника, 			СтруктураВставки.DESGR,
					СтруктураВставки.direct, 		СтруктураВставки.cashbank
					
					);
					
				Исключение
					
					ТекстОшибки = ОписаниеОшибки();
					
					Стек = "ОШИБКА ВСТАВКИ " + Строка(ТекСтрока);
					
					СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек);
					
					Продолжить;
					
				КонецПопытки;
				
				ЗавершитьЗапись(СтруктураВставки, Истина);
				
				СтруктураВставки.Вставить("Событие", "Обновление");
				
				СинхронизацияГалактикаОбщегоНазначения.ЗаписатьЛог(СтруктураВставки, "tran_");
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьПлатежныеПорученияСписаниеДС()
	
	СтруктураПараметров = ПолучитьПараметры();
	
	ФильтрИзменений = Новый Массив;
	ФильтрИзменений.Добавить(Метаданные.Документы.СписаниеБезналичныхДенежныхСредств.ПолноеИмя());
	
	СтруктураПараметров.Вставить("ФильтрИзменений", ФильтрИзменений);
	
	ВсеУзлыПланаОбмена = СтруктураПараметров.ВсеУзлыПланаОбмена;
	
	Для Каждого УзелДляОбмена Из ВсеУзлыПланаОбмена Цикл
		
		МассивЗаданий = Новый Массив;
		
		//МассивДокументов = МассивДокументовСписаниеБезналичныхДенежныхСредств(УзелДляОбмена);
		МассивДокументов = МассивИзменений(УзелДляОбмена, СтруктураПараметров.ФильтрИзменений);
		
		Для Каждого ТекСтрока Из МассивДокументов Цикл
			
			СтруктураВставки = ПолучитьДанныеВставкиПоТипу(ТекСтрока, УзелДляОбмена);
			Если СтруктураВставки = Неопределено Тогда 
				
				Продолжить;
				
			КонецЕсли;
			
			Если Не СтруктураВставки.ОбъектЕстьВРегистре Тогда  
				
				Попытка
					
					ВнешниеИсточникиДанных.ГалактикаБД.__INSERT_RECORD_PLPOR(
					
					СтруктураВставки.tipdok, 		СтруктураВставки._cpol,		СтруктураВставки._cbankpol, 	
					СтруктураВставки.datob, 		СтруктураВставки.datvip, 	СтруктураВставки.numer,
					СтруктураВставки.sumnde, 		СтруктураВставки.sumv, 		ДвоичныеДанные(СтруктураВставки._kval),
					СтруктураВставки._nazn, 		ДвоичныеДанные(СтруктураВставки._cplatza), 	
					СтруктураВставки._cplat,
					СтруктураВставки._cbankplat,	СтруктураВставки.id1C, 		СтруктураВставки._atr,
					СтруктураВставки.DESGR,			СтруктураВставки.direct, 	СтруктураВставки.cashbank
					
					);
					
				Исключение
					
					ТекстОшибки = ОписаниеОшибки();
					
					Стек = "ОШИБКА ВСТАВКИ " + Строка(ТекСтрока);
					
					СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек);
					
					Продолжить;
					
				КонецПопытки;
				
				ЗавершитьЗапись(СтруктураВставки);
				
				СтруктураВставки.Вставить("Событие", "Добавление");
				
				СинхронизацияГалактикаОбщегоНазначения.ЗаписатьЛог(СтруктураВставки, "tran_");
				
			Иначе
				
				Попытка
					
					ВнешниеИсточникиДанных.ГалактикаБД.__UPDATE_RECORD_PLPOR(
					
					СтруктураВставки.tipdok, 		СтруктураВставки._cpol,		СтруктураВставки._cbankpol, 	
					СтруктураВставки.datob, 		СтруктураВставки.datvip, 	СтруктураВставки.numer,
					СтруктураВставки.sumnde, 		СтруктураВставки.sumv, 		ДвоичныеДанные(СтруктураВставки._kval),
					СтруктураВставки._nazn, 		ДвоичныеДанные(СтруктураВставки._cplatza), 	
					СтруктураВставки._cplat,
					СтруктураВставки._cbankplat,	СтруктураВставки.id1C, 		СтруктураВставки._atr,  
					СтруктураВставки.УникальныйИдентификаторПриемника, 			СтруктураВставки.DESGR,
					СтруктураВставки.direct, 		СтруктураВставки.cashbank

					);
					
				Исключение
					
					ТекстОшибки = ОписаниеОшибки();
					
					Стек = "ОШИБКА ВСТАВКИ " + Строка(ТекСтрока);
					
					СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек);
					
					Продолжить;
					
				КонецПопытки;
				
				ЗавершитьЗапись(СтруктураВставки, Истина);
				
				СтруктураВставки.Вставить("Событие", "Обновление");
				
				СинхронизацияГалактикаОбщегоНазначения.ЗаписатьЛог(СтруктураВставки, "tran_");
				
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область _RECORD_KATSOPR

Процедура ОписаниеВставкиПоступлениеТоваровУслуг(ДанныеВставки, ТекСтрока, Параметры)
	
	ЭтоТовары = Параметры=101;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ПоступлениеТоваровУслуг.НомерВходящегоДокумента, """") КАК numer,
	|	ПоступлениеТоваровУслуг.Дата КАК dsopr,
	|	ПоступлениеТоваровУслуг.Дата КАК dpost,
	|	1 КАК regdoc,
	|	1 КАК state,
	|	7300 КАК tipuser,
	|	0 КАК sumbezndsdop,
	|	0 КАК sumbezndsex,
	|	0 КАК sumnonds,
	|	ТабличнаяЧасть.СуммаНДС КАК sumndsosn,
	|	0 КАК sumndsdop,
	|	0 КАК sumndsex,
	|	0 КАК imp,
	|	0 КАК akz,
	|	0 КАК nsp,
	|	ТабличнаяЧасть.СуммаСНДС КАК sumsndsosn,
	|	0 КАК sumsndsdop,
	|	0 КАК sumsndsex,
	|	0 КАК sumnalnonds,
	|	ПоступлениеТоваровУслуг.Номер КАК _numer,
	|	2 КАК tipdok,
	|	0 КАК _sumv,
	|	0 КАК summanalv,
	|	""0x8000000000000000"" КАК _kval,
	|	""0x8000000000000000"" КАК cstepdoc,
	|	ВЫБОР
	|		КОГДА _KATORG.F_NREC ЕСТЬ NULL 
	|			ТОГДА ""0x8000000000000000""
	|		ИНАЧЕ _KATORG.F_NREC
	|	КОНЕЦ КАК _ckontr,
	|	""0x8000000000000000"" КАК _cgruzto,
	|	""0x8000000000000000"" КАК _cgruzfrom,
	|	""0x8000000000000000"" КАК _cmolto,
	|	ПоступлениеТоваровУслуг.БанковскийСчетКонтрагента.НомерСчета КАК БанковскийСчетКонтрагента,
	|	ВЫБОР
	|		КОГДА _DOGOVOR.F_NREC ЕСТЬ NULL 
	|			ТОГДА ""0x8000000000000000""
	|		ИНАЧЕ _DOGOVOR.F_NREC
	|	КОНЕЦ КАК _cdogovor,
	|	0 КАК _summanal,
	|	ВЫБОР
	|		КОГДА _KATPODR.F_NREC ЕСТЬ NULL 
	|			ТОГДА ""0x8000000000000000""
	|		ИНАЧЕ _KATPODR.F_NREC
	|	КОНЕЦ КАК _cpodrto,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслуг.ЦенаВключаетНДС
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК _vhod,
	|	ВЫРАЗИТЬ(""#ВыгрузкаДанных1с "" + (ВЫРАЗИТЬ(ПоступлениеТоваровУслуг.Комментарий КАК СТРОКА(255))) КАК СТРОКА(80)) КАК name,
	|	ТабличнаяЧасть.СуммаНДС КАК summanal,
	|	ЕСТЬNULL(ТабличнаяЧасть.СуммаСНДС, 0) КАК sumnde,
	|	ВЫБОР
	|		КОГДА СчетФактураДокументы.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СозданаСчетФактура,
	|	СчетФактураДокументы.Ссылка.ДатаСоставления КАК dfact,
	|	ПоступлениеТоваровУслуг.Контрагент.ИНН КАК КонтрагентИНН,
	|	ПоступлениеТоваровУслуг.Контрагент.КПП КАК КонтрагентКПП,
	|	ПоступлениеТоваровУслуг.Организация.ИНН КАК ОрганизацияИНН,
	|	ПоступлениеТоваровУслуг.Организация.КПП КАК ОрганизацияКПП,
	|	ТабличнаяЧасть.Сумма,
	|	ТабличнаяЧасть.СуммаСНДС - ТабличнаяЧасть.СуммаНДС КАК sumbezndsosn,
	|	ВЫБОР
	|		КОГДА ДескрипторыОбъектовДляВыгрузкиГалактика.F_DESGR.КодГруппыПользователей ЕСТЬ NULL 
	|			ТОГДА """"
	|		ИНАЧЕ ДескрипторыОбъектовДляВыгрузкиГалактика.F_DESGR.КодГруппыПользователей
	|	КОНЕЦ КАК КодГруппыПользователей
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Соответствие1СГалактика.СрезПоследних(, ) КАК _KATORG
	|		ПО ПоступлениеТоваровУслуг.Контрагент = _KATORG.Значение1С
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Соответствие1СГалактика.СрезПоследних КАК _DOGOVOR
	|		ПО ПоступлениеТоваровУслуг.Договор = _DOGOVOR.Значение1С
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Соответствие1СГалактика.СрезПоследних КАК _KATPODR
	|		ПО ПоступлениеТоваровУслуг.Склад = _KATPODR.Значение1С
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураДокументы
	|		ПО ПоступлениеТоваровУслуг.Ссылка = СчетФактураДокументы.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыОбъектовДляВыгрузкиГалактика КАК ДескрипторыОбъектовДляВыгрузкиГалактика
	|		ПО ПоступлениеТоваровУслуг.Ссылка = ДескрипторыОбъектовДляВыгрузкиГалактика.Объект,
	|	(ВЫБРАТЬ
	|		СУММА(УслугТовары.СуммаНДС) КАК СуммаНДС,
	|		СУММА(УслугТовары.СуммаСНДС) КАК СуммаСНДС,
	|		СУММА(УслугТовары.Сумма) КАК Сумма
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.Товары КАК УслугТовары
	|	ГДЕ
	|		УслугТовары.Ссылка = &Ссылка
	|		И ВЫБОР
	|				КОГДА &ЭтоТовары
	|					ТОГДА ВЫБОР
	|							КОГДА УслугТовары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|								ТОГДА ИСТИНА
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА УслугТовары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			КОНЕЦ) КАК ТабличнаяЧасть
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ТекСтрока.Ссылка);
	Запрос.УстановитьПараметр("ЭтоТовары", ЭтоТовары);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаВыборки = РезультатЗапроса.Выгрузить();
	
	Если СтрокаВыборки[0].sumnde=0 Тогда 
		Возврат;	
	КонецЕсли;
	
	ДанныеВставки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаВыборки[0]);
	
	ДанныеВставки.Вставить("tableid", 1109);
	ДанныеВставки.Вставить("_atr", ДвоичныеДанные("0x8001000000000245"));
	ДанныеВставки.Вставить("ТипПриемника", "dbo_T_KATSOPR");
	
	КодГруппыПользователей = СтрокаВыборки[0].КодГруппыПользователей;
	
	ДанныеВставки.Вставить("DESGR", КодГруппыПользователей);
	
	ДанныеВставки.Вставить("vidsopr", Параметры);
	ДанныеВставки.Вставить("ФункцияПоиска", "_NrecATTRVAL_KATSOPR");
	
	ДанныеВставки.Вставить("ЛинейныйПоискСоответствия", Ложь);
	
	//для услуг добавляем доп поле
	//если в документе были товары
	
	ЗаписьТовары = "0x8000000000000000";
	
	Если Не ЭтоТовары Тогда 
		
		id1C = Строка(ТекСтрока.Ссылка.УникальныйИдентификатор());
		
		ТекЗапись = ВнешниеИсточникиДанных.ГалактикаБД._NrecATTRVAL_KATSOPR(ДанныеВставки._atr, id1C, 101);
		
		Если Не ТекЗапись=NULL Тогда 
			
			ЗаписьТовары = ТекЗапись;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеВставки.Вставить("ЗаписьТовары", ЗаписьТовары);
	
КонецПроцедуры

Функция МассивДокументовПоступлениеТоваровУслуг(УзелДляОбмена)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Соответствие1СГалактика.СрезПоследних КАК Соответствие1СГалактикаСрезПоследних
	|		ПО ПоступлениеТоваровУслуг.Ссылка = Соответствие1СГалактикаСрезПоследних.Значение1С
	|ГДЕ
	|	Соответствие1СГалактикаСрезПоследних.Значение1С ЕСТЬ NULL ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	МассивДокументов = РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивДокументов;
	
КонецФункции

Процедура ВыгрузитьПоступленияТоваровУслуг() Экспорт
	
	МассивВидовДокументаПриемника = Новый Массив;
	
	МассивВидовДокументаПриемника.Добавить(101); //Накладная на прием МЦ	katsopr.vidsopr = 101 //товары
	МассивВидовДокументаПриемника.Добавить(111); //Акт на прием услуги		katsopr.vidsopr = 111 //услуги
	
	СтруктураПараметров = ПолучитьПараметры();
	
	ФильтрИзменений = Новый Массив;
	ФильтрИзменений.Добавить(Метаданные.Документы.ПоступлениеТоваровУслуг.ПолноеИмя());
	
	СтруктураПараметров.Вставить("ФильтрИзменений", ФильтрИзменений);
	
	ВсеУзлыПланаОбмена = СтруктураПараметров.ВсеУзлыПланаОбмена;
	
	Для Каждого УзелДляОбмена Из ВсеУзлыПланаОбмена Цикл
		
		МассивЗаданий = Новый Массив;
		
		//МассивДокументов = МассивДокументовПоступлениеТоваровУслуг(УзелДляОбмена);
		МассивДокументов = МассивИзменений(УзелДляОбмена, СтруктураПараметров.ФильтрИзменений);
		
		Для Каждого ТекСтрока Из МассивДокументов Цикл
			
			Для Каждого ТекВид Из МассивВидовДокументаПриемника Цикл 
				
				СтруктураВставки = ПолучитьДанныеВставкиПоТипу(ТекСтрока, УзелДляОбмена, ТекВид);
				Если СтруктураВставки = Неопределено Тогда 
					
					Продолжить;
					
				КонецЕсли;
				
				Если Не СтруктураВставки.ОбъектЕстьВРегистре Тогда  
					
					Попытка
						
						ВнешниеИсточникиДанных.ГалактикаБД.__INSERT_RECORD_KATSOPR(
						
						СтруктураВставки._ckontr, 		СтруктураВставки._vhod,			СтруктураВставки.dsopr, 		СтруктураВставки.numer, 		СтруктураВставки.sumnde, 	
						СтруктураВставки._sumv, 		СтруктураВставки.summanal, 		СтруктураВставки.summanalv, 	СтруктураВставки._kval, 	    СтруктураВставки.name,
						СтруктураВставки._cdogovor, 	СтруктураВставки._cpodrto,		СтруктураВставки._cmolto, 		СтруктураВставки._cgruzfrom,	СтруктураВставки._cgruzto,
						СтруктураВставки.id1C,      	СтруктураВставки._atr,          СтруктураВставки.DESGR, 		СтруктураВставки.vidsopr, 		СтруктураВставки.ЗаписьТовары 
						
						);
						
					Исключение
						
						ТекстОшибки = ОписаниеОшибки();
						
						Стек = "ОШИБКА ВСТАВКИ " + Строка(ТекСтрока);
						
						СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек);
						
						Продолжить;
						
					КонецПопытки;
					
					ЗавершитьЗапись(СтруктураВставки);
					
					МассивСтрокДляСчетФактуры = ВыполнитьВставкуТабличнойЧастиПоступленияТоваровУслуг(СтруктураВставки);
					
					СтруктураВставки.Вставить("Событие", "Добавление");
					
					СинхронизацияГалактикаОбщегоНазначения.ЗаписатьЛог(СтруктураВставки, "tran_");
					
				Иначе
					
					Попытка
						
						ВнешниеИсточникиДанных.ГалактикаБД.__UPDATE_RECORD_KATSOPR(
						
						СтруктураВставки._ckontr, 		СтруктураВставки._vhod,			СтруктураВставки.dsopr, 		СтруктураВставки.numer, 		СтруктураВставки.sumnde, 	
						СтруктураВставки._sumv, 		СтруктураВставки.summanal, 		СтруктураВставки.summanalv, 	СтруктураВставки._kval, 	    СтруктураВставки.name,
						СтруктураВставки._cdogovor, 	СтруктураВставки._cpodrto,		СтруктураВставки._cmolto, 		СтруктураВставки._cgruzfrom,	СтруктураВставки._cgruzto,
						СтруктураВставки.id1C,      	СтруктураВставки._atr, 			СтруктураВставки.УникальныйИдентификаторПриемника, 
						СтруктураВставки.DESGR, 		СтруктураВставки.vidsopr, 		СтруктураВставки.ЗаписьТовары					
						
						);
						
					Исключение
						
						ТекстОшибки = ОписаниеОшибки();
						
						Стек = "ОШИБКА ВСТАВКИ " + Строка(ТекСтрока);
						
						СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек);
						
						Продолжить;
						
					КонецПопытки;
					
					ВнешниеИсточникиДанных.ГалактикаБД.__DELETE_RECORD_SPSOPR(ДвоичныеДанные(СтруктураВставки.УникальныйИдентификаторПриемника));
					
					МассивСтрокДляСчетФактуры = ВыполнитьВставкуТабличнойЧастиПоступленияТоваровУслуг(СтруктураВставки);
					
					СтруктураВставки.Вставить("Событие", "Обновление");
					
					СинхронизацияГалактикаОбщегоНазначения.ЗаписатьЛог(СтруктураВставки, "tran_");
					
				КонецЕсли;
				
				//Вставка счетфактуры по поступлению товаров и услуг
				Если СтруктураВставки.СозданаСчетФактура Тогда 
					
					//Проверка на сумму налогов по виду документа товары, услуги
					Если СтруктураВставки.summanal>0 Тогда 
						
						ВыгрузитьСчетФактуруПоПоступлениюТоваровУслуг(СтруктураВставки, МассивСтрокДляСчетФактуры);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;	
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область _RECORD_SPSOPR

Функция ПолучитьСтрокиТЧПоступлениеТоваровУслуг(СтруктураВставки)
	
	ЭтоТовары = СтруктураВставки.vidsopr=101;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.НомерСтроки КАК npp,
	|	ЕСТЬNULL(Товары.Номенклатура, """") КАК Номенклатура,
	|	Товары.Цена КАК cena,
	|	Товары.КоличествоУпаковок КАК kol,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС КАК summanal,
	|	0 КАК summanalv,
	|	0 КАК cenav,
	|	0 КАК nalogv,
	|	Товары.СуммаСНДС,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК pr,
	|	""0x8000000000000000"" КАК _cotped,
	|	""0x8000000000000000"" КАК _party,
	|	ВЫБОР
	|		КОГДА _KATMC.F_NREC ЕСТЬ NULL 
	|			ТОГДА ""0x8000000000000000""
	|		ИНАЧЕ _KATMC.F_NREC
	|	КОНЕЦ КАК _mcusl,
	|	ВЫБОР
	|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|				ИЛИ Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|			ТОГДА 0.18
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|						ИЛИ Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|					ТОГДА 0.1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК stavka,
	|	ВЫБОР
	|		КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|				ИЛИ Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|			ТОГДА ""0xC001B85105EF77DA""
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|						ИЛИ Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|					ТОГДА ""0x8000000000000003""
	|				ИНАЧЕ ""0x8001000000000001""
	|			КОНЕЦ
	|	КОНЕЦ КАК _cnalog,
	|	0 КАК akcizpr,
	|	0 КАК drnal,
	|	0 КАК nalsp,
	|	Товары.Номенклатура.Код,
	|	ВЫРАЗИТЬ(Товары.Номенклатура.Наименование КАК СТРОКА(80)) КАК Наименование
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Соответствие1СГалактика.СрезПоследних КАК _KATMC
	|		ПО Товары.Номенклатура = _KATMC.Значение1С
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И ВЫБОР
	|			КОГДА &ЭтоТовары
	|				ТОГДА ВЫБОР
	|						КОГДА Товары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА Товары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураВставки.Ссылка);
	Запрос.УстановитьПараметр("ЭтоТовары", ЭтоТовары);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СтрокиТЧ = РезультатЗапроса.Выгрузить();
	
	Возврат СтрокиТЧ;
	
КонецФункции

Функция ВыполнитьВставкуТабличнойЧастиПоступленияТоваровУслуг(СтруктураВставки)
	
	МассивСтрокДляСчетФактуры = Новый Массив;
	
	СтрокиТЧ = ПолучитьСтрокиТЧПоступлениеТоваровУслуг(СтруктураВставки);
	
	Для Сч=0 По СтрокиТЧ.Количество()-1 Цикл
		
		ТекСтрока = СтрокиТЧ[Сч];
		
		Если Не ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда 
			
			Продолжить;
			
		КонецЕсли;
		
		Попытка
			
			ВнешниеИсточникиДанных.ГалактикаБД.__INSERT_RECORD_SPSOPR(
			
			(Сч+1), 					ТекСтрока.pr,				ТекСтрока._mcusl, 									ТекСтрока._cotped, 			ТекСтрока._party, 	
			ТекСтрока.kol, 				ТекСтрока.cena, 			ТекСтрока.stavka, 									ТекСтрока.cenav, 	    	ТекСтрока.nalogv,
			ТекСтрока._cnalog, 			СтруктураВставки._kval,		СтруктураВставки.УникальныйИдентификаторПриемника, 	СтруктураВставки.dsopr,		СтруктураВставки._vhod,
			ТекСтрока.summanal, 		ТекСтрока.summanalv
			
			);
			
		Исключение
			
			ТекстОшибки = ОписаниеОшибки();
			
			Стек = "ОШИБКА ВСТАВКИ " + Строка(ТекСтрока);
			
			СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек);
			
			Продолжить;
			
		КонецПопытки;
		
		МассивСтрокДляСчетФактуры.Добавить(ТекСтрока);
		
	КонецЦикла;
	
	Возврат МассивСтрокДляСчетФактуры;
	
КонецФункции

#КонецОбласти

#Область _RECORD_SPSCHF

//Данные собираются в момент выгрузки поступления

Процедура ВыполнитьВставкуТабличнойЧастиСчетФактурыПоПоступлениюТоваровУслуг(СтруктураВставки, СтрокиТЧ)
	
	Для Сч=0 По СтрокиТЧ.Количество()-1 Цикл
		
		ТекСтрока = СтрокиТЧ[Сч];
		
		Попытка
			
			ВнешниеИсточникиДанных.ГалактикаБД.__INSERT_RECORD_SPSCHF(
			
			ДвоичныеДанные(СтруктураВставки.УникальныйИдентификаторПриемника),
			(Сч+1), 					
			ТекСтрока.pr,				
			ДвоичныеДанные(ТекСтрока._mcusl), 							
			ДвоичныеДанные(ТекСтрока._cotped), 	
			ДвоичныеДанные(ТекСтрока._party), 	
			ДвоичныеДанные(ТекСтрока._cnalog),
			ТекСтрока.kol, 				
			ТекСтрока.cena, 		
			ТекСтрока.akcizpr, 		
			ТекСтрока.drnal, 		
			ТекСтрока.nalsp, 		
			СтруктураВставки.dfact,		
			ДвоичныеДанные(СтруктураВставки._kval),		
			СтруктураВставки._vhod,
			ТекСтрока.Наименование,
			ТекСтрока.stavka
			);
						
		Исключение
			
			ТекстОшибки = ОписаниеОшибки();
			
			Стек = "ОШИБКА ВСТАВКИ " + Строка(ТекСтрока);
			
			СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек);
			
			Продолжить;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область _RECORD_SCHFACT

//Данные собираются в момент выгрузки поступления

Процедура ВыгрузитьСчетФактуруПоПоступлениюТоваровУслуг(СтруктураВставки, МассивСтрокДляСчетФактуры)
	
	Если МассивСтрокДляСчетФактуры.Количество()=0 Тогда 
		
		ТекстОшибки = "ОШИБКА ВСТАВКИ НЕТ ДАННЫХ ПО СЧЕТФАКТУРЕ " + Строка(СтруктураВставки.Ссылка);
		
		СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки);
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураВставки.Вставить("ТипПриемника", "dbo_T_SCHFACT");
	СтруктураВставки.Вставить("Накладная", ДвоичныеДанные(СтруктураВставки.УникальныйИдентификаторПриемника));
	СтруктураВставки._atr = ДвоичныеДанные("0x8001000000000247");
	СтруктураВставки.Вставить("ФункцияПоиска", "_NrecATTRVAL_SCHFACT");
	
	ОбъектЕстьВРегистре(СтруктураВставки);
	
	//Вставка шапки
	Если Не СтруктураВставки.ОбъектЕстьВРегистре Тогда  
		
		Попытка
			
			ВнешниеИсточникиДанных.ГалактикаБД.__INSERT_RECORD_SCHFACT
			
			(
			
			ДвоичныеДанные(СтруктураВставки._ckontr), 		
			СтруктураВставки._vhod,			
			ДвоичныеДанные(СтруктураВставки.cstepdoc), 	
			СтруктураВставки.dsopr, 	
			СтруктураВставки.dpost, 	
			СтруктураВставки.numer, 		
			СтруктураВставки.regdoc,
			СтруктураВставки.state,
			СтруктураВставки.tipuser,
			ДвоичныеДанные(СтруктураВставки._kval),
			
			СтруктураВставки.sumbezndsosn,
			СтруктураВставки.sumbezndsdop,
			СтруктураВставки.sumbezndsex,
			СтруктураВставки.sumnonds,
			СтруктураВставки.sumndsosn,
			СтруктураВставки.sumndsdop,
			СтруктураВставки.sumndsex,
			СтруктураВставки.imp,
			СтруктураВставки.akz,
			СтруктураВставки.nsp,
			СтруктураВставки.sumsndsosn,
			СтруктураВставки.sumsndsdop,
			СтруктураВставки.sumsndsex,
			СтруктураВставки.sumnalnonds,			
			
			СтруктураВставки.name,
			
			ДвоичныеДанные(СтруктураВставки._cdogovor), 	
			
			ДвоичныеДанные(СтруктураВставки._cgruzfrom),	
			ДвоичныеДанные(СтруктураВставки._cgruzto),
			
			ДвоичныеДанные(Неопределено), //@cmyacc binary(8), /* Ссылка на наш KATBANK.NREC */
			ДвоичныеДанные(Неопределено), //@ckontracc binary(8), /* Ссылка на KATBANK.NREC контрагента */
			
			СтруктураВставки.id1C,      	
			
			СтруктураВставки._atr,        
			СтруктураВставки.Накладная,
			
			СтруктураВставки.ОрганизацияКПП,
			СтруктураВставки.ОрганизацияИНН,
			СтруктураВставки.КонтрагентКПП,
			СтруктураВставки.КонтрагентИНН,
			СтруктураВставки.DESGR

			//СтруктураВставки.sumnde, 	
			//СтруктураВставки._sumv, 	
			//СтруктураВставки.summanal, 		
			//СтруктураВставки.summanalv, 	
			//СтруктураВставки._cpodrto,	
			//СтруктураВставки._cmolto, 		
			//СтруктураВставки.DESGR, 	
			//СтруктураВставки.vidsopr, 		
			//СтруктураВставки.ЗаписьТовары 
			
			);
			
		Исключение
			
			ТекстОшибки = ОписаниеОшибки();
			
			Стек = "ОШИБКА ВСТАВКИ " + Строка(СтруктураВставки.Ссылка);
			
			СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек);
			
			Возврат;
			
		КонецПопытки;
		
		ЗавершитьЗапись(СтруктураВставки);
		
		СтруктураВставки.Вставить("Событие", "Добавление");
		
		СинхронизацияГалактикаОбщегоНазначения.ЗаписатьЛог(СтруктураВставки, "tran_");
		
	Иначе
		
		Попытка
			
			ВнешниеИсточникиДанных.ГалактикаБД.__UPDATE_RECORD_SCHFACT
			
			(
			
			ДвоичныеДанные(СтруктураВставки.УникальныйИдентификаторПриемника), 		
			ДвоичныеДанные(СтруктураВставки._ckontr), 		
			СтруктураВставки._vhod,			
			ДвоичныеДанные(СтруктураВставки.cstepdoc), 	
			СтруктураВставки.dsopr, 	
			СтруктураВставки.dpost, 	
			СтруктураВставки.numer, 		
			ДвоичныеДанные(СтруктураВставки._kval),
			
			СтруктураВставки.sumbezndsosn,
			СтруктураВставки.sumbezndsdop,
			СтруктураВставки.sumbezndsex,
			
			СтруктураВставки.sumnonds,
			
			СтруктураВставки.sumndsosn,
			СтруктураВставки.sumndsdop,
			СтруктураВставки.sumndsex,
			
			СтруктураВставки.imp,
			СтруктураВставки.akz,
			СтруктураВставки.nsp,
			
			СтруктураВставки.sumsndsosn,
			СтруктураВставки.sumsndsdop,
			СтруктураВставки.sumsndsex,
			СтруктураВставки.sumnalnonds,			
			
			СтруктураВставки.name,	
			
			ДвоичныеДанные(СтруктураВставки._cgruzfrom),	
			ДвоичныеДанные(СтруктураВставки._cgruzto),
			
			ДвоичныеДанные(Неопределено), //@cmyacc binary(8), /* Ссылка на наш KATBANK.NREC */
			ДвоичныеДанные(Неопределено), //@ckontracc binary(8), /* Ссылка на KATBANK.NREC контрагента */
			
			СтруктураВставки.id1C,      	
			
			СтруктураВставки.Накладная,
			
			СтруктураВставки.ОрганизацияКПП,
			СтруктураВставки.ОрганизацияИНН,
			СтруктураВставки.КонтрагентКПП,
			СтруктураВставки.КонтрагентИНН,
			СтруктураВставки.DESGR
			
			//СтруктураВставки.sumnde, 	
			//СтруктураВставки._sumv, 	
			//СтруктураВставки.summanal, 		
			//СтруктураВставки.summanalv, 	
			//СтруктураВставки._cpodrto,	
			//СтруктураВставки._cmolto, 		
			//СтруктураВставки.DESGR, 	
			//СтруктураВставки.vidsopr, 		
			//СтруктураВставки.ЗаписьТовары 
			
			);
						
			ВнешниеИсточникиДанных.ГалактикаБД.__DELETE_RECORD_SPSCHF(ДвоичныеДанные(СтруктураВставки.УникальныйИдентификаторПриемника));
			
		Исключение
			
			ТекстОшибки = ОписаниеОшибки();
			
			Стек = "ОШИБКА ВСТАВКИ " + Строка(СтруктураВставки.Ссылка);
			
			СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек);
			
			Возврат;
			
		КонецПопытки;
		
		СтруктураВставки.Вставить("Событие", "Обновление");
		
		СинхронизацияГалактикаОбщегоНазначения.ЗаписатьЛог(СтруктураВставки, "tran_");
		
	КонецЕсли;
	
	//Вставка тч
	ВыполнитьВставкуТабличнойЧастиСчетФактурыПоПоступлениюТоваровУслуг(СтруктураВставки, МассивСтрокДляСчетФактуры);
	
КонецПроцедуры


Процедура РегламентноеПолучениеДанныхВГалактика() Экспорт
	
	ВыгрузитьПлатежныеПорученияПоступлениеДС();
	
	ВыгрузитьПлатежныеПорученияСписаниеДС();
	
	ВыгрузитьПоступленияТоваровУслуг();
	
КонецПроцедуры

#КонецОбласти

#Область _RECORD_PLPOR_ACC_INFO


Процедура ОписаниеВставкиБухСправка(ДанныеВставки, ТекСтрока, Параметры = Неопределено)
	
	ДанныеВставки = Новый Структура;
	
	ДанныеВставки.Вставить("tipdok", "10");
	ДанныеВставки.Вставить("datob", ТекСтрока.Дата);
	ДанныеВставки.Вставить("numer", ТекСтрока.Номер);
	
	ДанныеВставки.Вставить("sumnde", 0);
	ДанныеВставки.Вставить("sumv", 0);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекСтрока, "Сумма") Тогда 
		ДанныеВставки.Вставить("sumnde", ТекСтрока.Сумма);
	КонецЕсли;
		
	ДанныеВставки.Вставить("_kval", "0x8000000000000000");
	ДанныеВставки.Вставить("_nazn", Строка(ТекСтрока));
	
	ДанныеВставки.Вставить("direct", "1"); 	
	
	ДанныеВставки.Вставить("tableid", 9015);
	ДанныеВставки.Вставить("_atr", ДвоичныеДанные("0x8001000000000246"));
	ДанныеВставки.Вставить("ТипПриемника", "dbo_T_PLPOR");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДескрипторыОбъектовДляВыгрузкиГалактика.F_DESGR.КодГруппыПользователей КодГруппыПользователей
		|ИЗ
		|	РегистрСведений.ДескрипторыОбъектовДляВыгрузкиГалактика КАК ДескрипторыОбъектовДляВыгрузкиГалактика
		|ГДЕ
		|	ДескрипторыОбъектовДляВыгрузкиГалактика.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", ТекСтрока.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	КодГруппыПользователей = "";
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

		ВыборкаДетальныеЗаписи.Следующий();
		
		КодГруппыПользователей = ВыборкаДетальныеЗаписи.КодГруппыПользователей;

	КонецЕсли;
		
	ДанныеВставки.Вставить("DESGR", КодГруппыПользователей);
	
	ДанныеВставки.Вставить("ФункцияПоиска", "_NrecATTRVAL");
	ДанныеВставки.Вставить("ЛинейныйПоискСоответствия", Истина);
	
КонецПроцедуры


Процедура ВыгрузитьДокументыКакБухСправка() Экспорт
	
	СтруктураПараметров = ПолучитьПараметры();
	
	ФильтрИзменений = Новый Массив;
	ФильтрИзменений.Добавить(Метаданные.Документы.ПеремещениеТоваров.ПолноеИмя());
	
	СтруктураПараметров.Вставить("ФильтрИзменений", ФильтрИзменений);
	
	ВсеУзлыПланаОбмена = СтруктураПараметров.ВсеУзлыПланаОбмена;
	
	Для Каждого УзелДляОбмена Из ВсеУзлыПланаОбмена Цикл
		
		МассивДокументов = МассивИзменений(УзелДляОбмена, СтруктураПараметров.ФильтрИзменений);
		
		Для Каждого ТекСтрока Из МассивДокументов Цикл
			
			СтруктураВставки = ПолучитьДанныеВставкиПоТипу(ТекСтрока, УзелДляОбмена, , Истина);
			Если СтруктураВставки = Неопределено Тогда 
				
				Продолжить;
				
			КонецЕсли;
			
			Если Не СтруктураВставки.ОбъектЕстьВРегистре Тогда  
				
				Попытка
					
					ВнешниеИсточникиДанных.ГалактикаБД.__INSERT_RECORD_PLPOR_new(
					
					СтруктураВставки.tipdok, 		ДвоичныеДанные(),			ДвоичныеДанные(), 	
					СтруктураВставки.datob, 		СтруктураВставки.datob, 			СтруктураВставки.numer,
					СтруктураВставки.sumnde, 		СтруктураВставки.sumv, 		ДвоичныеДанные(СтруктураВставки._kval),
					СтруктураВставки._nazn, 		ДвоичныеДанные(), 			ДвоичныеДанные(),
					ДвоичныеДанные(),				СтруктураВставки.id1C, 		СтруктураВставки._atr,
					СтруктураВставки.DESGR,			СтруктураВставки.direct, 	ДвоичныеДанные()
					
					);
					
				Исключение
					
					ТекстОшибки = ОписаниеОшибки();
					
					Стек = "ОШИБКА ВСТАВКИ " + Строка(ТекСтрока);
					
					СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек);
					
					Продолжить;
					
				КонецПопытки;
				
				ЗавершитьЗапись(СтруктураВставки);
				
				СтруктураВставки.Вставить("Событие", "Добавление");
				
				СинхронизацияГалактикаОбщегоНазначения.ЗаписатьЛог(СтруктураВставки, "tran_");
				
			Иначе
				
				Попытка
					
					ВнешниеИсточникиДанных.ГалактикаБД.__UPDATE_RECORD_PLPOR_new(
					
					СтруктураВставки.tipdok, 		ДвоичныеДанные(),			ДвоичныеДанные(), 	
					СтруктураВставки.datob, 		СтруктураВставки.datob, 	СтруктураВставки.numer,
					СтруктураВставки.sumnde, 		СтруктураВставки.sumv, 		ДвоичныеДанные(СтруктураВставки._kval),
					СтруктураВставки._nazn, 		ДвоичныеДанные(), 			ДвоичныеДанные(),
					ДвоичныеДанные(),				СтруктураВставки.id1C, 		СтруктураВставки._atr,  
					ДвоичныеДанные(СтруктураВставки.УникальныйИдентификаторПриемника), 			СтруктураВставки.DESGR,
					СтруктураВставки.direct, 		ДвоичныеДанные()

					);
					
				Исключение
					
					ТекстОшибки = ОписаниеОшибки();
					
					Стек = "ОШИБКА ВСТАВКИ " + Строка(ТекСтрока);
					
					СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек);
					
					Продолжить;
					
				КонецПопытки;
				
				ЗавершитьЗапись(СтруктураВставки, Истина);
				
				СтруктураВставки.Вставить("Событие", "Обновление");
				
				СинхронизацияГалактикаОбщегоНазначения.ЗаписатьЛог(СтруктураВставки, "tran_");
				
			КонецЕсли;
			
			ВыгрузитьПроводкиБухСправки(ТекСтрока, СтруктураВставки);
			
		КонецЦикла;	
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область _RECORD_OBOROT_FROM_ACC_INFO

Процедура ВыгрузитьПроводкиБухСправки(Регистратор, СтруктураВставки)
	
	Если Регистратор.Ссылка.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.СчетДт,
	|	ХозрасчетныйДвиженияССубконто.СчетКт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт3,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт3,
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	ХозрасчетныйДвиженияССубконто.ВалютаДт,
	|	ХозрасчетныйДвиженияССубконто.ВалютаКт,
	|	ХозрасчетныйДвиженияССубконто.ПодразделениеДт,
	|	ХозрасчетныйДвиженияССубконто.ПодразделениеКт,
	|	ХозрасчетныйДвиженияССубконто.НаправлениеДеятельностиДт,
	|	ХозрасчетныйДвиженияССубконто.НаправлениеДеятельностиКт,
	|	ХозрасчетныйДвиженияССубконто.ВидСубконтоДт1,
	|	ХозрасчетныйДвиженияССубконто.ВидСубконтоДт2,
	|	ХозрасчетныйДвиженияССубконто.ВидСубконтоДт3,
	|	ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1,
	|	ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2,
	|	ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3,
	|	ХозрасчетныйДвиженияССубконто.Регистратор,
	|	ХозрасчетныйДвиженияССубконто.Период,
	|	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК Индекс,
	|	ХозрасчетныйДвиженияССубконто.Сумма,
	|	ХозрасчетныйДвиженияССубконто.КоличествоДт,
	|	ХозрасчетныйДвиженияССубконто.КоличествоКт,
	|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт,
	|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт
	|ПОМЕСТИТЬ ДанныеБУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(, , Регистратор = &Регистратор, , ) КАК ХозрасчетныйДвиженияССубконто
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Индекс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеБУ.СчетДт,
	|	ДанныеБУ.СчетКт,
	|	ДанныеБУ.СубконтоДт1,
	|	ДанныеБУ.СубконтоДт2,
	|	ДанныеБУ.СубконтоДт3,
	|	ДанныеБУ.СубконтоКт1,
	|	ДанныеБУ.СубконтоКт2,
	|	ДанныеБУ.СубконтоКт3,
	|	ДанныеБУ.Организация,
	|	ДанныеБУ.ВалютаДт,
	|	ДанныеБУ.ВалютаКт,
	|	ДанныеБУ.ПодразделениеДт,
	|	ДанныеБУ.ПодразделениеКт,
	|	ДанныеБУ.НаправлениеДеятельностиДт,
	|	ДанныеБУ.НаправлениеДеятельностиКт,
	|	СинхронизацияГалактикаВыгрузкаШаблоныПроводок.Ссылка КАК ШаблонПроводки,
	|	ДанныеБУ.ВидСубконтоДт1,
	|	ДанныеБУ.ВидСубконтоДт2,
	|	ДанныеБУ.ВидСубконтоДт3,
	|	ДанныеБУ.ВидСубконтоКт1,
	|	ДанныеБУ.ВидСубконтоКт2,
	|	ДанныеБУ.ВидСубконтоКт3,
	|	СинхронизацияГалактикаВыгрузкаШаблоныПроводок.СчетДебетаОтражение,
	|	СинхронизацияГалактикаВыгрузкаШаблоныПроводок.СчетКредитаОтражение,
	|	ДанныеБУ.Период,
	|	ДанныеБУ.Регистратор,
	|	ДанныеБУ.Индекс КАК Индекс,
	|	ДанныеБУ.ВалютнаяСуммаКт,
	|	ДанныеБУ.ВалютнаяСуммаДт,
	|	ДанныеБУ.КоличествоКт,
	|	ДанныеБУ.КоличествоДт,
	|	ДанныеБУ.Сумма,
	|	СинхронизацияГалактикаВыгрузкаШаблоныПроводок.СубСчетДебетаОтражение,
	|	СинхронизацияГалактикаВыгрузкаШаблоныПроводок.СубСчетКредитаОтражение
	|ПОМЕСТИТЬ ДанныеБУ_ШаблонПроводок
	|ИЗ
	|	Справочник.СинхронизацияГалактикаВыгрузкаШаблоныПроводок КАК СинхронизацияГалактикаВыгрузкаШаблоныПроводок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеБУ КАК ДанныеБУ
	|		ПО СинхронизацияГалактикаВыгрузкаШаблоныПроводок.СчетДебетаПоУмолчанию = ДанныеБУ.СчетДт
	|			И СинхронизацияГалактикаВыгрузкаШаблоныПроводок.СчетКредитаПоУмолчанию = ДанныеБУ.СчетКт
	|ГДЕ
	|	НЕ ДанныеБУ.Организация ЕСТЬ NULL 
	|	И НЕ СинхронизацияГалактикаВыгрузкаШаблоныПроводок.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Индекс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеБУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеБУ_ШаблонПроводок.СубконтоДт1 КАК Субконто,
	|	ШаблоныПроводокДТ.Выражение КАК Выражение,
	|	ШаблоныПроводокДТ.ТипКАУ,
	|	ШаблоныПроводокДТ.ТипЗначенияКАУ,
	|	ШаблоныПроводокДТ.ТипСубконто,
	|	ШаблоныПроводокДТ.НомерСтроки,
	|	ИСТИНА КАК Дебет,
	|	ДанныеБУ_ШаблонПроводок.Индекс КАК Индекс,
	|	ДанныеБУ_ШаблонПроводок.ВалютнаяСуммаКт,
	|	ДанныеБУ_ШаблонПроводок.ВалютнаяСуммаДт,
	|	ДанныеБУ_ШаблонПроводок.КоличествоКт,
	|	ДанныеБУ_ШаблонПроводок.КоличествоДт,
	|	ДанныеБУ_ШаблонПроводок.Сумма
	|ИЗ
	|	ДанныеБУ_ШаблонПроводок КАК ДанныеБУ_ШаблонПроводок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СинхронизацияГалактикаВыгрузкаШаблоныПроводок.СубконтоДТ КАК ШаблоныПроводокДТ
	|		ПО ДанныеБУ_ШаблонПроводок.ШаблонПроводки = ШаблоныПроводокДТ.Ссылка
	|			И ДанныеБУ_ШаблонПроводок.ВидСубконтоДт1 = ШаблоныПроводокДТ.ТипСубконто
	|ГДЕ
	|	НЕ ШаблоныПроводокДТ.ТипСубконто ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеБУ_ШаблонПроводок.СубконтоДт2,
	|	ШаблоныПроводокДТ.Выражение,
	|	ШаблоныПроводокДТ.ТипКАУ,
	|	ШаблоныПроводокДТ.ТипЗначенияКАУ,
	|	ШаблоныПроводокДТ.ТипСубконто,
	|	ШаблоныПроводокДТ.НомерСтроки,
	|	ИСТИНА,
	|	ДанныеБУ_ШаблонПроводок.Индекс,
	|	ДанныеБУ_ШаблонПроводок.ВалютнаяСуммаКт,
	|	ДанныеБУ_ШаблонПроводок.ВалютнаяСуммаДт,
	|	ДанныеБУ_ШаблонПроводок.КоличествоКт,
	|	ДанныеБУ_ШаблонПроводок.КоличествоДт,
	|	ДанныеБУ_ШаблонПроводок.Сумма
	|ИЗ
	|	ДанныеБУ_ШаблонПроводок КАК ДанныеБУ_ШаблонПроводок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СинхронизацияГалактикаВыгрузкаШаблоныПроводок.СубконтоДТ КАК ШаблоныПроводокДТ
	|		ПО ДанныеБУ_ШаблонПроводок.ШаблонПроводки = ШаблоныПроводокДТ.Ссылка
	|			И ДанныеБУ_ШаблонПроводок.ВидСубконтоДт2 = ШаблоныПроводокДТ.ТипСубконто
	|ГДЕ
	|	НЕ ШаблоныПроводокДТ.ТипСубконто ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеБУ_ШаблонПроводок.СубконтоДт3,
	|	ШаблоныПроводокДТ.Выражение,
	|	ШаблоныПроводокДТ.ТипКАУ,
	|	ШаблоныПроводокДТ.ТипЗначенияКАУ,
	|	ШаблоныПроводокДТ.ТипСубконто,
	|	ШаблоныПроводокДТ.НомерСтроки,
	|	ИСТИНА,
	|	ДанныеБУ_ШаблонПроводок.Индекс,
	|	ДанныеБУ_ШаблонПроводок.ВалютнаяСуммаКт,
	|	ДанныеБУ_ШаблонПроводок.ВалютнаяСуммаДт,
	|	ДанныеБУ_ШаблонПроводок.КоличествоКт,
	|	ДанныеБУ_ШаблонПроводок.КоличествоДт,
	|	ДанныеБУ_ШаблонПроводок.Сумма
	|ИЗ
	|	ДанныеБУ_ШаблонПроводок КАК ДанныеБУ_ШаблонПроводок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СинхронизацияГалактикаВыгрузкаШаблоныПроводок.СубконтоДТ КАК ШаблоныПроводокДТ
	|		ПО ДанныеБУ_ШаблонПроводок.ШаблонПроводки = ШаблоныПроводокДТ.Ссылка
	|			И ДанныеБУ_ШаблонПроводок.ВидСубконтоДт3 = ШаблоныПроводокДТ.ТипСубконто
	|ГДЕ
	|	НЕ ШаблоныПроводокДТ.ТипСубконто ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеБУ_ШаблонПроводок.СубконтоКт1,
	|	ШаблоныПроводокСубконтоКТ.Выражение,
	|	ШаблоныПроводокСубконтоКТ.ТипКАУ,
	|	ШаблоныПроводокСубконтоКТ.ТипЗначенияКАУ,
	|	ШаблоныПроводокСубконтоКТ.ТипСубконто,
	|	ШаблоныПроводокСубконтоКТ.НомерСтроки,
	|	ЛОЖЬ,
	|	ДанныеБУ_ШаблонПроводок.Индекс,
	|	ДанныеБУ_ШаблонПроводок.ВалютнаяСуммаКт,
	|	ДанныеБУ_ШаблонПроводок.ВалютнаяСуммаДт,
	|	ДанныеБУ_ШаблонПроводок.КоличествоКт,
	|	ДанныеБУ_ШаблонПроводок.КоличествоДт,
	|	ДанныеБУ_ШаблонПроводок.Сумма
	|ИЗ
	|	ДанныеБУ_ШаблонПроводок КАК ДанныеБУ_ШаблонПроводок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СинхронизацияГалактикаВыгрузкаШаблоныПроводок.СубконтоКТ КАК ШаблоныПроводокСубконтоКТ
	|		ПО ДанныеБУ_ШаблонПроводок.ШаблонПроводки = ШаблоныПроводокСубконтоКТ.Ссылка
	|			И ДанныеБУ_ШаблонПроводок.ВидСубконтоКт1 = ШаблоныПроводокСубконтоКТ.ТипСубконто
	|ГДЕ
	|	НЕ ШаблоныПроводокСубконтоКТ.ТипСубконто ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеБУ_ШаблонПроводок.СубконтоКт2,
	|	ШаблоныПроводокСубконтоКТ.Выражение,
	|	ШаблоныПроводокСубконтоКТ.ТипКАУ,
	|	ШаблоныПроводокСубконтоКТ.ТипЗначенияКАУ,
	|	ШаблоныПроводокСубконтоКТ.ТипСубконто,
	|	ШаблоныПроводокСубконтоКТ.НомерСтроки,
	|	ЛОЖЬ,
	|	ДанныеБУ_ШаблонПроводок.Индекс,
	|	ДанныеБУ_ШаблонПроводок.ВалютнаяСуммаКт,
	|	ДанныеБУ_ШаблонПроводок.ВалютнаяСуммаДт,
	|	ДанныеБУ_ШаблонПроводок.КоличествоКт,
	|	ДанныеБУ_ШаблонПроводок.КоличествоДт,
	|	ДанныеБУ_ШаблонПроводок.Сумма
	|ИЗ
	|	ДанныеБУ_ШаблонПроводок КАК ДанныеБУ_ШаблонПроводок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СинхронизацияГалактикаВыгрузкаШаблоныПроводок.СубконтоКТ КАК ШаблоныПроводокСубконтоКТ
	|		ПО ДанныеБУ_ШаблонПроводок.ШаблонПроводки = ШаблоныПроводокСубконтоКТ.Ссылка
	|			И ДанныеБУ_ШаблонПроводок.ВидСубконтоКт2 = ШаблоныПроводокСубконтоКТ.ТипСубконто
	|ГДЕ
	|	НЕ ШаблоныПроводокСубконтоКТ.ТипСубконто ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеБУ_ШаблонПроводок.СубконтоКт3,
	|	ШаблоныПроводокСубконтоКТ.Выражение,
	|	ШаблоныПроводокСубконтоКТ.ТипКАУ,
	|	ШаблоныПроводокСубконтоКТ.ТипЗначенияКАУ,
	|	ШаблоныПроводокСубконтоКТ.ТипСубконто,
	|	ШаблоныПроводокСубконтоКТ.НомерСтроки,
	|	ЛОЖЬ,
	|	ДанныеБУ_ШаблонПроводок.Индекс,
	|	ДанныеБУ_ШаблонПроводок.ВалютнаяСуммаКт,
	|	ДанныеБУ_ШаблонПроводок.ВалютнаяСуммаДт,
	|	ДанныеБУ_ШаблонПроводок.КоличествоКт,
	|	ДанныеБУ_ШаблонПроводок.КоличествоДт,
	|	ДанныеБУ_ШаблонПроводок.Сумма
	|ИЗ
	|	ДанныеБУ_ШаблонПроводок КАК ДанныеБУ_ШаблонПроводок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СинхронизацияГалактикаВыгрузкаШаблоныПроводок.СубконтоКТ КАК ШаблоныПроводокСубконтоКТ
	|		ПО ДанныеБУ_ШаблонПроводок.ШаблонПроводки = ШаблоныПроводокСубконтоКТ.Ссылка
	|			И ДанныеБУ_ШаблонПроводок.ВидСубконтоКт3 = ШаблоныПроводокСубконтоКТ.ТипСубконто
	|ГДЕ
	|	НЕ ШаблоныПроводокСубконтоКТ.ТипСубконто ЕСТЬ NULL 
	|ИТОГИ ПО
	|	Индекс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеБУ_ШаблонПроводок.СчетДт,
	|	ДанныеБУ_ШаблонПроводок.СчетКт,
	|	ДанныеБУ_ШаблонПроводок.Организация,
	|	ДанныеБУ_ШаблонПроводок.СчетДебетаОтражение,
	|	ДанныеБУ_ШаблонПроводок.СчетКредитаОтражение,
	|	ДанныеБУ_ШаблонПроводок.Период,
	|	ДанныеБУ_ШаблонПроводок.Регистратор.Дата,
	|	ДанныеБУ_ШаблонПроводок.Регистратор.Номер,
	|	ДанныеБУ_ШаблонПроводок.ПодразделениеДт,
	|	ДанныеБУ_ШаблонПроводок.ПодразделениеКт,
	|	ДанныеБУ_ШаблонПроводок.СубСчетДебетаОтражение,
	|	ДанныеБУ_ШаблонПроводок.СубСчетКредитаОтражение
	|ИЗ
	|	ДанныеБУ_ШаблонПроводок КАК ДанныеБУ_ШаблонПроводок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СинхронизацияГалактикаВыгрузкаШаблоныПроводок.СубконтоДТ КАК ШаблоныПроводокДТ
	|		ПО ДанныеБУ_ШаблонПроводок.ШаблонПроводки = ШаблоныПроводокДТ.Ссылка
	|ГДЕ
	|	НЕ ШаблоныПроводокДТ.ТипСубконто ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор.Ссылка);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();

	ШапкаДокумента =  РезультатЗапроса[4].Выгрузить();
	ТаблицаСубконто =  РезультатЗапроса[3].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Не ШапкаДокумента.Количество()=1 Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	//по задумке автора в запросе будет регистратор, значит проводки подчинены только одному документу
	
	ТекСтрока = ШапкаДокумента[0];
	
	ШапкаПроводки = Новый Структура;
	
	ШапкаПроводки.Вставить("KODSPK", ПолучитьЗначениеГалактика(ТекСтрока.ПодразделениеКт));
	ШапкаПроводки.Вставить("KODSPO", ПолучитьЗначениеГалактика(ТекСтрока.ПодразделениеДт));
	ШапкаПроводки.Вставить("DBSCHETO", ТекСтрока.СчетДебетаОтражение);
	ШапкаПроводки.Вставить("KRSCHETK", ТекСтрока.СчетКредитаОтражение);
	ШапкаПроводки.Вставить("NODOK", ТекСтрока.РегистраторНомер);
	ШапкаПроводки.Вставить("DATOB", ТекСтрока.РегистраторДата);
	ШапкаПроводки.Вставить("DATAOT", ТекСтрока.РегистраторДата);
	ШапкаПроводки.Вставить("TIDK", "10");
	ШапкаПроводки.Вставить("TIDKGAL", "");
	ШапкаПроводки.Вставить("SUBOSSCH", ТекСтрока.СубСчетДебетаОтражение);
	ШапкаПроводки.Вставить("SUBSCHK", ТекСтрока.СубСчетКредитаОтражение);
	                          
	ШапкаПроводки.Вставить("KAUOS1", ДвоичныеДанные());
	ШапкаПроводки.Вставить("KAUOS2", ДвоичныеДанные());
	ШапкаПроводки.Вставить("KAUOS3", ДвоичныеДанные());
	ШапкаПроводки.Вставить("KAUOS4", ДвоичныеДанные());
	ШапкаПроводки.Вставить("KAUOS5", ДвоичныеДанные());
	ШапкаПроводки.Вставить("KAUOS6", ДвоичныеДанные());
	
	ШапкаПроводки.Вставить("KAUKS1", ДвоичныеДанные());
	ШапкаПроводки.Вставить("KAUKS2", ДвоичныеДанные());
	ШапкаПроводки.Вставить("KAUKS3", ДвоичныеДанные());
	ШапкаПроводки.Вставить("KAUKS4", ДвоичныеДанные());
	ШапкаПроводки.Вставить("KAUKS5", ДвоичныеДанные());
	ШапкаПроводки.Вставить("KAUKS6", ДвоичныеДанные());
	ШапкаПроводки.Вставить("CED", ДвоичныеДанные());
	
	
	ШапкаПроводки.Вставить("SUMOB", 0);
	ШапкаПроводки.Вставить("SUMVALUT", 0);
	ШапкаПроводки.Вставить("KOL", 0);
	ШапкаПроводки.Вставить("SODPR", "");
	ШапкаПроводки.Вставить("VHPROP", "");
	
	Для Каждого ТекИндекс Из ТаблицаСубконто.Строки Цикл
		
		Проводка = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(ШапкаПроводки));
		
		Для Каждого ТекСтрока Из ТекИндекс.Строки Цикл
			
			РезультатВыполнения = Неопределено;
			
			Попытка
				
				Выполнить(ТекСтрока.Выражение);
				
			Исключение
				
				Сообщить(ОписаниеОшибки());
				
				Продолжить;
				
			КонецПопытки;
			
			ЗначениеДляВставки = ПолучитьЗначениеГалактика(РезультатВыполнения);
			
			ИмяПоляЗначения = "KAUKS";
			//ИмяПоляТип = "TBLKS";
			
			Если ТекСтрока.Дебет Тогда 
				
				ИмяПоляЗначения = "KAUOS";
				//ИмяПоляТип = "TBLOS";
				
			КонецЕсли;
			
			Инд = Перечисления.СинхронизацияГалактикаВыгрузкаТипЗначенияКАУ.Индекс(ТекСтрока.ТипЗначенияКАУ);
			
			Проводка.Вставить(ИмяПоляЗначения+Строка(Инд+1), ЗначениеДляВставки); 
			//Проводка.Вставить(ИмяПоляТип+Строка(Инд), Инд); 
			
		КонецЦикла;
		
		Проводка.Вставить("KOL", ТекСтрока.КоличествоДт);
		Проводка.Вставить("SUMOB", ТекСтрока.Сумма);
		
		//инсерт
		//	@NRECPLPOR binary(8),
		//	@DESGR varchar(4),
		//	@DBSCHETO varchar(20),
		//	@SUBOSSCH varchar(21), 
		//	@KAUOS#1# binary(8) ,
		//	@KAUOS#2# binary(8) ,
		//	@KAUOS#3# binary(8) ,
		//	@KAUOS#4# binary(8) ,
		//	@KAUOS#5# binary(8) ,
		//	@KAUOS#6# binary(8) ,
		//	@KODSPO binary(8) , 
		//	@KRSCHETK varchar(20),	
		//	@SUBSCHK varchar(21) ,
		//	@KAUKS#1# binary(8) ,
		//	@KAUKS#2# binary(8) ,
		//	@KAUKS#3# binary(8) , 
		//	@KAUKS#4# binary(8) , 
		//	@KAUKS#5# binary(8) ,
		//	@KAUKS#6# binary(8) , 
		//	@KODSPK binary(8) , 
		//	@DATOB date ,
		//	@DATAOT date ,  
		//	@SUMOB decimal(24, 8) ,
		//	@SUMVALUT decimal(24, 8) ,
		//	@KODVALUT binary(8) , 
		//	@KOL decimal(24, 8) ,
		//	@CED binary(8) , 
		//	@SODPR varchar(80) , 
		//	@VHPROP varchar(1) 	
		
		Попытка
			
			ВнешниеИсточникиДанных.ГалактикаБД.__INSERT_RECORD_OBOROT(
			
			ДвоичныеДанные(СтруктураВставки.УникальныйИдентификаторПриемника),
			СтруктураВставки.DESGR,
			Проводка.DBSCHETO,
			Проводка.SUBOSSCH, 
			Проводка.KAUOS1,
			Проводка.KAUOS2,
			Проводка.KAUOS3,
			Проводка.KAUOS4,
			Проводка.KAUOS5,
			Проводка.KAUOS6,
			Проводка.KODSPO, 
			Проводка.KRSCHETK,	
			Проводка.SUBSCHK,
			Проводка.KAUKS1,
			Проводка.KAUKS2,
			Проводка.KAUKS3, 
			Проводка.KAUKS4, 
			Проводка.KAUKS5,
			Проводка.KAUKS6, 
			Проводка.KODSPK, 
			Проводка.DATOB,
			Проводка.DATAOT,  
			Проводка.SUMOB ,
			Проводка.SUMVALUT,
			ДвоичныеДанные(СтруктураВставки._kval), 
			Проводка.KOL,
			Проводка.CED, 
			Проводка.SODPR, 
			Проводка.VHPROP
			
			);
			
		Исключение
			
			ТекстОшибки = ОписаниеОшибки();
			
			Стек = "ОШИБКА ВСТАВКИ ПРОВОДКИ" + Строка(Регистратор);
			
			СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек);
			
			Продолжить;
			
		КонецПопытки;
		
		СтруктураВставки.Вставить("Событие", "Добавление");
		
		СинхронизацияГалактикаОбщегоНазначения.ЗаписатьЛог(СтруктураВставки, "tran_");
		
		Проводка = Неопределено;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РегламентноеПолучениеДанныхВГалактика1() Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры

#КонецОбласти