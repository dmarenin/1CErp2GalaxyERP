Функция ПолучитьАмортизационнуюГруппуОС(ТекЗнач) Экспорт
	
	АмортГруппа = Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа;
	
	Если ТекЗнач = "Недолговечное имущество со сроком полезного использования от 1 года до 2 лет вкл" Тогда 
		АмортГруппа =  Перечисления.АмортизационныеГруппы.ПерваяГруппа;
	ИначеЕсли ТекЗнач = "Имущество со сроком полезного использования свыше 2 лет до 3 лет включительно" Тогда 
		АмортГруппа =  Перечисления.АмортизационныеГруппы.ВтораяГруппа;
	ИначеЕсли ТекЗнач = "Имущество со сроком полезного использования свыше 3 лет до 5 лет включительно" Тогда 
		АмортГруппа =  Перечисления.АмортизационныеГруппы.ТретьяГруппа;
	ИначеЕсли ТекЗнач = "Имущество со сроком полезного использования свыше 5 лет до 7 лет включительно" Тогда 
		АмортГруппа =  Перечисления.АмортизационныеГруппы.ЧетвертаяГруппа;
	ИначеЕсли ТекЗнач = "Имущество со сроком полезного использования свыше 7 лет до 10 лет включительно" Тогда 
		АмортГруппа =  Перечисления.АмортизационныеГруппы.ПятаяГруппа;
	ИначеЕсли ТекЗнач = "Имущество со сроком полезного использования свыше 10 лет до 15 лет включительно" Тогда 
		АмортГруппа =  Перечисления.АмортизационныеГруппы.ШестаяГруппа;
	ИначеЕсли ТекЗнач = "Имущество со сроком полезного использования свыше 15 лет до 20 лет включительно" Тогда 
		АмортГруппа =  Перечисления.АмортизационныеГруппы.СедьмаяГруппа;
	ИначеЕсли ТекЗнач = "Имущество со сроком полезного использования свыше 20 лет до 25 лет включительно" Тогда 
		АмортГруппа =  Перечисления.АмортизационныеГруппы.ВосьмаяГруппа;
	ИначеЕсли ТекЗнач = "Имущество со сроком полезного использования свыше 25 лет до 30 лет включительно" Тогда 
		АмортГруппа =  Перечисления.АмортизационныеГруппы.ДевятаяГруппа;
	ИначеЕсли ТекЗнач = "Имущество со сроком полезного использования свыше 30 лет" Тогда 	
		АмортГруппа =  Перечисления.АмортизационныеГруппы.ДесятаяГруппа;
	КонецЕсли;
	
	Возврат АмортГруппа;
	
КонецФункции

Функция ПолучитьСчетУчетаПоСчетуАмортизацииОС(Код) Экспорт
	
	СчетУчета = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	
	Если Код = "02.01" Тогда 
		СчетУчета =ПланыСчетов.Хозрасчетный.НайтиПоКоду("01.01");
	ИначеЕсли Код = "02.02" Тогда
		СчетУчета =ПланыСчетов.Хозрасчетный.НайтиПоКоду("03.01");
	ИначеЕсли Код = "02.03" Тогда
		СчетУчета =ПланыСчетов.Хозрасчетный.НайтиПоКоду("01.03");
	ИначеЕсли Код = "02.04" Тогда
		СчетУчета =ПланыСчетов.Хозрасчетный.НайтиПоКоду("01.08");
	ИначеЕсли Код = "02.05" Тогда
		СчетУчета =ПланыСчетов.Хозрасчетный.НайтиПоКоду("01.06");
	КонецЕсли;
	
	Возврат СчетУчета;
	
КонецФункции

Функция ПолучитьГруппуОС(КодГруппы) Экспорт
	
	Результат = Перечисления.ГруппыОС.ДругиеВидыОсновныхСредств;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеГруппАмортизации.Ссылка
	|ИЗ
	|	РегистрСведений.СоответствиеГруппАмортизации КАК СоответствиеГруппАмортизации
	|ГДЕ
	|	СоответствиеГруппАмортизации.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", СокрЛП(КодГруппы));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат Результат;
	КонецЕсли;
	
	ТЗ = РезультатЗапроса.Выгрузить();
	
	Возврат ТЗ[0].Ссылка;
	
КонецФункции

#Область ОсновныеСредства

Процедура ВыполнитьСозданиеОбъектовЭксплуатации(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Менеджер = Справочники.ОбъектыЭксплуатации;
	Индекс = 0;
	
	Попытка
		
		Для Сч = 1 По РазмерПроции Цикл
			
			ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
			
			Вариант = 1;
			
			ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
			
			Если ОбъектДляЗаписи = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			ОбъектДляЗаписи.Наименование = ТекСтрока.F_NAMEOS;
			ОбъектДляЗаписи.НаименованиеПолное = ТекСтрока.F_NAMEOS; 
			ОбъектДляЗаписи.Изготовитель = ТекСтрока.F_NAMEIZG;
			ОбъектДляЗаписи.ДатаВыпуска = ТекСтрока.F_GODV;
			ОбъектДляЗаписи.Модель = ТекСтрока.F_TIPMARK;
			ОбъектДляЗаписи.НомерПаспорта = ТекСтрока.F_PSNUM;
			ОбъектДляЗаписи.ЗаводскойНомер = ТекСтрока.F_ZAVNOM;
			
			Если Не СинхронизацияГалактикаОбщегоНазначения.ЭтоПустаяСсылка(ТекСтрока.F_CPODR) Тогда 
				
				ЭксплуатирующееПодразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CPODR, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока);  
				
				ОбъектДляЗаписи.ЭксплуатирующееПодразделение  = ЭксплуатирующееПодразделение;
				
			КонецЕсли;
			
			СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
			
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		РегистрыСведений.НеЗагруженныеОбъекты.ДобавитьЗаписьОНезагруженномОбъекте(ТекСтрока, ИмяТаблицы, Сч, ТекстОшибки);
		
		Стек = "ИМЯТАБЛИЦЫ: " + ИмяТаблицы + " ПОЛЕ: " + ТекСтрока.F_NREC + " Н: " +Строка(Сч) + " Е: " + Строка(РазмерПроции);
		
		СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек, ОбъектДляЗаписи);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьСозданиеОСИзНоменклатуры(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Менеджер = Справочники.ОбъектыЭксплуатации;
	Индекс = 0;
	
	Попытка
		
		Для Сч = 1 По РазмерПроции Цикл
			
			ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
			
			Вариант = 1;
			
			ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
			
			Если ОбъектДляЗаписи = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			ОбъектДляЗаписи.Наименование = ТекСтрока.F_NAME;
			ОбъектДляЗаписи.НаименованиеПолное = ТекСтрока.F_NAME; 
			ОбъектДляЗаписи.СерийныйНомер = ТекСтрока.F_BARKOD;
			
			ТекРодительСтрока = СокрЛП("Арендованные ОС");
			ТекРодитель = Справочники.ОбъектыЭксплуатации.НайтиПоНаименованию(ТекРодительСтрока, Истина);
			Если ТекРодитель.Пустая() Тогда 
				
				ТекРодитель = Справочники.ОбъектыЭксплуатации.СоздатьГруппу();
				
				ТекРодитель.Наименование = ТекРодительСтрока;
				ТекРодитель.ОбменДанными.Загрузка = Истина;
				ТекРодитель.Записать();
				
			КонецЕсли;
			ОбъектДляЗаписи.Родитель = ТекРодитель.Ссылка; 
			
			СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
			
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		РегистрыСведений.НеЗагруженныеОбъекты.ДобавитьЗаписьОНезагруженномОбъекте(ТекСтрока, ИмяТаблицы, Сч, ТекстОшибки);
		
		Стек = "ИМЯТАБЛИЦЫ: " + ИмяТаблицы + " ПОЛЕ: " + ТекСтрока.F_NREC + " Н: " +Строка(Сч) + " Е: " + Строка(РазмерПроции);
		
		СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек, ОбъектДляЗаписи);

	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область НМА

Процедура ВыполнитьСозданиеНематериальныхАктивов(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Менеджер = Справочники.НематериальныеАктивы;
	
	
	Попытка
		
		Для Сч = 1 По РазмерПроции Цикл
			
			Индекс = ?(Сч=1, ИндексНачала, Индекс+1);
			ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
			
			Вариант = 1;
			
			ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
			
			Если ОбъектДляЗаписи = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			ОбъектДляЗаписи.Код = ТекСтрока.F_INNUM;
			ОбъектДляЗаписи.Наименование = ТекСтрока.F_NAMEOS;
			ОбъектДляЗаписи.НаименованиеПолное = ТекСтрока.F_NAMEOS;
			
			СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
			
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		РегистрыСведений.НеЗагруженныеОбъекты.ДобавитьЗаписьОНезагруженномОбъекте(ТекСтрока, ИмяТаблицы, Сч, ТекстОшибки);
		
		Стек = "ИМЯТАБЛИЦЫ: " + ИмяТаблицы + " ПОЛЕ: " + ТекСтрока.F_NREC + " Н: " +Строка(Сч) + " Е: " + Строка(РазмерПроции);
		
		СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек, ОбъектДляЗаписи);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область МОЛ                

Процедура ВыполнитьСозданиеМОЛ(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Менеджер = Справочники.ФизическиеЛица;
	
	
	Попытка
		
		Для Сч = 1 По РазмерПроции Цикл
			
			Индекс = ?(Сч=1, ИндексНачала, Индекс+1);
			ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
			
			Вариант = 1;
			
			ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
			
			Если ОбъектДляЗаписи = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			ОбъектДляЗаписи.ФИО = ТекСтрока.F_NAME;
			ОбъектДляЗаписи.Наименование = ТекСтрока.F_NAME;
			ОбъектДляЗаписи.НаименованиеСлужебное = ТекСтрока.F_NAME;
			
			СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
			
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		РегистрыСведений.НеЗагруженныеОбъекты.ДобавитьЗаписьОНезагруженномОбъекте(ТекСтрока, ИмяТаблицы, Сч, ТекстОшибки);
		
		Стек = "ИМЯТАБЛИЦЫ: " + ИмяТаблицы + " ПОЛЕ: " + ТекСтрока.F_NREC + " Н: " +Строка(Сч) + " Е: " + Строка(РазмерПроции);
		
		СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек, ОбъектДляЗаписи);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ДокументыПоОС

Функция ПолучитьМенеджерОСПоТипуОперации(ТекСтрока, СтруктураАналитики)
	 //1-Поступление
	 //2-Внутреннее перемещение
	 //3-Изменение стоимости
	 //4-Выбытие
	 //5-Амортизация
	 //6-Переоценка
	 //7-Изменение группы, вида
	 //9-Изменение параметров)
	 
	 Менеджер = Неопределено;
	 
	 Если Строка(ТекСтрока.F_TIPDOC) = "15" Тогда  
		 
		 МенеджерСтрока = ПолучитьМенеджерОС(ТекСтрока, СтруктураАналитики);
		 
		 Если МенеджерСтрока = Неопределено Тогда 
			 
			 Если Строка(ТекСтрока.F_SYSOPER) = "1" Тогда 
				 Менеджер = Документы.ПринятиеКУчетуОС;
			 ИначеЕсли Строка(ТекСтрока.F_SYSOPER) = "2" Тогда
				 Менеджер = Документы.ПеремещениеОС;
			 ИначеЕсли Строка(ТекСтрока.F_SYSOPER) = "3" Тогда
				 Менеджер = Документы.ПереоценкаОС;
			 ИначеЕсли Строка(ТекСтрока.F_SYSOPER) = "4" Тогда
				 Менеджер = Документы.СписаниеОС;
			 ИначеЕсли Строка(ТекСтрока.F_SYSOPER) = "5" Тогда
			 ИначеЕсли Строка(ТекСтрока.F_SYSOPER) = "7" Тогда
				 Менеджер = Документы.ИзменениеПараметровОС;	
			 ИначеЕсли Строка(ТекСтрока.F_SYSOPER) = "9" Тогда
				 Менеджер = Документы.ИзменениеПараметровОС;	
			 КонецЕсли;
			 
			 Если СинхронизацияГалактикаОбщегоНазначения.ЭтоПустаяСсылка(ТекСтрока.F_CHOZOPER) Тогда 
				 Менеджер = Документы.ИзменениеПараметровОС;	
			 КонецЕсли;
			 
		 Иначе
			Менеджер = Документы[МенеджерСтрока];
		 КонецЕсли;
		 
	 КонецЕсли;
	 
	 Возврат Менеджер;
	 
 КонецФункции
 
Функция ПолучитьМенеджерОС(ТекСтрока, СтруктураАналитики)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоответствиеХозОпер.Менеджер.Наименование КАК Менеджер,
		|	СоответствиеХозОпер.Операция,
		|	СоответствиеХозОпер.Аналитика
		|ИЗ
		|	РегистрСведений.СоответствиеХозОпер КАК СоответствиеХозОпер
		|ГДЕ
		|	СоответствиеХозОпер.F_TIPDOC = &F_TIPDOC
		|	И СоответствиеХозОпер.F_SYSOPER = &F_SYSOPER
		|	И СоответствиеХозОпер.F_NREC = &F_NREC";
	
	Запрос.УстановитьПараметр("F_NREC", ТекСтрока.F_CHOZOPER);
	Запрос.УстановитьПараметр("F_SYSOPER", Строка(ТекСтрока.F_SYSOPER));
	Запрос.УстановитьПараметр("F_TIPDOC", Строка(ТекСтрока.F_TIPDOC));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() = 0 Тогда 
		Возврат Неопределено;
	Иначе
		
		СтруктураАналитики = новый Структура;
		
		СтруктураАналитики.Вставить("Операция", РезультатЗапроса[0].Операция);
		СтруктураАналитики.Вставить("Аналитика",РезультатЗапроса[0].Аналитика);
		
		Возврат РезультатЗапроса[0].Менеджер;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеОПокупкеОС(ТекСтрока)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.F_NREC,
	|	dbo_T_OBOROT.F_SUBSCHK КАК СчетКТ,
	|	dbo_T_OBOROT.F_SUBOSSCH КАК СубСчетДТ,
	|	dbo_T_OBOROT.F_DBSCHETO КАК СчетДТ,
	|	dbo_T_OBOROT.F_KRSCHETK КАК СубСчетКТ,
	|	dbo_T_KLASSOS.F_NAME КАК АмортизационнаяГруппа,
	|	dbo_T_KLASSOS.F_KOD,
	|	dbo_T_VIDNORMA.F_KOD КАК ГруппаОС,
	|	dbo_T_KATOS.F_CVID,
	|	dbo_T_KODOF.F_KOD_OF,
	|	BD_TO_NVARCHAR(dbo_T_HOZOPER.F_NREC) КАК СатьяРасходовАмортизации,
	|	dbo_T_HOZOBOR.F_DBSCHETO КАК СчетРасходов,
	|	dbo_T_HOZOBOR.F_SUBOS КАК СубСчетРасходов,
	|	dbo_T_HOZOBOR.F_KRSCHETK КАК СчетАморт,
	|	dbo_T_HOZOBOR.F_SUBKS КАК СубСчетАморт
	|ИЗ
	|	(ВЫБРАТЬ
	|		dbo_T_SOPRHOZ.F_NREC КАК F_NREC
	|	ИЗ
	|		ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_SOPRHOZ КАК dbo_T_SOPRHOZ
	|	ГДЕ
	|		BD_TO_NVARCHAR(dbo_T_SOPRHOZ.F_CHOZOPER) = &F_CHOZOPER
	|		И BD_TO_NVARCHAR(dbo_T_SOPRHOZ.F_CSOPRDOC) = &F_CSOPRDOC) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_OBOROT КАК dbo_T_OBOROT
	|		ПО ВложенныйЗапрос.F_NREC = dbo_T_OBOROT.F_CSOPRHOZ
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			dbo_T_SPKATOS.F_NREC КАК F_NREC,
	|			dbo_T_SPKATOS.F_CNASTROS КАК F_CNASTROS,
	|			dbo_T_SPKATOS.F_CKATOS КАК F_CKATOS,
	|			dbo_T_SPKATOS.F_CHOZOPER КАК F_CHOZOPER,
	|			dbo_T_SPKATOS.F_SROKISP КАК F_SROKISP,
	|			dbo_T_SPKATOS.F_STOIM КАК F_STOIM,
	|			dbo_T_SPKATOS.F_SUMIZN КАК F_SUMIZN,
	|			dbo_T_SPKATOS.F_SIZNM КАК F_SIZNM,
	|			dbo_T_SPKATOS.F_SUMOTKL КАК F_SUMOTKL,
	|			dbo_T_SPKATOS.F_STOIMPS КАК F_STOIMPS,
	|			dbo_T_SPKATOS.F_IZNOSPS КАК F_IZNOSPS,
	|			dbo_T_SPKATOS.F_SUMFLD КАК F_SUMFLD,
	|			dbo_T_SPKATOS.F_STOIML КАК F_STOIML,
	|			dbo_T_SPKATOS.F_POPRKOEF КАК F_POPRKOEF,
	|			dbo_T_SPKATOS.F_CNORMA КАК F_CNORMA,
	|			dbo_T_SPKATOS.F_CMETOD КАК F_CMETOD,
	|			dbo_T_SPKATOS.F_CISP КАК F_CISP,
	|			dbo_T_SPKATOS.F_CVAL КАК F_CVAL,
	|			dbo_T_SPKATOS.F_ISPPS КАК F_ISPPS,
	|			dbo_T_SPKATOS.F_ISPCUR КАК F_ISPCUR,
	|			dbo_T_SPKATOS.F_CGRAM КАК F_CGRAM,
	|			dbo_T_SPKATOS.F_CRESERV КАК F_CRESERV,
	|			dbo_T_SPKATOS.F_WRESERV КАК F_WRESERV,
	|			dbo_T_SPKATOS.F_DBRESERV КАК F_DBRESERV,
	|			dbo_T_SPKATOS.F_DTRESERV КАК F_DTRESERV,
	|			dbo_T_SPKATOS.F_PERSTOIM КАК F_PERSTOIM,
	|			dbo_T_SPKATOS.F_PERSUMIZN КАК F_PERSUMIZN
	|		ИЗ
	|			ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_SPKATOS КАК dbo_T_SPKATOS
	|		ГДЕ
	|			BD_TO_NVARCHAR(dbo_T_SPKATOS.F_CKATOS) = &F_CKATOS) КАК _T_SPKATOS
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KLASSOS КАК dbo_T_KLASSOS
	|			ПО _T_SPKATOS.F_CGRAM = dbo_T_KLASSOS.F_NREC
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KATOS КАК dbo_T_KATOS
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_VIDNORMA КАК dbo_T_VIDNORMA
	|				ПО dbo_T_KATOS.F_CVID = dbo_T_VIDNORMA.F_NREC
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KODOF КАК dbo_T_KODOF
	|				ПО dbo_T_KATOS.F_COKOF = dbo_T_KODOF.F_NREC
	|			ПО _T_SPKATOS.F_CKATOS = dbo_T_KATOS.F_NREC
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_HOZOPER КАК dbo_T_HOZOPER
	|			ПО _T_SPKATOS.F_CHOZOPER = dbo_T_HOZOPER.F_NREC
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_HOZOBOR КАК dbo_T_HOZOBOR
	|			ПО _T_SPKATOS.F_CHOZOPER = dbo_T_HOZOBOR.F_CHOZOPER
	|		ПО (ИСТИНА)";
	
	Запрос.УстановитьПараметр("F_CHOZOPER", ТекСтрока.F_CHOZOPER);
	Запрос.УстановитьПараметр("F_CSOPRDOC", ТекСтрока.F_CSOPRDOC);
	Запрос.УстановитьПараметр("F_CKATOS", ТекСтрока.F_CKATOS);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса[0];	
	
КонецФункции

Функция ПолучитьДанныеОПродажеОС(ТекСтрока)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.F_NREC,
	|	ВложенныйЗапрос.F_CDOGOVOR,
	|	ВложенныйЗапрос.F_SUMMA,
	|	ВложенныйЗапрос.F_CSCHFACT,
	|	ВложенныйЗапрос.F_CORG
	|ИЗ
	|	(ВЫБРАТЬ
	|		dbo_T_SOPRHOZ.F_NREC КАК F_NREC,
	|		dbo_T_SOPRHOZ.F_CDOGOVOR КАК F_CDOGOVOR,
	|		dbo_T_SOPRHOZ.F_SUMMA КАК F_SUMMA,
	|		dbo_T_SOPRHOZ.F_CSCHFACT КАК F_CSCHFACT,
	|		dbo_T_SOPRHOZ.F_CORG КАК F_CORG
	|	ИЗ
	|		ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_SOPRHOZ КАК dbo_T_SOPRHOZ
	|	ГДЕ
	|		BD_TO_NVARCHAR(dbo_T_SOPRHOZ.F_CHOZOPER) = &F_CHOZOPER
	|		И BD_TO_NVARCHAR(dbo_T_SOPRHOZ.F_CSOPRDOC) = &F_CSOPRDOC) КАК ВложенныйЗапрос";
	
	
	Запрос.УстановитьПараметр("F_CHOZOPER", ТекСтрока.F_CHOZOPER);
	Запрос.УстановитьПараметр("F_CSOPRDOC", ТекСтрока.F_CSOPRDOC);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса[0];	
	
КонецФункции

Функция ПолучитьДанныеОИзмененииПараметровОС(ТекСтрока)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	dbo_T_OSCHGPAR.F_WTYPE,
	|	dbo_T_OSCHGPAR.F_CMOVEOS,
	|	dbo_T_OSCHGPAR.F_CKATOS,
	|	dbo_T_OSCHGPAR.F_PARCODE,
	|	dbo_T_OSCHGPAR.F_CVALUE,
	|	dbo_T_OSCHGPAR.F_DVALUE,
	|	dbo_T_HOZOPER.F_NAME1 КАК F_NAME,
	|	dbo_T_HOZOPER.F_NREC СатьяРасходовАмортизации
	|ИЗ
	|	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_OSCHGPAR КАК dbo_T_OSCHGPAR
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_HOZOPER КАК dbo_T_HOZOPER
	|		ПО dbo_T_OSCHGPAR.F_CVALUE = dbo_T_HOZOPER.F_NREC
	|ГДЕ
	|	BD_TO_NVARCHAR(dbo_T_OSCHGPAR.F_CMOVEOS) = &F_CMOVEOS
	|	И BD_TO_NVARCHAR(dbo_T_OSCHGPAR.F_CNASTROS) = ""0x8000000000000003""
	|	И dbo_T_OSCHGPAR.F_WTYPE = 2";
	
	Запрос.УстановитьПараметр("F_CMOVEOS", ТекСтрока.F_CMOVEOS);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура ВыполнитьСозданиеДокументовОС(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Вариант = 3;
	Индекс = 0;
	
	Организация = Справочники.Организации.ПустаяСсылка();
	
	ОрганизацияЗапись = СтатическиеДанные.Найти("ОРГАНИЗАЦИЯ", "Реквизит");
	Если Не ОрганизацияЗапись = Неопределено Тогда 
		Организация = ОрганизацияЗапись.Значение;
	КонецЕсли;
	
	Валюта = Справочники.Валюты.ПустаяСсылка();
	
	ВалютаЗапись = СтатическиеДанные.Найти("ВАЛЮТАДОГОВОРОВ", "Реквизит");
	Если Не ВалютаЗапись = Неопределено Тогда 
		Валюта = ВалютаЗапись.Значение;
	КонецЕсли;	
	
	ОписаниеПоиска = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтандартноеОписаниеПоиска();
	
	ОписаниеПоиска.ИзменятьСуществующие = Ложь;
	
	Попытка
		
		Для Сч = 1 По РазмерПроции Цикл
			
			СтруктураАналитики = Неопределено;
			Менеджер = Неопределено;
			
			ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
			
			Менеджер = ПолучитьМенеджерОСПоТипуОперации(ТекСтрока, СтруктураАналитики);
			
			ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант, ОписаниеПоиска);
			
			Если ОбъектДляЗаписи = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			ОбъектДляЗаписи.Дата = ТекСтрока.Дата;
			ОбъектДляЗаписи.Комментарий = ТекСтрока.F_NODOC;
			ОбъектДляЗаписи.Организация = Организация;
			
			ОсновноеСредство = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CKATOS, "dbo_T_KATOS", "Объект эксплуатации", БлокировкиПотоков, НомерПотока);  
			
			СтрокаОС = ОбъектДляЗаписи.ОС.Добавить();
			
			СтрокаОС.ОсновноеСредство = ОсновноеСредство;
			
			Если ТипЗнч(Менеджер) = Тип("ДокументМенеджер.ПеремещениеОС") Тогда 
				
				ОбъектДляЗаписи.ОрганизацияПолучатель = Организация;
				
				Если Не СтруктураАналитики = Неопределено Тогда 
					
					ОбъектДляЗаписи.ХозяйственнаяОперация = СтруктураАналитики.Операция;
					
					ОбъектДляЗаписи.СтатьяРасходов= СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CHOZOPER, "dbo_T_HOZOPER", "Статья расходов", БлокировкиПотоков, НомерПотока); 
					
				Иначе
					
					ОбъектДляЗаписи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперацииРеглУчет.ПеремещениеОС;
					
				КонецЕсли;
				
				ОбъектДляЗаписи.Подразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_COLDPODR, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока);  
				ОбъектДляЗаписи.ПодразделениеПолучатель = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CNEWPODR, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока);  
				
				ОбъектДляЗаписи.МОЛ = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_COLDMOL, "dbo_T_KATMOL", "Физическое лицо", БлокировкиПотоков, НомерПотока);  
				ОбъектДляЗаписи.МОЛПолучатель = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CNEWMOL, "dbo_T_KATMOL", "Физическое лицо", БлокировкиПотоков, НомерПотока);  
				
			ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.СписаниеОС") Тогда
				
				Если Не СтруктураАналитики = Неопределено Тогда 
					
					ОбъектДляЗаписи.СтатьяРасходов= СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CHOZOPER, "dbo_T_HOZOPER", "Статья расходов", БлокировкиПотоков, НомерПотока); 
					
				КонецЕсли;
				
				ОбъектДляЗаписи.Подразделение = ОсновноеСредство.ЭксплуатирующееПодразделение;
				ОбъектДляЗаписи.СчетВыбытияОС = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
				
			ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.ПодготовкаКПередачеОС") Тогда
				
				ОбъектДляЗаписи.Подразделение = ОсновноеСредство.ЭксплуатирующееПодразделение;
				ОбъектДляЗаписи.Валюта = Валюта;
				
				ОбъектДляЗаписи.СчетВыбытияОС = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
				
				Если Не СтруктураАналитики = Неопределено Тогда 
					
					ОбъектДляЗаписи.СтатьяРасходов= СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CHOZOPER, "dbo_T_HOZOPER", "Статья расходов", БлокировкиПотоков, НомерПотока); 
					
				КонецЕсли;
				
				ОбъектДляЗаписи.ПередачаВыполнена = Истина;
				ОбъектДляЗаписи.ДатаПередачи = ОбъектДляЗаписи.Дата;
				
				ОбъектДляЗаписи.ЦенаВключаетНДС = Ложь;
				ОбъектДляЗаписи.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
				
				ДанныеОПродаже = ПолучитьДанныеОпродажеОС(ТекСтрока);
				
				Если Не ДанныеОПродаже = Неопределено Тогда 
					
					ОбъектДляЗаписи.Контрагент =  СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ДанныеОПродаже.F_CORG, "dbo_T_KATORG", "Контрагент", БлокировкиПотоков, НомерПотока); 
					ОбъектДляЗаписи.Партнер = ОбъектДляЗаписи.Контрагент.Партнер;
					
					СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
					СтрокаОС.СтавкаНДС = СтавкаНДС;
					СтрокаОС.Сумма = ДанныеОПродаже.F_SUMMA;
					
				Иначе
					
					ОбъектДляЗаписи.ПередачаВыполнена = Ложь;
					ОбъектДляЗаписи.ДатаПередачи = Неопределено;
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.ПринятиеКУчетуОС") Тогда
				
				ОбъектДляЗаписи.Подразделение = ОсновноеСредство.ЭксплуатирующееПодразделение;
				
				СтрокаОС.СтоимостьБУ = ТекСтрока.F_NEWSTOIM;
				СтрокаОС.СтоимостьНУ = ТекСтрока.F_NEWSTOIM;
				СтрокаОС.ИнвентарныйНомер = ТекСтрока.F_OLDINNUM;
				
				ДанныеОПокупке = ПолучитьДанныеОПокупкеОС(ТекСтрока);
				
				Если Не ДанныеОПокупке = Неопределено Тогда 
					
					F_KOD_OF = Лев(ДанныеОПокупке.F_KOD_OF, 2) + " "+ Сред(ДанныеОПокупке.F_KOD_OF, 3); 
					
					ОбъектДляЗаписи.КодПоОКОФ = Справочники.ОбщероссийскийКлассификаторОсновныхФондов.НайтиПоКоду(F_KOD_OF);
					
					ОбъектДляЗаписи.АмортизационнаяГруппа = ПолучитьАмортизационнуюГруппуОС(СокрЛП(ДанныеОПокупке.АмортизационнаяГруппа));
					ОбъектДляЗаписи.ГруппаОС = ПолучитьГруппуОС(ДанныеОПокупке.ГруппаОС);
					
					СчетУчета = ДанныеОПокупке.СчетДТ +  "."+ ДанныеОПокупке.СубСчетДТ;
					СчетАмортизации = ДанныеОПокупке.СчетАморт +  "."+ ДанныеОПокупке.СубСчетАморт;
					
					ОбъектДляЗаписи.СчетУчета = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСчет(СчетУчета);
					ОбъектДляЗаписи.СчетАмортизации = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСчет(СчетАмортизации);
					
					ОбъектДляЗаписи.СтатьяРасходов= СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ДанныеОПокупке.СатьяРасходовАмортизации, "dbo_T_HOZOPER", "Статья расходов", БлокировкиПотоков, НомерПотока); 
					
					ОбъектДляЗаписи.СрокИспользованияБУ = ДанныеОПокупке.F_SROKISP; 
					ОбъектДляЗаписи.СрокИспользованияНУ = ДанныеОПокупке.F_SROKISP; 
					
					ОбъектДляЗаписи.СпециальныйКоэффициентНУ = 1;
					
				КонецЕсли;
				
				ОбъектДляЗаписи.Местонахождение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_COLDPODR, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); 
				ОбъектДляЗаписи.МОЛ = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_COLDMOL, "dbo_T_KATMOL", "Физическое лицо", БлокировкиПотоков, НомерПотока); 
				ОбъектДляЗаписи.Подразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_COLDPODR, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); 
				
				ОбъектДляЗаписи.ПорядокУчетаБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации;
				ОбъектДляЗаписи.ПорядокУчетаНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации;
				
				ОбъектДляЗаписи.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный;
				
				ОбъектДляЗаписи.НачислятьАмортизациюНУ = Истина;
				ОбъектДляЗаписи.НачислятьАмортизациюБУ = Истина;
				
				ОбъектДляЗаписи.ВариантПримененияЦелевогоФинансирования = Перечисления.ВариантыПримененияЦелевогоФинансирования.НеИспользуется;
				
			ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.ПереоценкаОС") Тогда
				
				Продолжить;
				
			ИначеЕсли ТипЗнч(Менеджер) = Тип("ДокументМенеджер.ИзменениеПараметровОС") Тогда
				
				ДанныеОИзменении = ПолучитьДанныеоИзмененииПараметровОС(ТекСтрока);
				
				ИзмененыПараметры = Ложь;
				
				Для Каждого ТекСтрокаИзм Из ДанныеОИзменении Цикл 
					
					Если ТекСтрокаИзм.F_PARCODE = 4 Тогда 
						
						ОбъектДляЗаписи.ОтражениеАмортизационныхРасходовФлаг = Истина;
						
						СтрокаОАР = ОбъектДляЗаписи.ОтражениеАмортизационныхРасходов.Добавить();
						
						СтрокаОАР.Подразделение = ОсновноеСредство.ЭксплуатирующееПодразделение;
						СтрокаОАР.Коэффициент = 1;
						
						СтрокаОАР.СтатьяРасходов= СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрокаИзм.СатьяРасходовАмортизации, "dbo_T_HOZOPER", "Статья расходов", БлокировкиПотоков, НомерПотока); 
						
						ИзмененыПараметры = Истина;
						
					ИначеЕсли ТекСтрокаИзм.F_PARCODE = 3 Тогда 
						
						СрокПолезногоИспользования = ВнешниеИсточникиДанных.ГалактикаБД.BD_TO_INT(ТекСтрокаИзм.F_CVALUE);
						
						ОбъектДляЗаписи.СрокИспользованияБУ = СрокПолезногоИспользования;
						ОбъектДляЗаписи.СрокИспользованияБУФлаг = Истина;
						ОбъектДляЗаписи.СрокИспользованияНУ = СрокПолезногоИспользования;
						ОбъектДляЗаписи.СрокИспользованияНУФлаг = Истина;
						
						ИзмененыПараметры = Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если Не ИзмененыПараметры Тогда 
					Продолжить;
				КонецЕсли;
				
			Иначе
				Продолжить;
			Конецесли;
			
			СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
			
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		РегистрыСведений.НеЗагруженныеОбъекты.ДобавитьЗаписьОНезагруженномОбъекте(ТекСтрока, ИмяТаблицы, Сч, ТекстОшибки);
		
		Стек = "ИМЯТАБЛИЦЫ: " + ИмяТаблицы + " ПОЛЕ: " + ТекСтрока.F_NREC + " Н: " +Строка(Сч) + " Е: " + Строка(РазмерПроции);
		
		СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек, ОбъектДляЗаписи);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтрефейс

Процедура ДанныеИзВнешнихИсточников(ВариантПолучения, СтруктураУсловий, Запрос, Разделитель) Экспорт	
	
	ЭтоОтладка = Константы.СинхронизацияГалатикаОтладка.Получить();			
	
	Если ВариантПолучения="dbo_T_KATMC_OS" Или ВариантПолучения=Неопределено Тогда 
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	""dbo_T_KATMC_OS"" КАК Таблица,
		|	dbo_T_KATMC_OS.F_ATL_LASTDATE КАК F_ATL_LASTDATE,
		|	BD_TO_NVARCHAR(dbo_T_KATMC_OS.F_NREC) КАК F_NREC,
		|	dbo_T_KATMC_OS.F_NAME КАК F_NAME,
		|	dbo_T_KATMC_OS.F_BARKOD КАК F_BARKOD
		|ИЗ
		|	(ВЫБРАТЬ
		|		""dbo_T_KATMC_OS"" КАК Таблица,
		|		dbo_T_KATMC.F_ATL_LASTDATE КАК F_ATL_LASTDATE,
		|		dbo_T_KATMC.F_NREC КАК F_NREC,
		|		dbo_T_KATMC.F_NAME КАК F_NAME,
		|		dbo_T_KATMC.F_BARKOD КАК F_BARKOD
		|	ИЗ
		|		ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KATMC КАК dbo_T_KATMC) КАК dbo_T_KATMC_OS";
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
		
	Если ВариантПолучения="dbo_T_SPMOVEOS" Или ВариантПолучения=Неопределено Тогда 
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	""dbo_T_SPMOVEOS"" КАК Таблица,
		|	dbo_T_SPMOVEOS.F_NREC,
		|	dbo_T_SPMOVEOS.F_ATL_LASTDATE,
		|	dbo_T_SPMOVEOS.F_ATL_LASTTIME,
		|	dbo_T_SPMOVEOS.F_CKATOS,
		|	dbo_T_SPMOVEOS.F_DATOB,
		|	dbo_T_SPMOVEOS.F_TIPDOC,
		|	dbo_T_SPMOVEOS.F_SYSOPER,
		|	dbo_T_SPMOVEOS.F_NODOC,
		|	dbo_T_SPMOVEOS.F_CHOZOPER,
		|	dbo_T_SPMOVEOS.F_CHOZOPERН,
		|	dbo_T_SPMOVEOS.F_OLDSTOIM,
		|	dbo_T_SPMOVEOS.F_NEWSTOIM,
		|	dbo_T_SPMOVEOS.F_OLDSUMIZN,
		|	dbo_T_SPMOVEOS.F_NEWSUMIZN,
		|	dbo_T_SPMOVEOS.F_INNUM,
		|	dbo_T_SPMOVEOS.F_OLDINNUM,
		|	dbo_T_SPMOVEOS.F_COLDMOL,
		|	dbo_T_SPMOVEOS.F_CNEWMOL,
		|	dbo_T_SPMOVEOS.F_COLDPODR,
		|	dbo_T_SPMOVEOS.F_CNEWPODR,
		|	GET_DT(dbo_T_SPMOVEOS.F_DATOB, dbo_T_SPMOVEOS.F_ATL_LASTTIME) КАК Дата,
		|	dbo_T_SPMOVEOS.F_CSOPRDOC,
		|	dbo_T_SPMOVEOS.F_CMOVEOS
		|ИЗ
		|	(ВЫБРАТЬ
		|		BD_TO_NVARCHAR(dbo_T_SPMOVEOS.F_NREC) КАК F_NREC,
		|		dbo_T_SPMOVEOS.F_ATL_LASTDATE КАК F_ATL_LASTDATE,
		|		dbo_T_SPMOVEOS.F_ATL_LASTTIME КАК F_ATL_LASTTIME,
		|		BD_TO_NVARCHAR(dbo_T_SPMOVEOS.F_CKATOS) КАК F_CKATOS,
		|		dbo_T_SPMOVEOS.F_DATOB КАК F_DATOB,
		|		dbo_T_SPMOVEOS.F_TIPDOC КАК F_TIPDOC,
		|		dbo_T_SPMOVEOS.F_SYSOPER КАК F_SYSOPER,
		|		dbo_T_MOVEOS.F_NODOC КАК F_NODOC,
		|		BD_TO_NVARCHAR(dbo_T_SPMOVE.F_CHOZOPER) КАК F_CHOZOPER,
		|		dbo_T_HOZOPER.F_NAME1 КАК F_CHOZOPERН,
		|		dbo_T_SPMOVEOS.F_OLDSTOIM КАК F_OLDSTOIM,
		|		dbo_T_SPMOVEOS.F_NEWSTOIM КАК F_NEWSTOIM,
		|		dbo_T_SPMOVEOS.F_OLDSUMIZN КАК F_OLDSUMIZN,
		|		dbo_T_SPMOVEOS.F_NEWSUMIZN КАК F_NEWSUMIZN,
		|		dbo_T_SPMOVEOS.F_INNUM КАК F_INNUM,
		|		dbo_T_SPMOVEOS.F_OLDINNUM КАК F_OLDINNUM,
		|		BD_TO_NVARCHAR(dbo_T_MOVEOS.F_COLDMOL) КАК F_COLDMOL,
		|		BD_TO_NVARCHAR(dbo_T_MOVEOS.F_CNEWMOL) КАК F_CNEWMOL,
		|		BD_TO_NVARCHAR(dbo_T_MOVEOS.F_COLDPODR) КАК F_COLDPODR,
		|		BD_TO_NVARCHAR(dbo_T_MOVEOS.F_CNEWPODR) КАК F_CNEWPODR,
		|		BD_TO_NVARCHAR(dbo_T_SPMOVE.F_NREC) КАК F_CSOPRDOC,
		|		BD_TO_NVARCHAR(dbo_T_SPMOVEOS.F_CMOVEOS) КАК F_CMOVEOS
		|	ИЗ
		|		ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_SPMOVEOS КАК dbo_T_SPMOVEOS
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_MOVEOS КАК dbo_T_MOVEOS
		|			ПО dbo_T_SPMOVEOS.F_CMOVEOS = dbo_T_MOVEOS.F_NREC
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_SPMOVE КАК dbo_T_SPMOVE
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_HOZOPER КАК dbo_T_HOZOPER
		|				ПО dbo_T_SPMOVE.F_CHOZOPER = dbo_T_HOZOPER.F_NREC
		|			ПО dbo_T_SPMOVEOS.F_CSPMOVE = dbo_T_SPMOVE.F_NREC
		|	ГДЕ
		|		dbo_T_SPMOVEOS.F_DATOB >= START_DATE()
		|		И BD_TO_NVARCHAR(dbo_T_SPMOVEOS.F_CNASTROS) = ""0x8000000000000003""
		|		И НЕ dbo_T_SPMOVEOS.F_SYSOPER = 5) КАК dbo_T_SPMOVEOS";
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
	Если ВариантПолучения="dbo_T_KATOS" Или ВариантПолучения=Неопределено Тогда 
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	BD_TO_NVARCHAR(dbo_T_KATOS.F_NREC) КАК F_NREC,
		|	dbo_T_KATOS.F_NAMEOS,
		|	dbo_T_KATOS.F_INNUM,
		|	dbo_T_KATOS.F_PSNUM,
		|	dbo_T_KATOS.F_ZAVNOM,
		|	dbo_T_KATOS.F_NAMEIZG,
		|	dbo_T_KATOS.F_TIPMARK,
		|	dbo_T_KATOS.F_BARKOD,
		|	dbo_T_KATOS.F_KOD,
		|	dbo_T_KATOS.F_TIDK,
		|	dbo_T_KATOS.F_GODV,
		|	dbo_T_KATOS.F_ATL_LASTDATE,
		|	0 КАК F_id,
		|	""dbo_T_KATOS"" КАК Таблица,
		|	BD_TO_NVARCHAR(dbo_T_KATOS.F_CPODR) КАК F_CPODR
		|ИЗ
		|	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KATOS КАК dbo_T_KATOS";
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
	Если ВариантПолучения="dbo_T_KATOS_NMA" Или ВариантПолучения=Неопределено Тогда 
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	dbo_T_KATOS_NMA.F_NREC,
		|	dbo_T_KATOS_NMA.F_ATL_LASTDATE,
		|	dbo_T_KATOS_NMA.F_TIDK,
		|	dbo_T_KATOS_NMA.F_INNUM,
		|	dbo_T_KATOS_NMA.Таблица,
		|	dbo_T_KATOS_NMA.F_NAMEOS
		|ИЗ
		|	(ВЫБРАТЬ
		|		BD_TO_NVARCHAR(dbo_T_KATOS.F_NREC) КАК F_NREC,
		|		dbo_T_KATOS.F_ATL_LASTDATE КАК F_ATL_LASTDATE,
		|		dbo_T_KATOS.F_TIDK КАК F_TIDK,
		|		dbo_T_KATOS.F_INNUM КАК F_INNUM,
		|		""dbo_T_KATOS_NMA"" КАК Таблица,
		|		dbo_T_KATOS.F_NAMEOS КАК F_NAMEOS
		|	ИЗ
		|		ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KATOS КАК dbo_T_KATOS
		|	ГДЕ
		|		dbo_T_KATOS.F_TIDK = 16) КАК dbo_T_KATOS_NMA";
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;

	Если ВариантПолучения="dbo_T_KATMOL" Или ВариантПолучения=Неопределено Тогда 
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	""dbo_T_KATMOL"" КАК Таблица,
		|	BD_TO_NVARCHAR(dbo_T_KATMOL.F_NREC) F_NREC,
		|	dbo_T_KATMOL.F_ATL_LASTDATE,
		|	dbo_T_KATMOL.F_KOD,
		|	dbo_T_KATMOL.F_KOD_N,
		|	dbo_T_KATMOL.F_NAME
		|ИЗ
		|	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KATMOL КАК dbo_T_KATMOL";
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаданиеПоТаблице(ИмяТаблицы, НаборПараметров) Экспорт
	
	Задание = Неопределено;
	
	Если ИмяТаблицы = "dbo_T_KATOS" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаОСНМА.ВыполнитьСозданиеОбъектовЭксплуатации", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_KATOS_NMA" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаОСНМА.ВыполнитьСозданиеНематериальныхАктивов", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_SPMOVEOS" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаОСНМА.ВыполнитьСозданиеДокументовОС", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_KATMOL" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаОСНМА.ВыполнитьСозданиеМОЛ", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_KATMC_OS" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаОСНМА.ВыполнитьСозданиеОСИзНоменклатуры", НаборПараметров);
	КонецЕсли;
	
	Возврат Задание;
	
КонецФункции

#КонецОбласти