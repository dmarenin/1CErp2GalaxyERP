Функция ПолучитьКассуПоПодразделению(Подразделение) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоответствиеКассыПодразделениям.Касса
	|ИЗ
	|	РегистрСведений.СоответствиеКассыПодразделениям КАК СоответствиеКассыПодразделениям
	|ГДЕ
	|	СоответствиеКассыПодразделениям.СтруктураПредприятия В ИЕРАРХИИ(&Подразделение)";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.Касса;
	
КонецФункции

#Область СтатьиДС

Процедура ВыполнитьСозданиеСтатейДСИзТХО(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Менеджер = Справочники.СтатьиДвиженияДенежныхСредств;
	Индекс = 0;
	
	Попытка
		
		Для Сч = 1 По РазмерПроции Цикл
			
			ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
			
			Вариант = 1;
			
			ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
			
			Если ОбъектДляЗаписи = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			ОбъектДляЗаписи.Наименование = ТекСтрока.F_NAME1;
			ОбъектДляЗаписи.Описание = ТекСтрока.F_NAME2;
			ОбъектДляЗаписи.Код = ТекСтрока.F_CODE;
			
			СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
			
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		РегистрыСведений.НеЗагруженныеОбъекты.ДобавитьЗаписьОНезагруженномОбъекте(ТекСтрока, ИмяТаблицы, Сч, ТекстОшибки);
		
		Стек = "ИМЯТАБЛИЦЫ: " + ИмяТаблицы + " ПОЛЕ: " + ТекСтрока.F_NREC + " Н: " +Строка(Сч) + " Е: " + Строка(РазмерПроции);
		
		СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек, ОбъектДляЗаписи);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ДокументыПоКассе

Функция ПолучитьМенеджерДокументовПоКассеПоТипуОперации(ТекСтрока, СтруктураАналитики, ИмяТаблицы, Операция)
	
	МенеджерСтрока = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоответствиеХозОпер.Операция,
	|	СоответствиеХозОпер.Менеджер
	|ИЗ
	|	РегистрСведений.СоответствиеХозОпер КАК СоответствиеХозОпер
	|ГДЕ
	|	СоответствиеХозОпер.F_TIPDOC = &F_TIPDOC
	|	И СоответствиеХозОпер.ИмяТаблицы = &ИмяТаблицы
	|	И СоответствиеХозОпер.F_NREC = &F_NREC";
	
	Запрос.УстановитьПараметр("F_NREC", ТекСтрока.F_CHOZOPER);
	Запрос.УстановитьПараметр("F_TIPDOC", Строка(ТекСтрока.F_TIDKGAL));
	Запрос.УстановитьПараметр("ИмяТаблицы", ИмяТаблицы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		
		Если ТекСтрока.F_TIDKGAL = 8 Тогда 
			МенеджерСтрока = "РасходныйКассовыйОрдер";
		ИначеЕсли ТекСтрока.F_TIDKGAL = 7 Тогда 
			МенеджерСтрока = "ПриходныйКассовыйОрдер";
		ИначеЕсли ТекСтрока.F_TIDKGAL = 70 Тогда 
			МенеджерСтрока = "ОперацияБух";
		ИначеЕсли ТекСтрока.F_TIDKGAL = 9 Тогда 
			МенеджерСтрока = "АвансовыйОтчет";
		КонецЕсли;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Выборка.Следующий();
		
		МенеджерСтрока =  Выборка.Менеджер.Наименование;
		
		Операция = Выборка.Операция;
		
	КонецЕсли;
	
	Если МенеджерСтрока = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Менеджер = Документы[МенеджерСтрока];
	
	Возврат Менеджер;
	
КонецФункции

Функция ПолучитьДвижениеПоКассе(F_CSOPRDOC)
	
	Запрос = Новый Запрос;
	
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	dbo_T_OBOROT.F_CSOPRDOC,
	//|	dbo_T_OBOROT.F_CSOPRHOZ,
	//|	dbo_T_OBOROT.F_CHOZOPER,
	//|	dbo_T_OBOROT.F_SCHETO,
	//|	dbo_T_OBOROT.F_SUBOSSCH,
	//|	dbo_T_OBOROT.F_KAUOS_1_,
	//|	dbo_T_OBOROT.F_KAUOS_2_,
	//|	dbo_T_OBOROT.F_KAUOS_3_,
	//|	dbo_T_OBOROT.F_KODSPO,
	//|	dbo_T_OBOROT.F_SCHETK,
	//|	dbo_T_OBOROT.F_SUBSCHK,
	//|	dbo_T_OBOROT.F_KAUKS_1_,
	//|	dbo_T_OBOROT.F_KAUKS_2_,
	//|	dbo_T_OBOROT.F_KAUKS_3_,
	//|	dbo_T_OBOROT.F_KODSPK,
	//|	dbo_T_OBOROT.F_SUMOB,
	//|	dbo_T_OBOROT.F_SUMVALUT,
	//|	dbo_T_OBOROT.F_KODVALUT,
	//|	dbo_T_OBOROT.F_DBSCHETO,
	//|	dbo_T_OBOROT.F_KRSCHETK
	//|ИЗ
	//|	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_OBOROT КАК dbo_T_OBOROT
	//|ГДЕ
	//|	dbo_T_OBOROT.F_CSOPRDOC = &F_CSOPRDOC
	//|	И (dbo_T_OBOROT.F_SCHETK = ""450""
	//|			ИЛИ dbo_T_OBOROT.F_SCHETO = ""450"")";
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	dbo___V_OBOROT.F_CSOPRDOC,
	|	dbo___V_OBOROT.F_CSOPRHOZ,
	|	dbo___V_OBOROT.F_CHOZOPER,
	|	dbo___V_OBOROT.F_SCHETO,
	|	dbo___V_OBOROT.F_SUBOSSCH,
	|	dbo___V_OBOROT.F_KAUOS_1_,
	|	dbo___V_OBOROT.F_KAUOS_2_,
	|	dbo___V_OBOROT.F_KAUOS_3_,
	|	dbo___V_OBOROT.F_KODSPO,
	|	dbo___V_OBOROT.F_SCHETK,
	|	dbo___V_OBOROT.F_SUBSCHK,
	|	dbo___V_OBOROT.F_KAUKS_1_,
	|	dbo___V_OBOROT.F_KAUKS_2_,
	|	dbo___V_OBOROT.F_KAUKS_3_,
	|	dbo___V_OBOROT.F_KODSPK,
	|	dbo___V_OBOROT.F_SUMOB,
	|	dbo___V_OBOROT.F_SUMVALUT,
	|	dbo___V_OBOROT.F_KODVALUT,
	|	dbo___V_OBOROT.F_KRSCHETK,
	|	dbo___V_OBOROT.F_DBSCHETO
	|ИЗ
	|	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo___V_OBOROT КАК dbo___V_OBOROT
	|ГДЕ
	|	dbo___V_OBOROT.F_CSOPRDOC = &F_CSOPRDOC
	|	И (dbo___V_OBOROT.F_SCHETK = ""450""
	|			ИЛИ dbo___V_OBOROT.F_SCHETO = ""450"")";
	
	Запрос.УстановитьПараметр("F_CSOPRDOC", F_CSOPRDOC);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ПолучитьДвижениеВзаимозачетам(F_CSOPRDOC)
	
	Счета = Новый Массив;
	
	Счета.Добавить("476");
	Счета.Добавить("460");
	Счета.Добавить("462");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	dbo_T_OBOROT.F_CSOPRDOC,
	|	dbo_T_OBOROT.F_CSOPRHOZ,
	|	GET_DT(dbo_T_OBOROT.F_DATOB, dbo_T_OBOROT.F_ATL_LASTTIME) КАК Дата,
	|	dbo_T_OBOROT.F_CHOZOPER,
	|	dbo_T_OBOROT.F_SCHETO,
	|	dbo_T_OBOROT.F_SUBOSSCH,
	|	dbo_T_OBOROT.F_KAUOS_1_,
	|	dbo_T_OBOROT.F_KAUOS_2_,
	|	dbo_T_OBOROT.F_KAUOS_3_,
	|	dbo_T_OBOROT.F_KODSPO,
	|	dbo_T_OBOROT.F_SCHETK,
	|	dbo_T_OBOROT.F_SUBSCHK,
	|	dbo_T_OBOROT.F_KAUKS_1_,
	|	dbo_T_OBOROT.F_KAUKS_2_,
	|	dbo_T_OBOROT.F_KAUKS_3_,
	|	dbo_T_OBOROT.F_KODSPK,
	|	dbo_T_OBOROT.F_SUMOB,
	|	dbo_T_OBOROT.F_SUMVALUT,
	|	dbo_T_OBOROT.F_KODVALUT,
	|	dbo_T_OBOROT.F_DBSCHETO,
	|	dbo_T_OBOROT.F_KRSCHETK,
	|	dbo_T_OBOROT.F_DATOB
	|ИЗ
	|	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_OBOROT КАК dbo_T_OBOROT
	|ГДЕ
	|	dbo_T_OBOROT.F_CSOPRDOC = &F_CSOPRDOC
	|	И dbo_T_OBOROT.F_SCHETK В(&Счета)
	|	И dbo_T_OBOROT.F_SCHETO В(&Счета)
	|	И dbo_T_OBOROT.F_DATOB > 0";
	
	Запрос.УстановитьПараметр("F_CSOPRDOC", F_CSOPRDOC);
	Запрос.УстановитьПараметр("Счета", Счета);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ПолучитьДвижениеАвансовогоОтчета(F_CSOPRDOC)
	
	СчетаКТ = Новый Массив;
	
	СчетаКТ.Добавить("471");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	dbo_T_OBOROT.F_CSOPRDOC,
	|	dbo_T_OBOROT.F_CSOPRHOZ,
	|	GET_DT(dbo_T_OBOROT.F_DATOB, dbo_T_OBOROT.F_ATL_LASTTIME) КАК Дата,
	|	dbo_T_OBOROT.F_CHOZOPER,
	|	dbo_T_OBOROT.F_SCHETO,
	|	dbo_T_OBOROT.F_SUBOSSCH,
	|	dbo_T_OBOROT.F_KAUOS_1_,
	|	dbo_T_OBOROT.F_KAUOS_2_,
	|	dbo_T_OBOROT.F_KAUOS_3_,
	|	dbo_T_OBOROT.F_KODSPO,
	|	dbo_T_OBOROT.F_SCHETK,
	|	dbo_T_OBOROT.F_SUBSCHK,
	|	dbo_T_OBOROT.F_KAUKS_1_,
	|	dbo_T_OBOROT.F_KAUKS_2_,
	|	dbo_T_OBOROT.F_KAUKS_3_,
	|	dbo_T_OBOROT.F_KODSPK,
	|	dbo_T_OBOROT.F_SUMOB,
	|	dbo_T_OBOROT.F_SUMVALUT,
	|	dbo_T_OBOROT.F_KODVALUT,
	|	dbo_T_OBOROT.F_DBSCHETO,
	|	dbo_T_OBOROT.F_KRSCHETK,
	|	dbo_T_OBOROT.F_DATOB
	|ИЗ
	|	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_OBOROT КАК dbo_T_OBOROT
	|ГДЕ
	|	dbo_T_OBOROT.F_CSOPRDOC = &F_CSOPRDOC
	|	И dbo_T_OBOROT.F_SCHETK В(&СчетаКТ)
	|	И dbo_T_OBOROT.F_TIDKGAL = 9";
	
	Запрос.УстановитьПараметр("F_CSOPRDOC", F_CSOPRDOC);
	Запрос.УстановитьПараметр("СчетаКТ", СчетаКТ);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура ВыполнитьСозданиеДокументовПоКассе(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Вариант = 3;
	Индекс = 0;
	
	Организация = Справочники.Организации.ПустаяСсылка();
	
	ОрганизацияЗапись = СтатическиеДанные.Найти("ОРГАНИЗАЦИЯ", "Реквизит");
	Если Не ОрганизацияЗапись = Неопределено Тогда 
		Организация = ОрганизацияЗапись.Значение;
	КонецЕсли;
	
	Валюта = Справочники.Валюты.ПустаяСсылка();
	
	ВалютаЗапись = СтатическиеДанные.Найти("ВАЛЮТАДОГОВОРОВ", "Реквизит");
	Если Не ВалютаЗапись = Неопределено Тогда 
		Валюта = ВалютаЗапись.Значение;
	КонецЕсли;	
	
	Попытка
		
		Для Сч = 1 По РазмерПроции Цикл
			
			СтруктураАналитики = Неопределено;
			
			Менеджер = Неопределено;
			
			ОписаниеПоиска = Новый Структура;
			
			ОписаниеПоиска.Вставить("ИзменятьСуществующие", Истина);
			ОписаниеПоиска.Вставить("ПропускатьЕсли_Проведен", Истина);
			
			ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
			
			Операция = Неопределено;
			
			Менеджер = ПолучитьМенеджерДокументовПоКассеПоТипуОперации(ТекСтрока, СтруктураАналитики, ИмяТаблицы, Операция);
			
			ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант, ОписаниеПоиска);
			
			Если ОбъектДляЗаписи = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			//не обрабатываем проведенные документы
			
			//Если ОбъектДляЗаписи.Проведен Тогда 
			//	Продолжить;
			//КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТекСтрока.Дата) Тогда 
				
				СтрукутураЛога = Новый Структура;
				
				СтрукутураЛога.Вставить("Вид", "НеопределенноеПоведение");
				СтрукутураЛога.Вставить("Текст", "Не указана F_DATVIP: 323 Номер потока");
				СтрукутураЛога.Вставить("НомерПотока", НомерПотока);
				СтрукутураЛога.Вставить("ОбъектДляЗаписи", Строка(ОбъектДляЗаписи));
				СтрукутураЛога.Вставить("F_NREC", ТекСтрока.F_NREC);
				
				СинхронизацияГалактикаОбщегоНазначения.ЗаписатьЛог(СтрукутураЛога, "att_");
				
				Продолжить;
				
			КонецЕсли;

			//+Исправление
			//Если Не ОбъектДляЗаписи.Ссылка.Пустая() Тогда 
			//	
			//	//ОбъектДляЗаписи.ОбменДанными.Загрузка = Истина;
			//	
			//	ОбъектДляЗаписи.Дата =  ТекСтрока.Дата;
			//	ОбъектДляЗаписи.Записать();
			//	
			//	Продолжить;
			//	
			//КонецЕсли;
			//-Исправление
			
			ОбъектДляЗаписи.Дата =  ТекСтрока.Дата;
			ОбъектДляЗаписи.Организация = Организация;
			
			Если ТипЗнч(ОбъектДляЗаписи) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда 
				
				Движение = ПолучитьДвижениеПоКассе(ТекСтрока.F_CSOPRDOC);
				
				Если Движение.Количество()>0 Тогда 
					
					Подразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(Движение[0].F_KODSPO, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); 
					
					ОбъектДляЗаписи.ПринятоОт = ТекСтрока.F_PODOTCHET;
					
					Если Движение[0].F_KRSCHETK = "60" Тогда 
						
						Договор = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(Движение[0].F_KAUKS_2_, "dbo_T_DOGOVOR", "Договор с контрагентом", БлокировкиПотоков, НомерПотока);
						
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(ОбъектДляЗаписи) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
				
				Движение = ПолучитьДвижениеПоКассе(ТекСтрока.F_CSOPRDOC);
				
				Если Движение.Количество()>0 Тогда
					
					Подразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(Движение[0].F_KODSPK, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); 
					ОбъектДляЗаписи.Выдать = ТекСтрока.F_PODOTCHET;
					
					Если Движение[0].F_KRSCHETK = "60" Тогда 
						
						Договор = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(Движение[0].F_KAUKS_2_, "dbo_T_DOGOVOR", "Договор с контрагентом", БлокировкиПотоков, НомерПотока);
						
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(ОбъектДляЗаписи) = Тип("ДокументОбъект.ОперацияБух") Тогда
				
				Движение = ПолучитьДвижениеВзаимозачетам(ТекСтрока.F_CSOPRDOC);
				
				Если Движение.Количество()>0 Тогда
					
					ОбъектДляЗаписи.Комментарий = ТекСтрока.F_NODOK;			
					ОбъектДляЗаписи.Содержание = ТекСтрока.F_PODOTCHET+" "+ ТекСтрока.F_NAMEPL1 +" " + ТекСтрока.F_NAMEPL2 +" " + ТекСтрока.F_NAMEPL3+" " + ТекСтрока.F_NAMEPL4; 				
					//ОбъектДляЗаписи.ОбменДанными.Загрузка = Истина;
					
					ОбъектДляЗаписи.УстановитьНовыйНомер();
					
					ОбъектДляЗаписи.Записать();
					
					Операция = ОбъектДляЗаписи.Ссылка;
					
					НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
					
					НаборЗаписей.Отбор.Регистратор.Значение = Операция;
					
					НаборЗаписей.Очистить();
					
					Для Каждого ТекСтрокаДвиж Из Движение Цикл
						
						РегЗапись = НаборЗаписей.Добавить();
						
						РегЗапись.Период = ТекСтрокаДвиж.Дата;
						РегЗапись.Регистратор = Операция;
						РегЗапись.Организация = Организация;
						
						ПодразделениеДт = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрокаДвиж.F_KODSPO, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); 
						ПодразделениеКт = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрокаДвиж.F_KODSPK, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); 
						
						РегЗапись.ПодразделениеДт = ПодразделениеДт;
						РегЗапись.ПодразделениеКт = ПодразделениеКт;
						
						СубСчетДт = ТекСтрокаДвиж.F_SUBOSSCH;
						Если СубСчетДт = "00" Тогда 
							СубСчетДт = "01";
						КонецЕсли;
						
						СчетДтСтрока = ТекСтрокаДвиж.F_DBSCHETO + "." + СубСчетДт;
						СчетДт = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСчет(СчетДтСтрока);
						
						ДоговорДт = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
						
						Если ТекСтрокаДвиж.F_DBSCHETO = "60" Или  ТекСтрокаДвиж.F_DBSCHETO = "76" Тогда 
							ДоговорДт = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрокаДвиж.F_KAUOS_2_, "dbo_T_DOGOVOR", "Договор с контрагентом", БлокировкиПотоков, НомерПотока);
						КонецЕсли;
						
						
						КонтрагентДт = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрокаДвиж.F_KAUOS_1_, "dbo_T_KATORG", "Контрагент", БлокировкиПотоков, НомерПотока);
						
						СубСчетКт = ТекСтрокаДвиж.F_SUBSCHK;
						Если СубСчетКт = "00" Тогда 
							СубСчетКт = "01";
						КонецЕсли;
						
						СчетКтСтрока = ТекСтрокаДвиж.F_KRSCHETK + "." + СубСчетКт;
						СчетКт = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСчет(СчетКтСтрока);
						
						ДоговорКт = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
						
						Если ТекСтрокаДвиж.F_KRSCHETK = "60" Или  ТекСтрокаДвиж.F_KRSCHETK = "76" Тогда 
							ДоговорКт = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрокаДвиж.F_KAUKS_2_, "dbo_T_DOGOVOR", "Договор с контрагентом", БлокировкиПотоков, НомерПотока);
						КонецЕсли;
						
						КонтрагентКт = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрокаДвиж.F_KAUKS_1_, "dbo_T_KATORG", "Контрагент", БлокировкиПотоков, НомерПотока);
						
						РегЗапись.СчетДт = СчетДт;
						РегЗапись.СчетКт = СчетКт;
						
						//РегЗапись.ВалютаДт = Валюта;
						//РегЗапись.ВалютаКт = Валюта;
						
						БухгалтерскийУчет.УстановитьСубконто(РегЗапись.СчетДт, РегЗапись.СубконтоДт, "Контрагенты", КонтрагентДт);
						БухгалтерскийУчет.УстановитьСубконто(РегЗапись.СчетКт, РегЗапись.СубконтоКт, "Контрагенты", КонтрагентКт);
						
						БухгалтерскийУчет.УстановитьСубконто(РегЗапись.СчетДт, РегЗапись.СубконтоДт, "Договоры", ДоговорКт);
						БухгалтерскийУчет.УстановитьСубконто(РегЗапись.СчетКт, РегЗапись.СубконтоКт, "Договоры", ДоговорДт);
						
						РегЗапись.Сумма = ТекСтрокаДвиж.F_SUMOB;
						
					КонецЦикла;
					
					НаборЗаписей.Записать();
					
				Иначе
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(ОбъектДляЗаписи) = Тип("ДокументОбъект.АвансовыйОтчет") Тогда
				
				ОбъектДляЗаписи.Валюта = Валюта;
				ОбъектДляЗаписи.Комментарий = ТекСтрока.F_NODOK;
				ОбъектДляЗаписи.СуммаИзрасходовано = ТекСтрока.F_SUMPLAT;
				ОбъектДляЗаписи.НазначениеАванса = ТекСтрока.F_PODOTCHET+" "+ ТекСтрока.F_NAMEPL1 +" " + ТекСтрока.F_NAMEPL2 +" " + ТекСтрока.F_NAMEPL3+" " + ТекСтрока.F_NAMEPL4; 				
				ОбъектДляЗаписи.Статус = Перечисления.СтатусыАвансовогоОтчета.Утвержден;
				
				ОбъектДляЗаписи.ЦенаВключаетНДС = Истина;				
				
				ПодотчетноеЛицо = Неопределено;
				Подразделение = Неопределено;
				
				Движение = ПолучитьДвижениеАвансовогоОтчета(ТекСтрока.F_CSOPRDOC);
				
				Для Каждого ТекСтрокаДвиж Из Движение Цикл
					
					ПодотчетноеЛицо = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрокаДвиж.F_KAUKS_1_, "dbo_T_PERSONS", "Физическое лицо", БлокировкиПотоков, НомерПотока); 
					Подразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрокаДвиж.F_KODSPK, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока); 
					
					//СчетаДТ.Добавить("410");
					//СчетаДТ.Добавить("419");
					//СчетаДТ.Добавить("423"); рас
					//СчетаДТ.Добавить("425"); рас
					//СчетаДТ.Добавить("426"); рас
					//СчетаДТ.Добавить("444"); рас
					//СчетаДТ.Добавить("460"); оплата
					//СчетаДТ.Добавить("473"); рас
					//СчетаДТ.Добавить("476"); рас
					//СчетаДТ.Добавить("491"); рас

					ОплатаПоставщикам = ТекСтрокаДвиж.F_SCHETO = "460";
					
					Если ОплатаПоставщикам Тогда 
						
						НСтрока = ОбъектДляЗаписи.ОплатаПоставщикам.Добавить();
						
						НСтрока.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику;
						
						//НСтрока.Поставщик
						
						НСтрока.Контрагент = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрокаДвиж.F_KAUOS_1_, "dbo_T_KATORG", "Контрагент", БлокировкиПотоков, НомерПотока);
						НСтрока.Заказ = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрокаДвиж.F_KAUOS_2_, "dbo_T_DOGOVOR", "Договор с контрагентом", БлокировкиПотоков, НомерПотока);
						
						НСтрока.Сумма = ТекСтрокаДвиж.F_SUMOB;
						
						НСтрока.ВалютаВзаиморасчетов = Валюта;
						НСтрока.СуммаВзаиморасчетов = НСтрока.Сумма;
						
						//НСтрока.Комментарий
						//НСтрока.НомерВходящегоДокумента
						//НСтрока.ДатаВходящегоДокумента
						
					Иначе
						
						Если ТекСтрокаДвиж.F_SCHETO = "419" Тогда 
							Продолжить;
						КонецЕсли;
						
						НСтрока = ОбъектДляЗаписи.ПрочиеРасходы.Добавить();
						
						//НСтрока.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.
						НСтрока.Сумма = ТекСтрокаДвиж.F_SUMOB;
						НСтрока.СтатьяРасходов = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрокаДвиж.F_KAUOS_2_, "dbo_T_STZATR", "Статья расходов", БлокировкиПотоков, НомерПотока);  
						
						НСтрока.Подразделение = Подразделение;
						НСтрока.СуммаСНДС = НСтрока.Сумма;
						//НСтрока.Контрагент = НСтрока.Сумма;
						
					КонецЕсли;
					
				КонецЦикла;
				
				ОбъектДляЗаписи.ПодотчетноеЛицо = ПодотчетноеЛицо;
				ОбъектДляЗаписи.Подразделение = Подразделение;
				
			КонецЕсли;
			
			Если ТипЗнч(ОбъектДляЗаписи) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Или 
				ТипЗнч(ОбъектДляЗаписи) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда 
				
				ОбъектДляЗаписи.Подразделение = Подразделение;
				
				ОбъектДляЗаписи.Комментарий = ТекСтрока.F_NODOK;
				
				ОбъектДляЗаписи.Валюта = Валюта;
				ОбъектДляЗаписи.СуммаДокумента = ТекСтрока.F_SUMPLAT;
				
				ОбъектДляЗаписи.ХозяйственнаяОперация = Операция;
				ОбъектДляЗаписи.Касса = ПолучитьКассуПоПодразделению(ОбъектДляЗаписи.Подразделение);
				ОбъектДляЗаписи.Основание = ТекСтрока.F_PODOTCHET+" "+ ТекСтрока.F_NAMEPL1 +" " + ТекСтрока.F_NAMEPL2 +" " + ТекСтрока.F_NAMEPL3+" " + ТекСтрока.F_NAMEPL4; 				
				ОбъектДляЗаписи.Контрагент = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CPLAT, "dbo_T_KATORG", "Контрагент", БлокировкиПотоков, НомерПотока);
				
				
				//ОбъектДляЗаписи.Контрагент = ТекСтрока.F_NODOK;
				//ОбъектДляЗаписи.ПодотчетноеЛицо = ТекСтрока.F_NODOK;
				//ОбъектДляЗаписи.БанковскийСчет = ТекСтрока.F_NODOK;
				ОбъектДляЗаписи.СтатьяДвиженияДенежныхСредств = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CHOZOPER, "dbo_T_HOZOPER_DS", "Статья движения денежных средств", БлокировкиПотоков, НомерПотока); 
				
				ОбъектДляЗаписи.РасшифровкаПлатежа.Очистить();
				
				СтрокаРасшифровки = ОбъектДляЗаписи.РасшифровкаПлатежа.Добавить();
				
				СтрокаРасшифровки.Сумма = ОбъектДляЗаписи.СуммаДокумента;
				//СтрокаРасшифровки.СтатьяДоходов = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CHOZOPER, "dbo_T_HOZOPER_DOHOD", "Статьи доходов", БлокировкиПотоков, НомерПотока); 
				СтрокаРасшифровки.ВалютаВзаиморасчетов = Валюта;
				СтрокаРасшифровки.СуммаВзаиморасчетов = ОбъектДляЗаписи.СуммаДокумента;
				СтрокаРасшифровки.Подразделение = ОбъектДляЗаписи.Подразделение;
				СтрокаРасшифровки.Организация = Организация;
				СтрокаРасшифровки.СтатьяДвиженияДенежныхСредств = ОбъектДляЗаписи.СтатьяДвиженияДенежныхСредств;
				
				Если ЗначениеЗаполнено(ОбъектДляЗаписи.Контрагент) Тогда 
					СтрокаРасшифровки.Партнер = ОбъектДляЗаписи.Контрагент.Партнер;
					СтрокаРасшифровки.Заказ = Договор;
				КонецЕсли;
				
				ДанныеЗаполнения = Новый Структура;
				
				ДанныеЗаполнения.Вставить("Касса", ОбъектДляЗаписи.Касса);
				
			КонецЕсли;
			
			СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока,,,,ДанныеЗаполнения);
			
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		РегистрыСведений.НеЗагруженныеОбъекты.ДобавитьЗаписьОНезагруженномОбъекте(ТекСтрока, ИмяТаблицы, Сч, ТекстОшибки);
		
		Стек = "ИМЯТАБЛИЦЫ: " + ИмяТаблицы + " ПОЛЕ: " + ТекСтрока.F_NREC + " Н: " +Строка(Сч) + " Е: " + Строка(РазмерПроции);
		
		СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек, ОбъектДляЗаписи);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СтатьиДоходов

Процедура ВыполнитьСозданиеСтатейДоходовИзТХО(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Менеджер = ПланыВидовХарактеристик.СтатьиДоходов;
	Индекс = 0;
	
	Попытка
		
		Для Сч = 1 По РазмерПроции Цикл
			
			ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
			
			Вариант = 1;
			
			ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
			
			Если ОбъектДляЗаписи = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			ОбъектДляЗаписи.Наименование = ТекСтрока.F_NAME1;
			ОбъектДляЗаписи.Описание = ТекСтрока.F_NAME2;
			ОбъектДляЗаписи.Код = ТекСтрока.F_CODE;
			
			СчетРасходов =  ТекСтрока.СчетРасходов +  "."+ ТекСтрока.СубСчетРасходов; 
			
			ОбъектДляЗаписи.СчетУчета = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСчет(СчетРасходов);
			
			СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
			
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		РегистрыСведений.НеЗагруженныеОбъекты.ДобавитьЗаписьОНезагруженномОбъекте(ТекСтрока, ИмяТаблицы, Сч, ТекстОшибки);
		
		Стек = "ИМЯТАБЛИЦЫ: " + ИмяТаблицы + " ПОЛЕ: " + ТекСтрока.F_NREC + " Н: " +Строка(Сч) + " Е: " + Строка(РазмерПроции);
		
		СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек, ОбъектДляЗаписи);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПлатежныеВедомости

Функция ПолучитьДанныеПоПлатежнымВедомостямВКассу(F_NREC_BD)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	dbo_T_SPPLVED.F_SUMOPLV,
	|	dbo_T_SPPLVED.F_SUMUDV,
	|	dbo_T_SPPLVED.F_SUMOPL,
	|	dbo_T_SPPLVED.F_SUMUD,
	|	dbo_T_SPPLVED.F_VIDUD,
	|	dbo_T_SPPLVED.F_TPERSON,
	|	dbo_T_SPPLVED.F_CLSCH,
	|	dbo_T_SPPLVED.F_MES,
	|	dbo_T_SPPLVED.F_PRIZNAK,
	|	dbo_T_SPPLVED.F_CPLPOR,
	|	dbo_T_SPPLVED.F_CPODR КАК F_CPODR
	|ИЗ
	|	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_SPPLVED КАК dbo_T_SPPLVED
	|ГДЕ
	|	dbo_T_SPPLVED.F_CPLATVED = &F_CPLATVED";
	
	Запрос.УстановитьПараметр("F_CPLATVED", F_NREC_BD);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура ВыполнитьСозданиеВедомостиНаВыплатуЗарплатыВКассу(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Вариант = 3;
	Индекс = 0;
	
	Организация = Справочники.Организации.ПустаяСсылка();
	
	ОрганизацияЗапись = СтатическиеДанные.Найти("ОРГАНИЗАЦИЯ", "Реквизит");
	Если Не ОрганизацияЗапись = Неопределено Тогда 
		Организация = ОрганизацияЗапись.Значение;
	КонецЕсли;
	
	Валюта = Справочники.Валюты.ПустаяСсылка();
	
	ВалютаЗапись = СтатическиеДанные.Найти("ВАЛЮТАДОГОВОРОВ", "Реквизит");
	Если Не ВалютаЗапись = Неопределено Тогда 
		Валюта = ВалютаЗапись.Значение;
	КонецЕсли;	
	
	Попытка
		
		Для Сч = 1 По РазмерПроции Цикл
			
			СтруктураАналитики = Неопределено;
			
			Менеджер = Неопределено;
			
			ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
			
			Операция = Неопределено;
			
			Менеджер = Документы.ВедомостьНаВыплатуЗарплатыВКассу;
			
			ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
			
			Если ОбъектДляЗаписи = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			ОбъектДляЗаписи.Дата =  ТекСтрока.Дата;
			ОбъектДляЗаписи.Номер = ТекСтрока.F_NODOC;
			ОбъектДляЗаписи.Комментарий = ТекСтрока.F_NAME + " " + ТекСтрока.F_NMNEM;
			ОбъектДляЗаписи.ПериодРегистрации = ТекСтрока.ПериодРегистрации;
			ОбъектДляЗаписи.СуммаПоДокументу = ТекСтрока.F_SUMMA;
			
			ОбъектДляЗаписи.Организация = Организация;
			//ОбъектДляЗаписи.Подразделение = ;
			//ОбъектДляЗаписи.Касса = ;
			
			ОбъектДляЗаписи.Округление = Справочники.СпособыОкругленияПриРасчетеЗарплаты.СпособОкругленияДоРубляВБольшуюСторону();
			
			ОбъектДляЗаписи.СпособВыплаты = Справочники.СпособыВыплатыЗарплаты.Зарплата;

			ДанныеВедомости = ПолучитьДанныеПоПлатежнымВедомостямВКассу(ТекСтрока.F_NREC_BD);
			
			ОбъектДляЗаписи.Состав.Очистить();
			ОбъектДляЗаписи.Зарплата.Очистить();
			ОбъектДляЗаписи.ФизическиеЛица.Очистить();
			
			Для каждого ТекДанные Из ДанныеВедомости Цикл
				
				Сотрудник = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекДанные.F_CLSCH, "dbo_T_LSCHET", "Сотрудник", БлокировкиПотоков, НомерПотока); 
				
				ФизическоеЛицо = Неопределено;
				
				Если Не Сотрудник = Неопределено Тогда 
					
					ФизическоеЛицо = Сотрудник.ФизическоеЛицо;
					
				КонецЕсли;

				СтруктураПредприятия = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекДанные.F_CPODR, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока);
				
				СтрокаФизическиеЛица = ОбъектДляЗаписи.ФизическиеЛица.Добавить();
				СтрокаФизическиеЛица.ФизическоеЛицо = ФизическоеЛицо;

				Ид = новый УникальныйИдентификатор;

				СтрокаСостава = ОбъектДляЗаписи.Состав.Добавить();
				СтрокаСостава.ФизическоеЛицо = ФизическоеЛицо;
				
				СтрокаСостава.ИдентификаторСтроки = Ид;
				
				СтрокаЗарплата = ОбъектДляЗаписи.Зарплата.Добавить();
				СтрокаЗарплата.ФизическоеЛицо = ФизическоеЛицо; 
				СтрокаЗарплата.Сотрудник = Сотрудник; 
				СтрокаЗарплата.ПериодВзаиморасчетов = ОбъектДляЗаписи.ПериодРегистрации;  
				СтрокаЗарплата.КВыплате = ТекДанные.F_SUMOPL;
				
				СтрокаЗарплата.ИдентификаторСтроки = Ид;
				
				Если Не СтруктураПредприятия = Неопределено Тогда 
					
					СтрокаЗарплата.Подразделение = СтруктураПредприятия.ПодразделениеОрганизации; 
					
				КонецЕсли;
				
			КонецЦикла;
			
			СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
			
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		РегистрыСведений.НеЗагруженныеОбъекты.ДобавитьЗаписьОНезагруженномОбъекте(ТекСтрока, ИмяТаблицы, Сч, ТекстОшибки);
		
		Стек = "ИМЯТАБЛИЦЫ: " + ИмяТаблицы + " ПОЛЕ: " + ТекСтрока.F_NREC + " Н: " +Строка(Сч) + " Е: " + Строка(РазмерПроции);
		
		СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек, ОбъектДляЗаписи);

	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьДанныеПоПлатежнымВедомостямВБанк(F_NREC_BD)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	dbo_T_SPPLBAN.F_SUMOPL,
	|	dbo_T_SPPLBAN.F_SUMUD,
	|	dbo_T_SPPLBAN.F_VIDUD,
	|	dbo_T_SPPLBAN.F_TPERSON,
	|	dbo_T_SPPLBAN.F_CLSCH,
	|	dbo_T_SPPLBAN.F_MES,
	|	dbo_T_SPPLBAN.F_PRIZNAK,
	|	dbo_T_SPPLBAN.F_NOMCARD,
	|	dbo_T_SPPLBAN.F_CEX
	|ИЗ
	|	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_SPPLBAN КАК dbo_T_SPPLBAN
	|ГДЕ
	|	dbo_T_SPPLBAN.F_CSBBAN = &F_CSBBAN";
	
	Запрос.УстановитьПараметр("F_CSBBAN", F_NREC_BD);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура ВыполнитьСозданиеВедомостиНаВыплатуЗарплатыВБанк(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Вариант = 3;
	Индекс = 0;
	
	Организация = Справочники.Организации.ПустаяСсылка();
	
	ОрганизацияЗапись = СтатическиеДанные.Найти("ОРГАНИЗАЦИЯ", "Реквизит");
	Если Не ОрганизацияЗапись = Неопределено Тогда 
		Организация = ОрганизацияЗапись.Значение;
	КонецЕсли;
	
	Валюта = Справочники.Валюты.ПустаяСсылка();
	
	ВалютаЗапись = СтатическиеДанные.Найти("ВАЛЮТАДОГОВОРОВ", "Реквизит");
	Если Не ВалютаЗапись = Неопределено Тогда 
		Валюта = ВалютаЗапись.Значение;
	КонецЕсли;	
	
	Попытка
		
		Для Сч = 1 По РазмерПроции Цикл
			
			СтруктураАналитики = Неопределено;
			
			Менеджер = Неопределено;
			
			ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
			
			Операция = Неопределено;
			
			Менеджер = Документы.ВедомостьНаВыплатуЗарплатыВБанк;
			
			ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
			
			Если ОбъектДляЗаписи = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			ОбъектДляЗаписи.Дата =  ТекСтрока.Дата;
			//ОбъектДляЗаписи.Номер = ТекСтрока.F_NODOC;
			ОбъектДляЗаписи.Комментарий = ТекСтрока.F_NAME + " " + ТекСтрока.F_NMNEM;
			ОбъектДляЗаписи.ПериодРегистрации = ТекСтрока.ПериодРегистрации;
			ОбъектДляЗаписи.СуммаПоДокументу = ТекСтрока.F_SUMMA;
			
			ОбъектДляЗаписи.Организация = Организация;
			//ОбъектДляЗаписи.Подразделение = ;
			//ОбъектДляЗаписи.Касса = ;
			
			ОбъектДляЗаписи.Округление = Справочники.СпособыОкругленияПриРасчетеЗарплаты.СпособОкругленияДоРубляВБольшуюСторону();
			
			ОбъектДляЗаписи.СпособВыплаты = Справочники.СпособыВыплатыЗарплаты.Зарплата;

			ДанныеВедомости = ПолучитьДанныеПоПлатежнымВедомостямВБанк(ТекСтрока.F_NREC_BD);
			
			ОбъектДляЗаписи.Состав.Очистить();
			ОбъектДляЗаписи.Зарплата.Очистить();
			ОбъектДляЗаписи.ФизическиеЛица.Очистить();
			
			Для каждого ТекДанные Из ДанныеВедомости Цикл
				
				Ид = новый УникальныйИдентификатор;

				НомерЛицевогоСчета = "Неопределен";
				
				Сотрудник = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекДанные.F_CLSCH, "dbo_T_LSCHET", "Сотрудник", БлокировкиПотоков, НомерПотока); 
				
				СтруктураПредприятия = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекДанные.F_CEX, "dbo_T_KATPODR", "Подразделение", БлокировкиПотоков, НомерПотока);
				
				ФизическоеЛицо = Неопределено;
				
				Если Не Сотрудник = Неопределено Тогда 
					
					ФизическоеЛицо = Сотрудник.ФизическоеЛицо;
					
				КонецЕсли;
				
				СтрокаФизическиеЛица = ОбъектДляЗаписи.ФизическиеЛица.Добавить();
				СтрокаФизическиеЛица.ФизическоеЛицо = ФизическоеЛицо;
				
				СтрокаСостава = ОбъектДляЗаписи.Состав.Добавить();
				СтрокаСостава.ФизическоеЛицо = ФизическоеЛицо;
				
				СтрокаСостава.НомерЛицевогоСчета = НомерЛицевогоСчета;				
				Если ЗначениеЗаполнено(ТекДанные.F_NOMCARD) Тогда 
					
					СтрокаСостава.НомерЛицевогоСчета = ТекДанные.F_NOMCARD;				
					
				КонецЕсли;
				
				СтрокаСостава.ИдентификаторСтроки = Ид;				
				
				СтрокаЗарплата = ОбъектДляЗаписи.Зарплата.Добавить();
				СтрокаЗарплата.ФизическоеЛицо = ФизическоеЛицо; 
				СтрокаЗарплата.Сотрудник = Сотрудник; 
				СтрокаЗарплата.ПериодВзаиморасчетов = ОбъектДляЗаписи.ПериодРегистрации;  
				СтрокаЗарплата.КВыплате = ТекДанные.F_SUMOPL;
				СтрокаЗарплата.НомерЛицевогоСчета = ТекДанные.F_NOMCARD;
				
				СтрокаЗарплата.ИдентификаторСтроки = Ид; 
				
				Если Не СтруктураПредприятия = Неопределено Тогда 
					
					СтрокаЗарплата.Подразделение = СтруктураПредприятия.ПодразделениеОрганизации; 
					
				КонецЕсли;

			КонецЦикла;
			
			СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
			
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		РегистрыСведений.НеЗагруженныеОбъекты.ДобавитьЗаписьОНезагруженномОбъекте(ТекСтрока, ИмяТаблицы, Сч, ТекстОшибки);
		
		Стек = "ИМЯТАБЛИЦЫ: " + ИмяТаблицы + " ПОЛЕ: " + ТекСтрока.F_NREC + " Н: " +Строка(Сч) + " Е: " + Строка(РазмерПроции);
		
		СинхронизацияГалактикаОбщегоНазначения.ОповеститьОбОшибке(ТекстОшибки, Стек, ОбъектДляЗаписи);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтрефейс

Функция ЗаданиеПоТаблице(ИмяТаблицы, НаборПараметров) Экспорт
	
	Задание = Неопределено;
	
	Если ИмяТаблицы = "dbo_T_HOZOPER_DOHOD" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаДС.ВыполнитьСозданиеСтатейДоходовИзТХО", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_PLPOR" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаДС.ВыполнитьСозданиеДокументовПоКассе", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_HOZOPER_DS" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаДС.ВыполнитьСозданиеСтатейДСИзТХО", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_PLATVED" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаДС.ВыполнитьСозданиеВедомостиНаВыплатуЗарплатыВКассу", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_SBBAN" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаДС.ВыполнитьСозданиеВедомостиНаВыплатуЗарплатыВБанк", НаборПараметров);
	КонецЕсли;
	
	Возврат Задание;
	
КонецФункции

Процедура ДанныеИзВнешнихИсточников(ВариантПолучения, СтруктураУсловий, Запрос, Разделитель) Экспорт
	
	ЭтоОтладка = Константы.СинхронизацияГалатикаОтладка.Получить();
	
	Если ВариантПолучения="dbo_T_SBBAN" Или ВариантПолучения=Неопределено Тогда 
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	dbo_T_SBBAN.Таблица,
		|	dbo_T_SBBAN.F_NREC КАК F_NREC_BD,
		|	BD_TO_NVARCHAR(dbo_T_SBBAN.F_NREC) КАК F_NREC,
		|	dbo_T_SBBAN.F_ATL_LASTDATE,
		|	dbo_T_SBBAN.F_DFORM,
		|	dbo_T_SBBAN.F_NAME,
		|	GET_DT(dbo_T_SBBAN.F_DFORM, 0) КАК Дата,
		|	GET_DT(dbo_T_SBBAN.F_DATAN, 0) КАК ПериодРегистрации,
		|	dbo_T_SBBAN.F_NMNEM,
		|	dbo_T_SBBAN.F_SUMMA
		|ИЗ
		|	(ВЫБРАТЬ
		|		""dbo_T_SBBAN"" КАК Таблица,
		|		dbo_T_SBBAN.F_NREC КАК F_NREC,
		|		dbo_T_SBBAN.F_ATL_LASTDATE КАК F_ATL_LASTDATE,
		|		dbo_T_SBBAN.F_DFORM КАК F_DFORM,
		|		dbo_T_SBBAN.F_NAME КАК F_NAME,
		|		dbo_T_SBBAN.F_NMNEM КАК F_NMNEM,
		|		dbo_T_SBBAN.F_SUMMA КАК F_SUMMA,
		|		dbo_T_SBBAN.F_DATAN КАК F_DATAN
		|	ИЗ
		|		ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_SBBAN КАК dbo_T_SBBAN
		|	ГДЕ
		|		dbo_T_SBBAN.F_DFORM >= 132057857) КАК dbo_T_SBBAN";
				
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
	Если ВариантПолучения="dbo_T_PLATVED" Или ВариантПолучения=Неопределено Тогда 
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	dbo_T_PLATVED.Таблица,
		|	dbo_T_PLATVED.F_NREC КАК F_NREC_BD,
		|	BD_TO_NVARCHAR(dbo_T_PLATVED.F_NREC) КАК F_NREC,
		|	dbo_T_PLATVED.F_ATL_LASTDATE,
		|	dbo_T_PLATVED.F_NODOC,
		|	dbo_T_PLATVED.F_DFORM,
		|	dbo_T_PLATVED.F_NAME,
		|	GET_DT(dbo_T_PLATVED.F_DFORM, 0) КАК Дата,
		|	GET_DT(dbo_T_PLATVED.F_DATAN, 0) КАК ПериодРегистрации,
		|	dbo_T_PLATVED.F_NMNEM,
		|	dbo_T_PLATVED.F_SUMMA
		|ИЗ
		|	(ВЫБРАТЬ
		|		""dbo_T_PLATVED"" КАК Таблица,
		|		dbo_T_PLATVED.F_NREC КАК F_NREC,
		|		dbo_T_PLATVED.F_ATL_LASTDATE КАК F_ATL_LASTDATE,
		|		dbo_T_PLATVED.F_NODOC КАК F_NODOC,
		|		dbo_T_PLATVED.F_DFORM КАК F_DFORM,
		|		dbo_T_PLATVED.F_NAME КАК F_NAME,
		|		dbo_T_PLATVED.F_NMNEM КАК F_NMNEM,
		|		dbo_T_PLATVED.F_SUMMA КАК F_SUMMA,
		|		dbo_T_PLATVED.F_DATAN КАК F_DATAN
		|	ИЗ
		|		ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_PLATVED КАК dbo_T_PLATVED
		|	ГДЕ
		|		dbo_T_PLATVED.F_DFORM >= 132057857 //START_DATE()
		|		И dbo_T_PLATVED.F_PRIZNAK > 0) КАК dbo_T_PLATVED";
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;	
	
	Если ВариантПолучения="dbo_T_HOZOPER_DS" Или ВариантПолучения=Неопределено Тогда 
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	""dbo_T_HOZOPER_DS"" КАК Таблица,
		|	BD_TO_NVARCHAR(dbo_T_HOZOPER_DS.F_NREC) КАК F_NREC,
		|	dbo_T_HOZOBOR.F_DBSCHETO КАК СчетРасходов,
		|	dbo_T_HOZOBOR.F_SUBOS КАК СубСчетРасходов,
		|	dbo_T_HOZOPER_DS.F_NAME1,
		|	dbo_T_HOZOPER_DS.F_NAME2,
		|	dbo_T_HOZOPER_DS.F_CODE,
		|	dbo_T_HOZOPER_DS.F_ATL_LASTDATE
		|ИЗ
		|	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_HOZOPER КАК dbo_T_HOZOPER_DS
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_HOZOBOR КАК dbo_T_HOZOBOR
		|		ПО dbo_T_HOZOPER_DS.F_NREC = dbo_T_HOZOBOR.F_CHOZOPER";
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
	Если ВариантПолучения="dbo_T_HOZOPER_DOHOD" Или ВариантПолучения=Неопределено Тогда 
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	""dbo_T_HOZOPER_DOHOD"" КАК Таблица,
		|	BD_TO_NVARCHAR(dbo_T_HOZOPER_DOHOD.F_NREC) КАК F_NREC,
		|	dbo_T_HOZOBOR.F_DBSCHETO КАК СчетРасходов,
		|	dbo_T_HOZOBOR.F_SUBOS КАК СубСчетРасходов,
		|	dbo_T_HOZOPER_DOHOD.F_NAME1,
		|	dbo_T_HOZOPER_DOHOD.F_NAME2,
		|	dbo_T_HOZOPER_DOHOD.F_CODE,
		|	dbo_T_HOZOPER_DOHOD.F_ATL_LASTDATE
		|ИЗ
		|	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_HOZOPER КАК dbo_T_HOZOPER_DOHOD
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_HOZOBOR КАК dbo_T_HOZOBOR
		|		ПО dbo_T_HOZOPER_DOHOD.F_NREC = dbo_T_HOZOBOR.F_CHOZOPER";
				
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
	Если ВариантПолучения="dbo_T_PLPOR" Или ВариантПолучения=Неопределено Тогда 
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	dbo_T_PLPOR.Таблица,
		|	dbo_T_PLPOR.F_ATL_LASTDATE,
		|	dbo_T_PLPOR.F_TIDKGAL,
		|	dbo_T_PLPOR.F_NODOK,
		|	dbo_T_PLPOR.F_DATOB,
		|	dbo_T_PLPOR.F_CPLAT,
		|	dbo_T_PLPOR.F_SUMPLAT,
		|	BD_TO_NVARCHAR(dbo_T_PLPOR.F_NREC) КАК F_NREC,
		|	BD_TO_NVARCHAR(dbo_T_PLPOR.F_CHOZOPER) КАК F_CHOZOPER,
		|	dbo_T_PLPOR.F_PODOTCHET,
		|	dbo_T_PLPOR.F_NAMEPL1,
		|	dbo_T_PLPOR.F_NAMEPL2,
		|	dbo_T_PLPOR.F_NAMEPL3,
		|	dbo_T_PLPOR.F_NAMEPL4,
		|	dbo_T_PLPOR.F_CSOPRDOC,
		|	dbo_T_PLPOR.Дата
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫРАЗИТЬ(""dbo_T_PLPOR"" КАК СТРОКА(14)) КАК Таблица,
		|		dbo_T_PLPOR.F_ATL_LASTDATE КАК F_ATL_LASTDATE,
		|		dbo_T_PLPOR.F_ATL_LASTTIME КАК F_ATL_LASTTIME,
		|		dbo_T_PLPOR.F_TIDKGAL КАК F_TIDKGAL,
		|		dbo_T_PLPOR.F_TIDK КАК F_TIDK,
		|		dbo_T_PLPOR.F_VIDDK КАК F_VIDDK,
		|		dbo_T_PLPOR.F_NODOK КАК F_NODOK,
		|		dbo_T_PLPOR.F_DATOB КАК F_DATOB,
		|		dbo_T_PLPOR.F_CPLAT КАК F_CPLAT,
		|		dbo_T_PLPOR.F_CBANKPLAT КАК F_CBANKPLAT,
		|		dbo_T_PLPOR.F_CPLATNEW КАК F_CPLATNEW,
		|		dbo_T_PLPOR.F_SUMPLAT КАК F_SUMPLAT,
		|		dbo_T_PLPOR.F_CVAL КАК F_CVAL,
		|		dbo_T_PLPOR.F_NREC КАК F_NREC,
		|		dbo_T_PLPOR.F_CHOZOPER КАК F_CHOZOPER,
		|		dbo_T_PLPOR.F_PODOTCHET КАК F_PODOTCHET,
		|		dbo_T_PLPOR.F_CPERSONS КАК F_CPERSONS,
		|		dbo_T_PLPOR.F_CLSCHET КАК F_CLSCHET,
		|		dbo_T_PLPOR.F_CPODR КАК F_CPODR,
		|		dbo_T_PLPOR.F_NAMEPL1 КАК F_NAMEPL1,
		|		dbo_T_PLPOR.F_NAMEPL2 КАК F_NAMEPL2,
		|		dbo_T_PLPOR.F_NAMEPL3 КАК F_NAMEPL3,
		|		dbo_T_PLPOR.F_NAMEPL4 КАК F_NAMEPL4,
		|		dbo_T_PLPOR.F_CFILKOR КАК F_CFILKOR,
		|		dbo_T_PLPOR.F_CGROUPSCH КАК F_CGROUPSCH,
		|		dbo_T_PLPOR.F_CCLASSBUH КАК F_CCLASSBUH,
		|		dbo_T_PLPOR.F_MODEDOC КАК F_MODEDOC,
		|		dbo_T_PLPOR.F_APPEND КАК F_APPEND,
		|		dbo_T_PLPOR.F_NREC КАК F_CSOPRDOC,
		|		GET_DT(dbo_T_PLPOR.F_DATVIP, dbo_T_PLPOR.F_ATL_LASTTIME) КАК Дата
		|	ИЗ
		|		ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_PLPOR КАК dbo_T_PLPOR
		|	ГДЕ
		|		dbo_T_PLPOR.F_DATOB >= START_DATE()
		|		И 
		|(dbo_T_PLPOR.F_TIDKGAL = 7
		|				ИЛИ dbo_T_PLPOR.F_TIDKGAL = 8)
		//Отключение загрузки документов кроме Кассовых
		//|				ИЛИ dbo_T_PLPOR.F_TIDKGAL = 9
		//|				ИЛИ dbo_T_PLPOR.F_TIDKGAL = 70)
		|) КАК dbo_T_PLPOR";
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
