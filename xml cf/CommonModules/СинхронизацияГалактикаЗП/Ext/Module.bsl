
Процедура ДанныеИзВнешнихИсточников(ВариантПолучения, СтруктураУсловий, Запрос, Разделитель) Экспорт
	
	ЭтоОтладка = Константы.СинхронизацияГалатикаОтладка.Получить();			

	Если ВариантПолучения="dbo_T_LSCHET" Или ВариантПолучения=Неопределено Тогда 
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	dbo_T_LSCHET.Таблица,
		|	BD_TO_NVARCHAR(dbo_T_LSCHET.F_NREC) КАК F_NREC,
		|	dbo_T_LSCHET.F_ATL_LASTDATE,
		|	dbo_T_LSCHET.F_FIO,
		|	dbo_T_LSCHET.F_TPERSON,
		|	dbo_T_LSCHET.F_STRTABN
		|ИЗ
		|	(ВЫБРАТЬ
		|		""dbo_T_LSCHET"" КАК Таблица,
		|		dbo_T_LSCHET.F_NREC КАК F_NREC,
		|		dbo_T_LSCHET.F_ATL_LASTDATE КАК F_ATL_LASTDATE,
		|		dbo_T_PERSONS.F_FIO КАК F_FIO,
		|		dbo_T_LSCHET.F_TPERSON КАК F_TPERSON,
		|		dbo_T_LSCHET.F_STRTABN КАК F_STRTABN
		|	ИЗ
		|		ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_LSCHET КАК dbo_T_LSCHET
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_PERSONS КАК dbo_T_PERSONS
		|			ПО dbo_T_LSCHET.F_TPERSON = dbo_T_PERSONS.F_NREC
		|	ГДЕ
		|		(dbo_T_LSCHET.F_DATUV = 0
		|				ИЛИ GET_DT(dbo_T_LSCHET.F_DATUV, 0) >= ДАТАВРЕМЯ(2015, 10, 1, 0, 0, 0))) КАК dbo_T_LSCHET";
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
	Если ВариантПолучения="dbo_T_PERSONS" Или ВариантПолучения=Неопределено Тогда 
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	dbo_T_PERSONS.Таблица,
		|	BD_TO_NVARCHAR(dbo_T_PERSONS.F_NREC) КАК F_NREC,
		|	dbo_T_PERSONS.F_ATL_LASTDATE,
		|	dbo_T_PERSONS.F_FIO,
		|	dbo_T_PERSONS.F_BORNDATE,
		|	dbo_T_PERSONS.F_SEX,
		|	dbo_T_PERSONS.INN,
		|	dbo_T_PERSONS.SNILS,
		|	dbo_T_PERSONS.F_SER,
		|	dbo_T_PERSONS.F_NMB,
		|	dbo_T_PERSONS.F_GIVENBY,
		|	dbo_T_PERSONS.F_GIVENDATE,
		|	dbo_T_PERSONS.F_GIVENPODR,
		|	dbo_T_PERSONS.BORNADDR,
		|	dbo_T_PERSONS.LIVEADDR,
		|	dbo_T_PERSONS.PASSPADDR,
		|	dbo_T_PERSONS.BORNADDRTER,
		|	dbo_T_PERSONS.LIVEADDRTER,
		|	dbo_T_PERSONS.PASSPADDRTER
		|ИЗ
		|	(ВЫБРАТЬ
		|		""dbo_T_PERSONS"" КАК Таблица,
		|		dbo_T_PERSONS.F_NREC КАК F_NREC,
		|		dbo_T_PERSONS.F_ATL_LASTDATE КАК F_ATL_LASTDATE,
		|		dbo_T_PERSONS.F_FIO КАК F_FIO,
		|		dbo_T_PERSONS.F_BORNDATE КАК F_BORNDATE,
		|		dbo_T_PERSONS.F_SEX КАК F_SEX,
		|		dbo_T_PASSPORTS_INN.F_NMB КАК INN,
		|		dbo_T_PASSPORTS_SNILS.F_NMB КАК SNILS,
		|		dbo_T_PASSPORTS.F_SER КАК F_SER,
		|		dbo_T_PASSPORTS.F_NMB КАК F_NMB,
		|		dbo_T_PASSPORTS.F_GIVENBY КАК F_GIVENBY,
		|		dbo_T_PASSPORTS.F_GIVENDATE КАК F_GIVENDATE,
		|		dbo_T_PASSPORTS.F_GIVENPODR КАК F_GIVENPODR,
		|		dbo_T_ADDRESSN.F_SADDRESS1 КАК BORNADDR,
		|		dbo_T_ADDRESSN1.F_SADDRESS1 КАК LIVEADDR,
		|		dbo_T_ADDRESSN2.F_SADDRESS1 КАК PASSPADDR,
		|		dbo_T_STERR.F_SNAME КАК BORNADDRTER,
		|		dbo_T_STERR1.F_SNAME КАК LIVEADDRTER,
		|		dbo_T_STERR2.F_SNAME КАК PASSPADDRTER
		|	ИЗ
		|		ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_PERSONS КАК dbo_T_PERSONS
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_PASSPORTS КАК dbo_T_PASSPORTS_INN
		|			ПО dbo_T_PERSONS.F_NREC = dbo_T_PASSPORTS_INN.F_PERSON
		|				И (dbo_T_PASSPORTS_INN.F_SYSCODE = 505)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_PASSPORTS КАК dbo_T_PASSPORTS_SNILS
		|			ПО dbo_T_PERSONS.F_NREC = dbo_T_PASSPORTS_SNILS.F_PERSON
		|				И (dbo_T_PASSPORTS_SNILS.F_SYSCODE = 501)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_PASSPORTS КАК dbo_T_PASSPORTS
		|			ПО dbo_T_PERSONS.F_NREC = dbo_T_PASSPORTS.F_PERSON
		|				И (dbo_T_PASSPORTS.F_SYSCODE = 502)
		|				И dbo_T_PERSONS.F_PASSPRUS = dbo_T_PASSPORTS.F_NREC
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_ADDRESSN КАК dbo_T_ADDRESSN
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_STERR КАК dbo_T_STERR
		|				ПО dbo_T_ADDRESSN.F_CSTERR = dbo_T_STERR.F_NREC
		|			ПО dbo_T_PERSONS.F_BORNADDR = dbo_T_ADDRESSN.F_NREC
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_ADDRESSN КАК dbo_T_ADDRESSN1
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_STERR КАК dbo_T_STERR1
		|				ПО dbo_T_ADDRESSN1.F_CSTERR = dbo_T_STERR1.F_NREC
		|			ПО dbo_T_PERSONS.F_LIVEADDR = dbo_T_ADDRESSN1.F_NREC
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_ADDRESSN КАК dbo_T_ADDRESSN2
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_STERR КАК dbo_T_STERR2
		|				ПО dbo_T_ADDRESSN2.F_CSTERR = dbo_T_STERR2.F_NREC
		|			ПО dbo_T_PERSONS.F_PASSPADDR = dbo_T_ADDRESSN2.F_NREC
		|	
		|	СГРУППИРОВАТЬ ПО
		|		dbo_T_PERSONS.F_FIO,
		|		dbo_T_PERSONS.F_NREC,
		|		dbo_T_PASSPORTS.F_NMB,
		|		dbo_T_PASSPORTS.F_SER,
		|		dbo_T_ADDRESSN1.F_SADDRESS1,
		|		dbo_T_PERSONS.F_SEX,
		|		dbo_T_PASSPORTS_INN.F_NMB,
		|		dbo_T_PASSPORTS_SNILS.F_NMB,
		|		dbo_T_ADDRESSN2.F_SADDRESS1,
		|		dbo_T_PASSPORTS.F_GIVENPODR,
		|		dbo_T_ADDRESSN.F_SADDRESS1,
		|		dbo_T_STERR.F_SNAME,
		|		dbo_T_PASSPORTS.F_GIVENBY,
		|		dbo_T_STERR2.F_SNAME,
		|		dbo_T_STERR1.F_SNAME,
		|		dbo_T_PERSONS.F_ATL_LASTDATE,
		|		dbo_T_PERSONS.F_BORNDATE,
		|		dbo_T_PASSPORTS.F_GIVENDATE) КАК dbo_T_PERSONS";
				
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
	Если ВариантПолучения="dbo_T_CATALOGS_dolgnosti" Или ВариантПолучения=Неопределено Тогда 
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	dbo_T_CATALOGS_dolgnosti.Таблица,
		|	BD_TO_NVARCHAR(dbo_T_CATALOGS_dolgnosti.F_NREC) КАК F_NREC,
		|	dbo_T_CATALOGS_dolgnosti.F_ATL_LASTDATE,
		|	dbo_T_CATALOGS_dolgnosti.F_NAME
		|ИЗ
		|	(ВЫБРАТЬ
		|		""dbo_T_CATALOGS_dolgnosti"" КАК Таблица,
		|		dbo_T_STAFFSTRUCT.F_POST КАК F_NREC,
		|		dbo_T_CATALOGS.F_ATL_LASTDATE КАК F_ATL_LASTDATE,
		|		dbo_T_CATALOGS.F_NAME КАК F_NAME
		|	ИЗ
		|		ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_STAFFSTRUCT КАК dbo_T_STAFFSTRUCT
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_CATALOGS КАК dbo_T_CATALOGS
		|			ПО dbo_T_STAFFSTRUCT.F_POST = dbo_T_CATALOGS.F_NREC
		|	
		|	СГРУППИРОВАТЬ ПО
		|		dbo_T_STAFFSTRUCT.F_POST,
		|		dbo_T_CATALOGS.F_ATL_LASTDATE,
		|		dbo_T_CATALOGS.F_NAME) КАК dbo_T_CATALOGS_dolgnosti";
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
	Если ВариантПолучения="dbo_T_PRIEMNARABOTU" Или ВариантПолучения=Неопределено Тогда 
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	dbo_T_PRIEMNARABOTU.НомерДокумента,
		|	dbo_T_PRIEMNARABOTU.ДатаДокумента,
		|	dbo_T_PRIEMNARABOTU.Должность,
		|	dbo_T_PRIEMNARABOTU.ДолжностьПоШтатномуРасписанию,
		|	dbo_T_PRIEMNARABOTU.Сотрудник,
		|	dbo_T_PRIEMNARABOTU.F_CONTRACTNMB,
		|	BD_TO_NVARCHAR(dbo_T_PRIEMNARABOTU.F_NREC) КАК F_NREC,
		|	dbo_T_PRIEMNARABOTU.F_ATL_LASTDATE,
		|	dbo_T_PRIEMNARABOTU.Таблица,
		|	dbo_T_PRIEMNARABOTU.ГрафикРаботы,
		|	dbo_T_PRIEMNARABOTU.КоличествоСтавок,
		|	dbo_T_PRIEMNARABOTU.ДатаПриемаНаРаботу,
		|	dbo_T_PRIEMNARABOTU.F_DEPARTMENT,
		|	dbo_T_PRIEMNARABOTU.F_CONTRACTDATE,
		|	dbo_T_PRIEMNARABOTU.F_PAYMODEL,
		|	dbo_T_PRIEMNARABOTU.F_TAXRATE,
		|	dbo_T_PRIEMNARABOTU.F_SOVM
		|ИЗ
		|	(ВЫБРАТЬ
		|		dbo_T_TITLEDOC.F_DOCNMB КАК НомерДокумента,
		|		dbo_T_TITLEDOC.F_DOCDATE КАК ДатаДокумента,
		|		dbo_T_APPOINTMENTS.F_POST КАК Должность,
		|		dbo_T_APPOINTMENTS.F_STAFFSTR КАК ДолжностьПоШтатномуРасписанию,
		|		dbo_T_APPOINTMENTS.F_CADDNREC2 КАК Сотрудник,
		|		dbo_T_APPOINTMENTS.F_CONTRACTNMB КАК F_CONTRACTNMB,
		|		dbo_T_CONTDOC.F_NREC КАК F_NREC,
		|		dbo_T_CONTDOC.F_ATL_LASTDATE КАК F_ATL_LASTDATE,
		|		""dbo_T_PRIEMNARABOTU"" КАК Таблица,
		|		dbo_T_APPOINTMENTS.F_WORKREGIME КАК ГрафикРаботы,
		|		dbo_T_APPOINTMENTS.F_EMPRATE КАК КоличествоСтавок,
		|		dbo_T_APPOINTMENTS.F_APPOINTDATE КАК ДатаПриемаНаРаботу,
		|		dbo_T_APPOINTMENTS.F_DEPARTMENT КАК F_DEPARTMENT,
		|		dbo_T_APPOINTMENTS.F_CONTRACTDATE КАК F_CONTRACTDATE,
		|		dbo_T_APPOINTMENTS.F_PAYMODEL КАК F_PAYMODEL,
		|		dbo_T_APPOINTMENTS.F_TAXRATE КАК F_TAXRATE,
		|		dbo_T_LSCHET.F_SOVM КАК F_SOVM
		|	ИЗ
		|		ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_CONTDOC КАК dbo_T_CONTDOC
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_PARTDOC КАК dbo_T_PARTDOC
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_TITLEDOC КАК dbo_T_TITLEDOC
		|				ПО dbo_T_PARTDOC.F_CDOC = dbo_T_TITLEDOC.F_NREC
		|			ПО dbo_T_CONTDOC.F_CPART = dbo_T_PARTDOC.F_NREC
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_APPOINTMENTS КАК dbo_T_APPOINTMENTS
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_LSCHET КАК dbo_T_LSCHET
		|				ПО dbo_T_APPOINTMENTS.F_CADDNREC2 = dbo_T_LSCHET.F_NREC
		|			ПО dbo_T_CONTDOC.F_CSTR = dbo_T_APPOINTMENTS.F_NREC
		|	ГДЕ
		|		(dbo_T_LSCHET.F_DATUV = 0
		|				ИЛИ dbo_T_LSCHET.F_DATUV >= START_DATE())
		|		И dbo_T_TITLEDOC.F_WSTATUS = 1
		|		И dbo_T_CONTDOC.F_TYPEOPER = 1) КАК dbo_T_PRIEMNARABOTU";
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
	Если ВариантПолучения="dbo_T_STAFFSTRUCT" Или ВариантПолучения=Неопределено Тогда 

		Запрос.Текст =
		"ВЫБРАТЬ
		|	dbo_T_STAFFSTRUCT.Таблица КАК Таблица,
		|	BD_TO_NVARCHAR(dbo_T_STAFFSTRUCT.F_NREC) КАК F_NREC,
		|	dbo_T_STAFFSTRUCT.F_DEPARTMENT КАК Подразделение,
		|	dbo_T_STAFFSTRUCT.F_POST КАК F_POST,
		|	dbo_T_STAFFSTRUCT.F_ATL_LASTDATE КАК F_ATL_LASTDATE,
		|	dbo_T_STAFFSTRUCT.F_DINPUT КАК F_DINPUT,
		|	dbo_T_STAFFSTRUCT.F_DCLOSE КАК F_DCLOSE,
		|	dbo_T_STAFFSTRUCT.F_WORKSTATIONS КАК F_WORKSTATIONS,
		|	dbo_T_EXTCATLINKS.F_EXTCAT КАК Подразделение2
		|ИЗ
		|	(ВЫБРАТЬ
		|		""dbo_T_STAFFSTRUCT"" КАК Таблица,
		|		dbo_T_STAFFSTRUCT.F_NREC КАК F_NREC,
		|		dbo_T_STAFFSTRUCT.F_DEPARTMENT КАК F_DEPARTMENT,
		|		dbo_T_STAFFSTRUCT.F_POST КАК F_POST,
		|		dbo_T_STAFFSTRUCT.F_ATL_LASTDATE КАК F_ATL_LASTDATE,
		|		dbo_T_STAFFSTRUCT.F_DINPUT КАК F_DINPUT,
		|		dbo_T_STAFFSTRUCT.F_DCLOSE КАК F_DCLOSE,
		|		dbo_T_STAFFSTRUCT.F_WORKSTATIONS КАК F_WORKSTATIONS
		|	ИЗ
		|		ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_STAFFSTRUCT КАК dbo_T_STAFFSTRUCT) КАК dbo_T_STAFFSTRUCT
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_EXTCATLINKS КАК dbo_T_EXTCATLINKS
		|		ПО dbo_T_STAFFSTRUCT.F_DEPARTMENT = dbo_T_EXTCATLINKS.F_STAFFCAT
		|			И (dbo_T_EXTCATLINKS.F_OBJTYPE = 11)
		|			И (dbo_T_EXTCATLINKS.F_MODTYPE = 1)";
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
	Если ВариантПолучения="dbo_T_KLREJIM" Или ВариантПолучения=Неопределено Тогда 

		Запрос.Текст =
		"ВЫБРАТЬ
		|	dbo_T_KLREJIM.Таблица,
		|	BD_TO_NVARCHAR(dbo_T_KLREJIM.F_NREC) КАК F_NREC,
		|	dbo_T_KLREJIM.F_ATL_LASTDATE,
		|	dbo_T_KLREJIM.F_NREJIM
		|ИЗ
		|	(ВЫБРАТЬ
		|		""dbo_T_KLREJIM"" КАК Таблица,
		|		dbo_T_KLREJIM.F_NREC КАК F_NREC,
		|		dbo_T_KLREJIM.F_ATL_LASTDATE КАК F_ATL_LASTDATE,
		|		dbo_T_KLREJIM.F_NREJIM КАК F_NREJIM
		|	ИЗ
		|		ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KLREJIM КАК dbo_T_KLREJIM) КАК dbo_T_KLREJIM";
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
	Если ВариантПолучения="dbo_T_CATALOGS_podr" Или ВариантПолучения=Неопределено Тогда 

		Запрос.Текст =
		"ВЫБРАТЬ
		|	BD_TO_NVARCHAR(dbo_T_CATALOGS_podr.F_NREC) КАК F_NREC,
		|	dbo_T_CATALOGS_podr.F_ATL_LASTDATE,
		|	dbo_T_CATALOGS_podr.F_NAME,
		|	dbo_T_CATALOGS_podr.F_CPARENT,
		|	dbo_T_CATALOGS_podr.Таблица
		|ИЗ
		|	(ВЫБРАТЬ
		|		dbo_T_CATALOGS.F_NREC КАК F_NREC,
		|		dbo_T_CATALOGS.F_ATL_LASTDATE КАК F_ATL_LASTDATE,
		|		dbo_T_CATALOGS.F_NAME КАК F_NAME,
		|		dbo_T_CATALOGS.F_CPARENT КАК F_CPARENT,
		|		""dbo_T_CATALOGS_podr"" КАК Таблица
		|	ИЗ
		|		ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_CATALOGS КАК dbo_T_CATALOGS) КАК dbo_T_CATALOGS_podr";
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
	Если ВариантПолучения="dbo_T_KPEREVOD" Или ВариантПолучения=Неопределено Тогда 

		Запрос.Текст = ВернутьТекстЗапросаКадровыйПеревод();		
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	       
	Если ВариантПолучения="dbo_T_UVOLNENIE" Или ВариантПолучения=Неопределено Тогда 

		Запрос.Текст = ВернутьТекстЗапросаУвольнение();		
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
	Если ВариантПолучения="dbo_T_KLOTPUSK" Или ВариантПолучения=Неопределено Тогда 

		Запрос.Текст = ВернутьТекстЗапросаВидыОтпусков();		
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
	Если ВариантПолучения="dbo_T_KLVIDOPL" Или ВариантПолучения=Неопределено Тогда 

		//Запрос.Текст = ВернутьТекстЗапросаПВРНачисления();		
		
		//СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		//
		//Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	
	Если ВариантПолучения="dbo_T_KLVIDUD" Или ВариантПолучения=Неопределено Тогда 

		//Запрос.Текст = ВернутьТекстЗапросаПВРУдержания();		
		//
		//СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		//
		//Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;

	Если ВариантПолучения="dbo_T_VACATIONS" Или ВариантПолучения=Неопределено Тогда 

		Запрос.Текст = ВернутьТекстЗапросаОтпуска();		
		
		СинхронизацияГалактикаОбщегоНазначения.ДополнитьЗапросУсловиямиПоТаблице(СтруктураУсловий, Запрос, ВариантПолучения);
		
		Запрос.Текст = Запрос.Текст + Разделитель;
		
	КонецЕсли;
	

	
КонецПроцедуры

#Область ТекстыЗапросов

Функция ВернутьТекстЗапросаКадровыйПеревод()
	
	Текст = "ВЫБРАТЬ
	        |	dbo_T_KPEREVOD.НомерДокумента,
	        |	dbo_T_KPEREVOD.ДатаДокумента,
	        |	dbo_T_KPEREVOD.Должность,
	        |	dbo_T_KPEREVOD.ДолжностьПоШтатномуРасписанию,
	        |	dbo_T_KPEREVOD.Сотрудник,
	        |	dbo_T_KPEREVOD.F_CONTRACTNMB,
	        |	BD_TO_NVARCHAR(dbo_T_KPEREVOD.F_NREC) КАК F_NREC,
	        |	dbo_T_KPEREVOD.F_ATL_LASTDATE,
	        |	dbo_T_KPEREVOD.Таблица,
	        |	dbo_T_KPEREVOD.ГрафикРаботы,
	        |	dbo_T_KPEREVOD.КоличествоСтавок,
	        |	dbo_T_KPEREVOD.F_DEPARTMENT,
	        |	dbo_T_KPEREVOD.F_CONTRACTDATE,
	        |	dbo_T_KPEREVOD.ДатаНачала,
	        |	dbo_T_KPEREVOD.F_PAYMODEL,
	        |	dbo_T_KPEREVOD.F_TAXRATE
	        |ИЗ
	        |	(ВЫБРАТЬ
	        |		dbo_T_TITLEDOC.F_DOCNMB КАК НомерДокумента,
	        |		dbo_T_TITLEDOC.F_DOCDATE КАК ДатаДокумента,
	        |		dbo_T_APPOINTMENTS.F_POST КАК Должность,
	        |		dbo_T_APPOINTMENTS.F_STAFFSTR КАК ДолжностьПоШтатномуРасписанию,
	        |		dbo_T_APPOINTMENTS.F_CADDNREC2 КАК Сотрудник,
	        |		dbo_T_APPOINTMENTS.F_CONTRACTNMB КАК F_CONTRACTNMB,
	        |		dbo_T_CONTDOC.F_NREC КАК F_NREC,
	        |		dbo_T_CONTDOC.F_ATL_LASTDATE КАК F_ATL_LASTDATE,
	        |		""dbo_T_KPEREVOD"" КАК Таблица,
	        |		dbo_T_APPOINTMENTS.F_WORKREGIME КАК ГрафикРаботы,
	        |		dbo_T_APPOINTMENTS.F_EMPRATE КАК КоличествоСтавок,
	        |		dbo_T_APPOINTMENTS.F_APPOINTDATE КАК ДатаНачала,
	        |		dbo_T_APPOINTMENTS.F_DEPARTMENT КАК F_DEPARTMENT,
	        |		dbo_T_APPOINTMENTS.F_CONTRACTDATE КАК F_CONTRACTDATE,
	        |		dbo_T_APPOINTMENTS.F_PAYMODEL КАК F_PAYMODEL,
	        |		dbo_T_APPOINTMENTS.F_TAXRATE КАК F_TAXRATE
	        |	ИЗ
	        |		ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_CONTDOC КАК dbo_T_CONTDOC
	        |			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_PARTDOC КАК dbo_T_PARTDOC
	        |				ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_TITLEDOC КАК dbo_T_TITLEDOC
	        |				ПО dbo_T_PARTDOC.F_CDOC = dbo_T_TITLEDOC.F_NREC
	        |			ПО dbo_T_CONTDOC.F_CPART = dbo_T_PARTDOC.F_NREC
	        |			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_APPOINTMENTS КАК dbo_T_APPOINTMENTS
	        |				ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_LSCHET КАК dbo_T_LSCHET
	        |				ПО dbo_T_APPOINTMENTS.F_CADDNREC2 = dbo_T_LSCHET.F_NREC
	        |			ПО dbo_T_CONTDOC.F_CSTR = dbo_T_APPOINTMENTS.F_NREC
	        |	ГДЕ
	        |		(dbo_T_LSCHET.F_DATUV = 0
	        |				ИЛИ dbo_T_LSCHET.F_DATUV >= START_DATE())
	        |		И dbo_T_TITLEDOC.F_WSTATUS = 1
	        |		И dbo_T_CONTDOC.F_TYPEOPER = 5
	        |		И dbo_T_CONTDOC.F_SEQNMB = 2) КАК dbo_T_KPEREVOD";
			
			Возврат  Текст;
	
	
КонецФункции

Функция ВернутьТекстЗапросаВидыОтпусков()
	
	Текст = 
	"ВЫБРАТЬ
	|	dbo_T_KLOTPUSK.Таблица,
	|	BD_TO_NVARCHAR(dbo_T_KLOTPUSK.F_NREC) КАК F_NREC,
	|	dbo_T_KLOTPUSK.F_ATL_LASTDATE,
	|	dbo_T_KLOTPUSK.Наименование,
	|	dbo_T_KLOTPUSK.КоличествоДней,
	|	dbo_T_KLOTPUSK.Код
	|ИЗ
	|	(ВЫБРАТЬ
	|		""dbo_T_KLOTPUSK"" КАК Таблица,
	|		dbo_T_KLOTPUSK.F_NREC КАК F_NREC,
	|		dbo_T_KLOTPUSK.F_ATL_LASTDATE КАК F_ATL_LASTDATE,
	|		dbo_T_KLOTPUSK.F_NOTPUS КАК Наименование,
	|		dbo_T_KLOTPUSK.F_KOLDN КАК КоличествоДней,
	|		dbo_T_KLOTPUSK.F_KOTPUS КАК Код
	|	ИЗ
	|		ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KLOTPUSK КАК dbo_T_KLOTPUSK) КАК dbo_T_KLOTPUSK";
	
	Возврат  Текст;	
	
КонецФункции

Функция ВернутьТекстЗапросаПВРНачисления()
	
	Текст = 
	"ВЫБРАТЬ
	|	dbo_T_KLVIDOPL.Таблица,
	|	BD_TO_NVARCHAR(dbo_T_KLVIDOPL.F_NREC) КАК F_NREC,
	|	dbo_T_KLVIDOPL.F_ATL_LASTDATE,
	|	dbo_T_KLVIDOPL.F_VIDOPL КАК Код,
	|	dbo_T_KLVIDOPL.F_NVIDOPL КАК Наименование
	|ИЗ
	|	(ВЫБРАТЬ
	|		""dbo_T_KLVIDOPL"" КАК Таблица,
	|		dbo_T_KLVIDOPL.F_NREC КАК F_NREC,
	|		dbo_T_KLVIDOPL.F_ATL_LASTDATE КАК F_ATL_LASTDATE,
	|		dbo_T_KLVIDOPL.F_VIDOPL КАК F_VIDOPL,
	|		dbo_T_KLVIDOPL.F_NVIDOPL КАК F_NVIDOPL
	|	ИЗ
	|		ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KLVIDOPL КАК dbo_T_KLVIDOPL) КАК dbo_T_KLVIDOPL";
	
	Возврат  Текст;	
	
КонецФункции

Функция ВернутьТекстЗапросаПВРУдержания()
	
	Текст = 
	"ВЫБРАТЬ
	|	dbo_T_KLVIDUD.Таблица,
	|	BD_TO_NVARCHAR(dbo_T_KLVIDUD.F_NREC) КАК F_NREC,
	|	dbo_T_KLVIDUD.F_ATL_LASTDATE,
	|	dbo_T_KLVIDUD.F_VIDUD КАК Код,
	|	dbo_T_KLVIDUD.F_NVIDUD КАК Наименование
	|ИЗ
	|	(ВЫБРАТЬ
	|		""dbo_T_KLVIDUD"" КАК Таблица,
	|		dbo_T_KLVIDUD.F_NREC КАК F_NREC,
	|		dbo_T_KLVIDUD.F_ATL_LASTDATE КАК F_ATL_LASTDATE,
	|		dbo_T_KLVIDUD.F_VIDUD КАК F_VIDUD,
	|		dbo_T_KLVIDUD.F_NVIDUD КАК F_NVIDUD
	|	ИЗ
	|		ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KLVIDUD КАК dbo_T_KLVIDUD) КАК dbo_T_KLVIDUD";
	
	Возврат  Текст;	
	
КонецФункции

Функция ВернутьТекстЗапросаУвольнение()
	
	Текст = "ВЫБРАТЬ
	        |	dbo_T_UVOLNENIE.НомерДокумента,
	        |	dbo_T_UVOLNENIE.ДатаДокумента,
	        |	dbo_T_UVOLNENIE.Сотрудник,
	        |	BD_TO_NVARCHAR(dbo_T_UVOLNENIE.F_NREC) КАК F_NREC,
	        |	dbo_T_UVOLNENIE.F_ATL_LASTDATE,
	        |	dbo_T_UVOLNENIE.Таблица,
	        |	dbo_T_UVOLNENIE.ДатаУвольнения,
	        |	dbo_T_UVOLNENIE.ДнейКомпенсации
	        |ИЗ
	        |	(ВЫБРАТЬ
	        |		dbo_T_TITLEDOC.F_DOCNMB КАК НомерДокумента,
	        |		dbo_T_TITLEDOC.F_DOCDATE КАК ДатаДокумента,
	        |		dbo_T_APPOINTMENTS.F_CADDNREC2 КАК Сотрудник,
	        |		dbo_T_CONTDOC.F_NREC КАК F_NREC,
	        |		dbo_T_CONTDOC.F_ATL_LASTDATE КАК F_ATL_LASTDATE,
	        |		""dbo_T_UVOLNENIE"" КАК Таблица,
	        |		dbo_T_APPOINTMENTS.F_DISMISSDATE КАК ДатаУвольнения,
	        |		dbo_T_CONTDOC.F_LASTUSER КАК ДнейКомпенсации
	        |	ИЗ
	        |		ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_CONTDOC КАК dbo_T_CONTDOC
	        |			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_PARTDOC КАК dbo_T_PARTDOC
	        |				ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_TITLEDOC КАК dbo_T_TITLEDOC
	        |				ПО dbo_T_PARTDOC.F_CDOC = dbo_T_TITLEDOC.F_NREC
	        |			ПО dbo_T_CONTDOC.F_CPART = dbo_T_PARTDOC.F_NREC
	        |			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_APPOINTMENTS КАК dbo_T_APPOINTMENTS
	        |				ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_LSCHET КАК dbo_T_LSCHET
	        |				ПО dbo_T_APPOINTMENTS.F_CADDNREC2 = dbo_T_LSCHET.F_NREC
	        |			ПО dbo_T_CONTDOC.F_CSTR = dbo_T_APPOINTMENTS.F_NREC
	        |	ГДЕ
	        |		(dbo_T_LSCHET.F_DATUV = 0
	        |				ИЛИ dbo_T_LSCHET.F_DATUV >= START_DATE())
	        |		И dbo_T_TITLEDOC.F_WSTATUS = 1
	        |		И dbo_T_CONTDOC.F_TYPEOPER = 8
	        |		И dbo_T_CONTDOC.F_SEQNMB = 1
	        |		И dbo_T_TITLEDOC.F_DOCYEAR = 2016) КАК dbo_T_UVOLNENIE";
			
			Возврат  Текст;
	
	
КонецФункции
		
Функция ВернутьТекстЗапросаОтпуска()
	
	Текст = "ВЫБРАТЬ
	        |	dbo_T_VACATIONS.Сотрудник,
	        |	dbo_T_VACATIONS.Таблица,
	        |	BD_TO_NVARCHAR(dbo_T_VACATIONS.F_VACTYPE) КАК ГуидОтпуска,
	        |	dbo_T_VACATIONS.F_WORKYEARBEG КАК РабочийГодНачало,
	        |	dbo_T_VACATIONS.F_WORKYEAREND КАК РабочийГодОкончание,
	        |	dbo_T_VACATIONS.F_DURATION КАК Продолжительность,
	        |	dbo_T_VACATIONS.F_FOUNDATION КАК НомерДокумента,
	        |	dbo_T_VACATIONS.F_DOCDATE КАК ДатаДокумента,
	        |	dbo_T_VACATIONS.F_FACTYEARBEG КАК ДатаНачала,
	        |	dbo_T_VACATIONS.F_FACTYEAREND КАК ДатаОкончания,
	        |	BD_TO_NVARCHAR(dbo_T_VACATIONS.F_NREC) КАК F_NREC,
	        |	dbo_T_VACATIONS.F_ATL_LASTDATE,
	        |	dbo_T_VACATIONS.F_SUMMA КАК Сумма
	        |ИЗ
	        |	(ВЫБРАТЬ
	        |		dbo_T_APPOINTMENTS.F_CADDNREC2 КАК Сотрудник,
	        |		""dbo_T_VACATIONS"" КАК Таблица,
	        |		dbo_T_VACATIONS.F_VACTYPE КАК F_VACTYPE,
	        |		dbo_T_VACATIONS.F_WORKYEARBEG КАК F_WORKYEARBEG,
	        |		dbo_T_VACATIONS.F_WORKYEAREND КАК F_WORKYEAREND,
	        |		dbo_T_VACATIONS.F_DURATION КАК F_DURATION,
	        |		dbo_T_VACATIONS.F_FOUNDATION КАК F_FOUNDATION,
	        |		dbo_T_VACATIONS.F_DOCDATE КАК F_DOCDATE,
	        |		dbo_T_VACATIONS.F_FACTYEARBEG КАК F_FACTYEARBEG,
	        |		dbo_T_VACATIONS.F_FACTYEAREND КАК F_FACTYEAREND,
	        |		dbo_T_VACATIONS.F_NREC КАК F_NREC,
	        |		dbo_T_VACATIONS.F_ATL_LASTDATE КАК F_ATL_LASTDATE,
	        |		dbo_T_FACTOTPUSK.F_SUMMA КАК F_SUMMA
	        |	ИЗ
	        |		ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_VACATIONS КАК dbo_T_VACATIONS
	        |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_APPOINTMENTS КАК dbo_T_APPOINTMENTS
	        |			ПО dbo_T_VACATIONS.F_APPOINT = dbo_T_APPOINTMENTS.F_NREC
	        |			ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_FACTOTPUSK КАК dbo_T_FACTOTPUSK
	        |			ПО dbo_T_VACATIONS.F_CFACTOTPUSK = dbo_T_FACTOTPUSK.F_NREC
	        |	ГДЕ
	        |		dbo_T_VACATIONS.F_YEAR_VAC = 2016) КАК dbo_T_VACATIONS";
			
			Возврат  Текст;
	
	
КонецФункции

#КонецОбласти

Функция ЗаданиеПоТаблице(ИмяТаблицы, НаборПараметров) Экспорт
	
	Задание = Неопределено;
	
	Если ИмяТаблицы = "dbo_T_LSCHET" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаЗП.ВыполнитьСозданиеСотрудников", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_PERSONS" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаЗП.ВыполнитьСозданиеФизЛиц", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_CATALOGS_dolgnosti" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаЗП.ВыполнитьСозданиеДолжностей", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_STAFFSTRUCT" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаЗП.ВыполнитьСозданиеШР", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_PRIEMNARABOTU" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаЗП.ВыполнитьСозданиеПриемНаРаботу", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_KLREJIM" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаЗП.ВыполнитьСозданиеГрафиковРаботыСотрудников", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_CATALOGS_podr" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаЗП.ВыполнитьСозданиеПодразделенияОрганизации", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_KPEREVOD" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаЗП.ВыполнитьСозданиеКадровыйПеревод", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_UVOLNENIE" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаЗП.ВыполнитьСозданиеУвольнение", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_KLOTPUSK" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаЗП.ВыполнитьСозданиеВидовОтпусков", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_KLVIDOPL" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаЗП.ВыполнитьСозданиеПВРНачисления", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_KLVIDUD" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаЗП.ВыполнитьСозданиеПВРУдержания", НаборПараметров);
	ИначеЕсли ИмяТаблицы = "dbo_T_VACATIONS" Тогда
		Задание = ФоновыеЗадания.Выполнить("СинхронизацияГалактикаЗП.ВыполнитьСозданиеОтпуск", НаборПараметров);

	КонецЕсли;

	Возврат Задание;
	
КонецФункции

Процедура ВыполнитьСозданиеСотрудников(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Менеджер = Справочники.Сотрудники;
	Индекс = 0;
	
	Организация = Справочники.Организации.ПустаяСсылка();
	
	ОрганизацияЗапись = СтатическиеДанные.Найти("ОРГАНИЗАЦИЯ", "Реквизит");
	Если Не ОрганизацияЗапись = Неопределено Тогда 
		Организация = ОрганизацияЗапись.Значение;
	КонецЕсли;
	
	Для Сч = 1 По РазмерПроции Цикл
		
		ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
		
		Вариант = 1;
		
		ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
		
		Если ОбъектДляЗаписи = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ОбъектДляЗаписи.Наименование = ТекСтрока.F_FIO;
		ОбъектДляЗаписи.ГоловнаяОрганизация = Организация;
		
		Если ОбъектДляЗаписи.ЭтоНовый() Тогда
			
			СсылкаОбъекта = Справочники.Сотрудники.ПолучитьСсылку();
			ОбъектДляЗаписи.УстановитьСсылкуНового(СсылкаОбъекта);
			
		Иначе
			
			СсылкаОбъекта = ОбъектДляЗаписи.Ссылка;
			
		КонецЕсли;
		
		ОбъектДляЗаписи.ГоловнойСотрудник = СсылкаОбъекта;
		ОбъектДляЗаписи.Код = ТекСтрока.F_STRTABN; 
		
		Если Не СинхронизацияГалактикаОбщегоНазначения.ЭтоПустаяСсылка(ТекСтрока.F_TPERSON) Тогда 
			
			ФизЛицо = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_TPERSON, "dbo_T_PERSONS", "Физическое лицо", БлокировкиПотоков, НомерПотока);  
			
			ОбъектДляЗаписи.ФизическоеЛицо  = ФизЛицо;
			
		КонецЕсли;
		
		СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
		
		РегистрыСведений.ДанныеДляПодбораСотрудников.ДобавитьДанныеНовогоСотрудника(ОбъектДляЗаписи);

	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьСозданиеФизЛиц(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Менеджер = Справочники.ФизическиеЛица;
	Индекс = 0;
	Для Сч = 1 По РазмерПроции Цикл
		
		ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
		
		Вариант = 1;
		
		ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
		
		Если ОбъектДляЗаписи = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ОбъектДляЗаписи.ФИО = ТекСтрока.F_FIO;
		ОбъектДляЗаписи.Наименование = ТекСтрока.F_FIO; 
		ОбъектДляЗаписи.ДатаРождения = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.F_BORNDATE);
		ОбъектДляЗаписи.Пол = ?(НРег(СокрЛП(ТекСтрока.F_SEX)) = "м", Перечисления.ПолФизическогоЛица.Мужской, Перечисления.ПолФизическогоЛица.Женский);
		ОбъектДляЗаписи.ИНН = ТекСтрока.INN;
		ОбъектДляЗаписи.СтраховойНомерПФР = ТекСтрока.SNILS;
		
		ОбъектДляЗаписи.МестоРождения = ?(ЗначениеЗаполнено(ТекСтрока.BORNADDRTER), СокрЛП(ТекСтрока.BORNADDRTER) + ", ", "") + СокрЛП(ТекСтрока.BORNADDR);
		
		Если ЗначениеЗаполнено(ТекСтрока.LIVEADDR) Тогда
			
			НовСтр = ОбъектДляЗаписи.КонтактнаяИнформация.Добавить();
			НовСтр.Вид = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;
			НовСтр.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			НовСтр.Представление = ?(ЗначениеЗаполнено(ТекСтрока.LIVEADDRTER), СокрЛП(ТекСтрока.LIVEADDRTER) + ", ", "") + СокрЛП(ТекСтрока.LIVEADDR);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекСтрока.PASSPADDR) Тогда
			
			НовСтр = ОбъектДляЗаписи.КонтактнаяИнформация.Добавить();
			НовСтр.Вид = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
			НовСтр.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			НовСтр.Представление = ?(ЗначениеЗаполнено(ТекСтрока.PASSPADDRTER), СокрЛП(ТекСтрока.PASSPADDRTER) + ", ", "") + СокрЛП(ТекСтрока.PASSPADDR);
			
		КонецЕсли;
		
		СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
		
		НаборЗаписей = РегистрыСведений.ДокументыФизическихЛиц.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Физлицо.Установить(ОбъектДляЗаписи.Ссылка);
		НаборЗаписей.Отбор.ВидДокумента.Установить(Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ);
		
		Запись = НаборЗаписей.Добавить();
		Запись.Период = Дата(2016, 1, 1);
		Запись.Физлицо = ОбъектДляЗаписи.Ссылка;
		Запись.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ;
		Запись.Серия = СокрЛП(ТекСтрока.F_SER);
		Запись.Номер = СокрЛП(ТекСтрока.F_NMB);
		Запись.ДатаВыдачи = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.F_GIVENDATE);
		Запись.КемВыдан = СокрЛП(ТекСтрока.F_GIVENBY);
		Запись.КодПодразделения = СокрЛП(ТекСтрока.F_GIVENPODR);
		Запись.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьСозданиеДолжностей(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Менеджер = Справочники.Должности;
	Индекс = 0;
	Для Сч = 1 По РазмерПроции Цикл
		
		ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
		
		Вариант = 1;
		
		ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
		
		Если ОбъектДляЗаписи = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ОбъектДляЗаписи.Наименование = ТекСтрока.F_NAME; 
		
		СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
				
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьОтпускаДляШР(СсылкаНаШР) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("F_CSTAFFSTRUCT", СсылкаНаШР);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	BD_TO_NVARCHAR(dbo_T_KLOTPUSK.F_NREC) КАК ВидОтпуска,
	|	dbo_T_VACATIONALG.F_KOLDN КАК КоличествоДней
	|ИЗ
	|	ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_VACATIONSTS КАК dbo_T_VACATIONSTS
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_VACATIONALG КАК dbo_T_VACATIONALG
	|		ПО dbo_T_VACATIONALG.F_CVACATIONSTS = dbo_T_VACATIONSTS.F_NREC
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВнешнийИсточникДанных.ГалактикаБД.Таблица.dbo_T_KLOTPUSK КАК dbo_T_KLOTPUSK
	|		ПО dbo_T_KLOTPUSK.F_KOTPUS = dbo_T_VACATIONSTS.F_CKOTPUS
	|ГДЕ
	|	dbo_T_VACATIONSTS.F_CSTAFFSTRUCT = NVARCHAR_TO_BD(&F_CSTAFFSTRUCT)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ВыполнитьСозданиеШР(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Менеджер = Справочники.ШтатноеРасписание;
	Индекс = 0;
	
	ОрганизацияЗапись = СтатическиеДанные.Найти("ОРГАНИЗАЦИЯ", "Реквизит");
	Если Не ОрганизацияЗапись = Неопределено Тогда 
		Организация = ОрганизацияЗапись.Значение;
	КонецЕсли;
	
	Для Сч = 1 По РазмерПроции Цикл
		
		ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
		
		Вариант = 1;
		
		ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
		
		Если ОбъектДляЗаписи = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Должность = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_POST, "dbo_T_CATALOGS_dolgnosti", "Должность", БлокировкиПотоков, НомерПотока);  
		
		Подразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.Подразделение, "dbo_T_CATALOGS_podr", "Подразделение", БлокировкиПотоков, НомерПотока);  
		
		ОбъектДляЗаписи.Подразделение =  Подразделение;
		ОбъектДляЗаписи.Должность = Должность;
		
		ОбъектДляЗаписи.КоличествоСтавок = ТекСтрока.F_WORKSTATIONS;
		ОбъектДляЗаписи.Утверждена = Истина;
		ОбъектДляЗаписи.ДатаУтверждения = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.F_DINPUT);
		ОбъектДляЗаписи.Утверждена = Истина;
		ОбъектДляЗаписи.Владелец = Организация;
		ОбъектДляЗаписи.ДатаЗакрытия = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.F_DCLOSE);
		Если ЗначениеЗаполнено(ОбъектДляЗаписи.ДатаЗакрытия) Тогда
			ОбъектДляЗаписи.Закрыта = Истина;
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(Должность) Тогда
			ОбъектДляЗаписи.Наименование = Должность.Наименование;
		КонецЕсли;
		
		
		
		
		
		СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
		
	//	ОбъектДляЗаписи = ОбъектДляЗаписи.Ссылка.ПолучитьОбъект();
	//	ОбъектДляЗаписи.ОбменДанными.Загрузка = Истина;
	//	Отпуска = ПолучитьОтпускаДляШР(ТекСтрока.F_NREC);
	//	ОбъектДляЗаписи.ЕжегодныеОтпуска.Очистить();
	//	Для Каждого СтрокаОтпуска из Отпуска Цикл
	//		
	//		НовСтр = ОбъектДляЗаписи.ЕжегодныеОтпуска.Добавить();
	//		НовСтр.ВидЕжегодногоОтпуска = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(СтрокаОтпуска.ВидОтпуска, "dbo_T_KLOTPUSK", "Вид отпуска", БлокировкиПотоков, НомерПотока);  
	//	    НовСтр.КоличествоДнейВГод = СтрокаОтпуска.КоличествоДней;
	//		
	//	КонецЦикла;
	//	
	//	Попытка
	//	ОбъектДляЗаписи.Записать();
	//Исключение
	//	КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьСозданиеВидовОтпусков(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Менеджер = Справочники.ВидыОтпусков;
	Индекс = 0;
	
	ОрганизацияЗапись = СтатическиеДанные.Найти("ОРГАНИЗАЦИЯ", "Реквизит");
	Если Не ОрганизацияЗапись = Неопределено Тогда 
		Организация = ОрганизацияЗапись.Значение;
	КонецЕсли;
	
	Для Сч = 1 По РазмерПроции Цикл
		
		ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
		
		Вариант = 1;
		
		ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
		
		Если ОбъектДляЗаписи = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ОбъектДляЗаписи.Наименование = ТекСтрока.Наименование;
		ОбъектДляЗаписи.НаименованиеПолное = ТекСтрока.Наименование;
		//ОбъектДляЗаписи.Код = ТекСтрока.Код;
		ОбъектДляЗаписи.КоличествоДнейВГод = ТекСтрока.КоличествоДней;	
		
		СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьСозданиеПВРНачисления(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Менеджер = ПланыВидовРасчета.Начисления;
	Индекс = 0;
		
	Для Сч = 1 По РазмерПроции Цикл
		
		ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
		
		Вариант = 4;
		
		ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
		
		Если ОбъектДляЗаписи = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ОбъектДляЗаписи.Наименование = ТекСтрока.Наименование;
		ОбъектДляЗаписи.Код = ТекСтрока.Код;

		
		СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьСозданиеПВРУдержания(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Менеджер = ПланыВидовРасчета.Удержания;
	Индекс = 0;
		
	Для Сч = 1 По РазмерПроции Цикл
		
		ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
		
		Вариант = 4;
		
		ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
		
		Если ОбъектДляЗаписи = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ОбъектДляЗаписи.Наименование = ТекСтрока.Наименование;
		ОбъектДляЗаписи.Код = ТекСтрока.Код;

		
		СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьСозданиеПриемНаРаботу(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Менеджер = Документы.ПриемНаРаботу;
	Индекс = 0;
	
	ОрганизацияЗапись = СтатическиеДанные.Найти("ОРГАНИЗАЦИЯ", "Реквизит");
	Если Не ОрганизацияЗапись = Неопределено Тогда 
		Организация = ОрганизацияЗапись.Значение;
	КонецЕсли;
		
	Для Сч = 1 По РазмерПроции Цикл
		
		ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
		
		Вариант = 3;
		
		ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
		
		Если ОбъектДляЗаписи = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Должность = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.Должность, "dbo_T_CATALOGS_dolgnosti", "Должность", БлокировкиПотоков, НомерПотока);  
		
		ДолжностьПоШтатномуРасписанию = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.ДолжностьПоШтатномуРасписанию, "dbo_T_STAFFSTRUCT", "Позиция", БлокировкиПотоков, НомерПотока);  
		
		Подразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_DEPARTMENT, "dbo_T_CATALOGS_podr", "Подразделение", БлокировкиПотоков, НомерПотока);  
		
		Сотрудник = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.Сотрудник, "dbo_T_LSCHET", "Сотрудник", БлокировкиПотоков, НомерПотока);  
		
		ГрафикРаботы = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.ГрафикРаботы, "dbo_T_KLREJIM", "График работы", БлокировкиПотоков, НомерПотока);
		//ОбъектДляЗаписи = Документы.ПриемНаРаботу.СоздатьДокумент();
		
		ОбъектДляЗаписи.Организация = Организация;
		ОбъектДляЗаписи.Подразделение =  Подразделение;
		ОбъектДляЗаписи.Должность = Должность;
		ОбъектДляЗаписи.ДолжностьПоШтатномуРасписанию = ДолжностьПоШтатномуРасписанию;
		ОбъектДляЗаписи.Сотрудник = Сотрудник;
		ОбъектДляЗаписи.КоличествоСтавок = ТекСтрока.КоличествоСтавок;
		ОбъектДляЗаписи.ГрафикРаботы = ГрафикРаботы;
		Если ЗначениеЗаполнено(Сотрудник) Тогда
			ОбъектДляЗаписи.ФизическоеЛицо = Сотрудник.Физическоелицо;
		КонецЕсли;
		//ОбъектДляЗаписи.ДатаПриема = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.ДатаПриемаНаРаботу);
		ОбъектДляЗаписи.Дата = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.ДатаДокумента);
		ОбъектДляЗаписи.Номер = ТекСтрока.НомерДокумента;
		ОбъектДляЗаписи.ТрудовойДоговорДата = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.F_CONTRACTDATE);                         				
		ОбъектДляЗаписи.ТрудовойДоговорНомер = ТекСтрока.F_CONTRACTNMB;

		ВидЗанятости = ТекСтрока.F_SOVM;
		Если ВидЗанятости = 0 Тогда
			ОбъектДляЗаписи.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы;
		ИначеЕсли ВидЗанятости = 1 Тогда 
			ОбъектДляЗаписи.ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство;
		Иначе 
			ОбъектДляЗаписи.ВидЗанятости = Перечисления.ВидыЗанятости.ВнутреннееСовместительство;
		КонецЕсли;
		
		//ТЧ Начисления
		ОбъектДляЗаписи.Начисления.Очистить();
		Начисление = ОбъектДляЗаписи.Начисления.Добавить();
		Начисление.ИдентификаторСтрокиВидаРасчета = 1;
		Начисление.Размер = ТекСтрока.F_TAXRATE;
		Если ТекСтрока.F_PAYMODEL = 20 Тогда
			Начисление.Начисление = ПланыВидовРасчета.Начисления.НайтиПоКоду("СДЛЧС");
		ИначеЕсли ТекСтрока.F_PAYMODEL = 30 Тогда
			Начисление.Начисление = ПланыВидовРасчета.Начисления.НайтиПоКоду("ОКЛЧС");			
		Иначе
			Начисление.Начисление = ПланыВидовРасчета.Начисления.НайтиПоКоду("ТРФЧС");
		КонецЕсли;
		
		ОбъектДляЗаписи.Показатели.Очистить();
		Показатель = ОбъектДляЗаписи.Показатели.Добавить();
		Показатель.ИдентификаторСтрокиВидаРасчета = 1;
		Показатель.Значение = ТекСтрока.F_TAXRATE;
		Если ТекСтрока.F_PAYMODEL = 20 Тогда
			Показатель.Показатель = Справочники.ПоказателиРасчетаЗарплаты.ТарифнаяСтавкаЧасовая;
		ИначеЕсли ТекСтрока.F_PAYMODEL = 30 Тогда
			Показатель.Показатель = Справочники.ПоказателиРасчетаЗарплаты.Оклад;			
		Иначе
			Показатель.Показатель = Справочники.ПоказателиРасчетаЗарплаты.ТарифнаяСтавкаЧасовая;
		КонецЕсли;
		
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ДатаПриема", СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.ДатаПриемаНаРаботу));
		СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока,,,,ДанныеЗаполнения);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьСозданиеГрафиковРаботыСотрудников(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Менеджер = Справочники.ГрафикиРаботыСотрудников;
	Индекс = 0;
	
	Для Сч = 1 По РазмерПроции Цикл
		
		ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
		
		Вариант = 1;
		
		ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
		
		Если ОбъектДляЗаписи = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ОбъектДляЗаписи.Наименование = ТекСтрока.F_NREJIM;
		
		СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьСозданиеПодразделенияОрганизации(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Менеджер = Справочники.ПодразделенияОрганизаций;
	Индекс = 0;
	
	ОрганизацияЗапись = СтатическиеДанные.Найти("ОРГАНИЗАЦИЯ", "Реквизит");
	Если Не ОрганизацияЗапись = Неопределено Тогда 
		Организация = ОрганизацияЗапись.Значение;
	КонецЕсли;

	Для Сч = 1 По РазмерПроции Цикл
		
		ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
		
		Вариант = 1;
		
		ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
		
		Если ОбъектДляЗаписи = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ОбъектДляЗаписи.Наименование = ТекСтрока.F_NAME;
		
		Родитель = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_CPARENT, "dbo_T_CATALOGS_podr", "Подразделение", БлокировкиПотоков, НомерПотока);  
		
		ОбъектДляЗаписи.Родитель = Родитель;
		ОбъектДляЗаписи.ГоловнаяОрганизация = Организация;
		ОбъектДляЗаписи.Владелец = Организация;
		
		ОбъектДляЗаписи.Сформировано = Истина;
		ОбъектДляЗаписи.ДатаСоздания = Дата("20160101");
		

		
		СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьСозданиеКадровыйПеревод(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Менеджер = Документы.КадровыйПеревод;
	Индекс = 0;
	
	ОрганизацияЗапись = СтатическиеДанные.Найти("ОРГАНИЗАЦИЯ", "Реквизит");
	Если Не ОрганизацияЗапись = Неопределено Тогда 
		Организация = ОрганизацияЗапись.Значение;
	КонецЕсли;
		
	Для Сч = 1 По РазмерПроции Цикл
		
		ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
		
		Вариант = 3;
		
		ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
		
		Если ОбъектДляЗаписи = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Должность = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.Должность, "dbo_T_CATALOGS_dolgnosti", "Должность", БлокировкиПотоков, НомерПотока);  
		
		ДолжностьПоШтатномуРасписанию = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.ДолжностьПоШтатномуРасписанию, "dbo_T_STAFFSTRUCT", "Позиция", БлокировкиПотоков, НомерПотока);  
		
		Подразделение = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.F_DEPARTMENT, "dbo_T_CATALOGS_podr", "Подразделение", БлокировкиПотоков, НомерПотока);  
		
		Сотрудник = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.Сотрудник, "dbo_T_LSCHET", "Сотрудник", БлокировкиПотоков, НомерПотока);  
		
		ГрафикРаботы = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.ГрафикРаботы, "dbo_T_KLREJIM", "График работы", БлокировкиПотоков, НомерПотока);
		//ОбъектДляЗаписи = Документы.ПриемНаРаботу.СоздатьДокумент();
		
		ОбъектДляЗаписи.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы;
		
		ОбъектДляЗаписи.Организация = Организация;
		ОбъектДляЗаписи.ОбособленноеПодразделение = Организация;
		ОбъектДляЗаписи.Подразделение =  Подразделение;
		ОбъектДляЗаписи.Должность = Должность;
		ОбъектДляЗаписи.ДолжностьПоШтатномуРасписанию = ДолжностьПоШтатномуРасписанию;
		ОбъектДляЗаписи.Сотрудник = Сотрудник;
		ОбъектДляЗаписи.КоличествоСтавок = ТекСтрока.КоличествоСтавок;
		ОбъектДляЗаписи.ГрафикРаботы = ГрафикРаботы;
		Если ЗначениеЗаполнено(Сотрудник) Тогда
			ОбъектДляЗаписи.ФизическоеЛицо = Сотрудник.Физическоелицо;
		КонецЕсли;
		//ОбъектДляЗаписи.ДатаНачала = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.ДатаНачала);
		ОбъектДляЗаписи.Дата = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.ДатаДокумента);
		ОбъектДляЗаписи.Номер = ТекСтрока.НомерДокумента;
		//ОбъектДляЗаписи.ТрудовойДоговорДата = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.F_CONTRACTDATE);                         				
		//ОбъектДляЗаписи.ТрудовойДоговорНомер = ТекСтрока.F_CONTRACTNMB;
		ОбъектДляЗаписи.ИзменитьПодразделениеИДолжность = Истина;
		ОбъектДляЗаписи.ИзменитьГрафикРаботы = Истина;
		ОбъектДляЗаписи.ИзменитьНачисления = Истина;
		
		//ТЧ Начисления
		ОбъектДляЗаписи.Начисления.Очистить();
		Начисление = ОбъектДляЗаписи.Начисления.Добавить();
		Начисление.ИдентификаторСтрокиВидаРасчета = 1;
		Начисление.Размер = ТекСтрока.F_TAXRATE;
		Если ТекСтрока.F_PAYMODEL = 20 Тогда
			Начисление.Начисление = ПланыВидовРасчета.Начисления.НайтиПоКоду("СДЛЧС");
		ИначеЕсли ТекСтрока.F_PAYMODEL = 30 Тогда
			Начисление.Начисление = ПланыВидовРасчета.Начисления.НайтиПоКоду("ОКЛЧС");			
		Иначе
			Начисление.Начисление = ПланыВидовРасчета.Начисления.НайтиПоКоду("ТРФЧС");
		КонецЕсли;
		
		ОбъектДляЗаписи.Показатели.Очистить();
		Показатель = ОбъектДляЗаписи.Показатели.Добавить();
		Показатель.ИдентификаторСтрокиВидаРасчета = 1;
		Показатель.Значение = ТекСтрока.F_TAXRATE;
		Если ТекСтрока.F_PAYMODEL = 20 Тогда
			Показатель.Показатель = Справочники.ПоказателиРасчетаЗарплаты.ТарифнаяСтавкаЧасовая;
		ИначеЕсли ТекСтрока.F_PAYMODEL = 30 Тогда
			Показатель.Показатель = Справочники.ПоказателиРасчетаЗарплаты.Оклад;			
		Иначе
			Показатель.Показатель = Справочники.ПоказателиРасчетаЗарплаты.ТарифнаяСтавкаЧасовая;
		КонецЕсли;

		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ДатаНачала",СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.ДатаНачала)); 
		СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока,,,,ДанныеЗаполнения);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьСозданиеУвольнение(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Менеджер = Документы.Увольнение;
	Индекс = 0;
	
	ОрганизацияЗапись = СтатическиеДанные.Найти("ОРГАНИЗАЦИЯ", "Реквизит");
	Если Не ОрганизацияЗапись = Неопределено Тогда 
		Организация = ОрганизацияЗапись.Значение;
	КонецЕсли;
		
	Для Сч = 1 По РазмерПроции Цикл
		
		ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
		
		Вариант = 3;
		
		ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
		
		Если ОбъектДляЗаписи = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ОбъектДляЗаписи.Дата = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.ДатаДокумента);
		ОбъектДляЗаписи.Номер = ТекСтрока.НомерДокумента;
		ОбъектДляЗаписи.ПериодРегистрации = НачалоМесяца(СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.ДатаУвольнения));
		ОбъектДляЗаписи.Организация = Организация;
	    ОбъектДляЗаписи.ДатаУвольнения = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.ДатаУвольнения);
		ОбъектДляЗаписи.Сотрудник = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.Сотрудник, "dbo_T_LSCHET", "Сотрудник", БлокировкиПотоков, НомерПотока);
		Если ЗначениеЗаполнено(ОбъектДляЗаписи.Сотрудник) Тогда
			ОбъектДляЗаписи.ФизическоеЛицо = ОбъектДляЗаписи.Физическоелицо;
		КонецЕсли;
		
		Попытка
		КолДнейКомпенсации = Число(ТекСтрока.ДнейКомпенсации);
		Исключение
		КолДнейКомпенсации = 0;
		КонецПопытки;
		
		ОбъектДляЗаписи.ДнейКомпенсацииУдержанияОтпуска = ?(КолДнейКомпенсации<0, -КолДнейКомпенсации, КолДнейКомпенсации);
		
		Если КолДнейКомпенсации > 0 Тогда
			ОбъектДляЗаписи.ПризнакКомпенсацииУдержанияОтпуска = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные;
		ИначеЕсли КолДнейКомпенсации = 0 Тогда 
			ОбъектДляЗаписи.ПризнакКомпенсацииУдержанияОтпуска = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.НеИспользовать;
		Иначе 
			ОбъектДляЗаписи.ПризнакКомпенсацииУдержанияОтпуска = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом;
		КонецЕсли;		
		
		СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьСозданиеОтпуск(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков) Экспорт
	
	Индекс = 0;
	
//0x8000000000000002	Очередной отпуск
//0xC0003C121232C73B	Отпуск по уходу за ребенком до трех  лет (1 ребенок)
//0x8001000000000022	Отпуск по уходу за ребенком до трех лет (2 ребенок)
//0xC000F99C1B2F1BD7	Компенсация основной
//0x8001000000000030	Основной
//0x800100000000003B	Отпуск без сохранения заработной платы 
//0x800100000000003E	Учебный отпуск
//0x8001000000000041	Ежегодный основной оплачиваемый отпуск (инвалиды)
//0x8001000000000042	Ежегодный дополнительный оплачиваемый отпуск за работу в режиме ненормированного рабочего дня
//0x8001000000000044	Ежегодный дополнительный оплачиваемый отпуск за работу в районах Крайнего Севера
//0x8001000000000045	Ежегодный дополнительный оплачиваемый отпуск за работу в местностях приравненных к районам Крайнего Севера
//0x800100000000004F	Ежегодный основной оплачиваемый отпуск (сезон)
//0x800100000000004A	Компенсация доп.отп.районы край.севера
//0x800100000000004B	Компесация доп.опт.районы приравн.к край.северу
//0x800100000000004D	Компенсация доп.опл.отп. инвалиды
	
	//Счетчик = 0; 	
	
	Для Сч = 1 По РазмерПроции Цикл
		
		//Если Счетчик = 5 Тогда Прервать; КонецЕсли;
		
		ТекСтрока = СинхронизацияГалактикаОбщегоНазначения.ПолучитьСтрокуДляОбработки(ТаблицаДанных, Сч, ИндексНачала, Индекс);
		
		ВидОтпуска = Строка(ТекСтрока.ГуидОтпуска);
		
		Если ВидОтпуска = "0x800100000000003B" //Отпуск без сохранения заработной платы
			Тогда
			
			ВыполнитьСозданиеОтпускБезСохраниянияЗП(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков, ТекСтрока, ВидОтпуска);
			//Счетчик = Счетчик + 1;
			
		ИначеЕсли ВидОтпуска = "0x8000000000000002" //Очередной отпуск
			ИЛИ ВидОтпуска = "0xC000F99C1B2F1BD7" //Компенсация основной
			ИЛИ ВидОтпуска = "0x8001000000000030" //Основной
			ИЛИ ВидОтпуска = "0x800100000000003E" //Учебный отпуск
			ИЛИ ВидОтпуска = "0x8001000000000041" //Ежегодный основной оплачиваемый отпуск (инвалиды)
			ИЛИ ВидОтпуска = "0x8001000000000042" //Ежегодный дополнительный оплачиваемый отпуск за работу в режиме ненормированного рабочего дня
			ИЛИ ВидОтпуска = "0x8001000000000044" //Ежегодный дополнительный оплачиваемый отпуск за работу в районах Крайнего Севера
			ИЛИ ВидОтпуска = "0x8001000000000045" //Ежегодный дополнительный оплачиваемый отпуск за работу в местностях приравненных к районам Крайнего Севера
			ИЛИ ВидОтпуска = "0x800100000000004F" //Ежегодный основной оплачиваемый отпуск (сезон)
			ИЛИ ВидОтпуска = "0x800100000000004A" //Компенсация доп.отп.районы край.севера
			ИЛИ ВидОтпуска = "0x800100000000004B" //Компесация доп.опт.районы приравн.к край.северу
			ИЛИ ВидОтпуска = "0x800100000000004D" //Компенсация доп.опл.отп. инвалиды
			Тогда
			ВыполнитьСозданиеОтпуска(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков, ТекСтрока, ВидОтпуска);
			
		ИначеЕсли ВидОтпуска = "0xC0003C121232C73B" //Отпуск по уходу за ребенком до трех  лет (1 ребенок)
			ИЛИ ВидОтпуска = "0x8001000000000022" //Отпуск по уходу за ребенком до трех лет (2 ребенок)			
			Тогда
			ВыполнитьСозданиеОтпускаПоУходуЗаРебенком(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков, ТекСтрока, ВидОтпуска);
			
			
			
		КонецЕсли;
		
	КонецЦикла;		
		
КонецПроцедуры

Процедура ВыполнитьСозданиеОтпускБезСохраниянияЗП(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков, ТекСтрока, ВидРасчета) Экспорт
	
	ОрганизацияЗапись = СтатическиеДанные.Найти("ОРГАНИЗАЦИЯ", "Реквизит");
	Если Не ОрганизацияЗапись = Неопределено Тогда 
		Организация = ОрганизацияЗапись.Значение;
	КонецЕсли;
	
	Менеджер = Документы.ОтпускБезСохраненияОплаты;
	
	Вариант = 3;
	
	ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
	
	Если ОбъектДляЗаписи = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектДляЗаписи.Дата = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.ДатаДокумента);
	ОбъектДляЗаписи.Номер = ТекСтрока.НомерДокумента;
	ОбъектДляЗаписи.ПериодРегистрации = НачалоМесяца(СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.ДатаДокумента));
	ОбъектДляЗаписи.Организация = Организация;
	ОбъектДляЗаписи.ДатаНачала = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.ДатаНачала);
	ОбъектДляЗаписи.ДатаОкончания = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.ДатаОкончания);		
	ОбъектДляЗаписи.Сотрудник = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.Сотрудник, "dbo_T_LSCHET", "Сотрудник", БлокировкиПотоков, НомерПотока);
	ОбъектДляЗаписи.ВидРасчета = ПланыВидовРасчета.Начисления.НайтиПоНаименованию("Отпуск без оплаты согласно ТК РФ");
	ОбъектДляЗаписи.ВидОтпуска = Справочники.ВидыОтпусков.ОтпускБезОплатыПоТКРФ;
	
	Если ЗначениеЗаполнено(ОбъектДляЗаписи.Сотрудник) Тогда
		ОбъектДляЗаписи.ФизическоеЛицо = ОбъектДляЗаписи.Сотрудник.ФизическоеЛицо;
	КонецЕсли;
	
	
	
	СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
	
КонецПроцедуры

Процедура ВыполнитьСозданиеОтпуска(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков, ТекСтрока, ВидРасчета) Экспорт
	
	ОрганизацияЗапись = СтатическиеДанные.Найти("ОРГАНИЗАЦИЯ", "Реквизит");
	Если Не ОрганизацияЗапись = Неопределено Тогда 
		Организация = ОрганизацияЗапись.Значение;
	КонецЕсли;
	
	//ВидОтпуска = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.ГуидОтпуска, "dbo_T_KLOTPUSK", "Вид отпуска", БлокировкиПотоков, НомерПотока);
	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Соответствие1СГалактикаСрезПоследних.Значение1С
		|ИЗ
		|	РегистрСведений.Соответствие1СГалактика.СрезПоследних(
		|			,
		|			ИмяТаблицы = &Таблица
		|				И F_NREC = &ГУИД) КАК Соответствие1СГалактикаСрезПоследних";
	
	Запрос.УстановитьПараметр("ГУИД", ТекСтрока.ГуидОтпуска);
	Запрос.УстановитьПараметр("Таблица", "dbo_T_KLOTPUSK");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ВидОтпуска = ВыборкаДетальныеЗаписи.Значение1С;
	Иначе
		ВидОтпуска = Неопределено;
	КонецЕсли;;

			
	ОсновнойОтпуск = ЛОжь; 	
	Отпуск = ЛОжь;
	Компенсация = ЛОжь;
	Если ВидРасчета = "0x8000000000000002" //Очередной отпуск
		ИЛИ ВидРасчета = "0x8001000000000030" //Основной
		ИЛИ ВидРасчета = "0x800100000000003E" //Учебный отпуск
		ИЛИ ВидРасчета = "0x8001000000000041" //Ежегодный основной оплачиваемый отпуск (инвалиды)
		ИЛИ ВидРасчета = "0x8001000000000042" //Ежегодный дополнительный оплачиваемый отпуск за работу в режиме ненормированного рабочего дня
		ИЛИ ВидРасчета = "0x8001000000000044" //Ежегодный дополнительный оплачиваемый отпуск за работу в районах Крайнего Севера
		ИЛИ ВидРасчета = "0x8001000000000045" //Ежегодный дополнительный оплачиваемый отпуск за работу в местностях приравненных к районам Крайнего Севера
		ИЛИ ВидРасчета = "0x800100000000004F" //Ежегодный основной оплачиваемый отпуск (сезон)
		Тогда
		Отпуск = Истина;
	Иначе
		Компенсация = Истина;
	КонецЕсли;
	
	Если ВидРасчета = "0x8000000000000002" //Очередной отпуск
		ИЛИ ВидРасчета = "0x8001000000000030" //Основной
		ИЛИ ВидРасчета = "0x800100000000003E" //Учебный отпуск
		ИЛИ ВидРасчета = "0x8001000000000041" //Ежегодный основной оплачиваемый отпуск (инвалиды)
		ИЛИ ВидРасчета = "0x800100000000004F" //Ежегодный основной оплачиваемый отпуск (сезон)
		ИЛИ ВидРасчета = "0xC000F99C1B2F1BD7" //Компенсация основной
		Тогда
	    ОсновнойОтпуск = Истина;
	КонецЕсли;
	
	Менеджер = Документы.Отпуск;
	
	Вариант = 3;
	
	ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
	
	#Если ТонкийКлиент Тогда
	ОбъектДляЗаписи = Документы.Отпуск.СоздатьДокумент();
	#КонецЕсли
	
	Если ОбъектДляЗаписи = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
		ОбъектДляЗаписи.Начисления.Очистить();
	ОбъектДляЗаписи.ПредоставитьДополнительныйОтпуск = Ложь;
	ОбъектДляЗаписи.ПредоставитьКомпенсациюОсновногоОтпуска = Ложь;
	ОбъектДляЗаписи.ПредоставитьКомпенсациюОсновногоОтпуска = Ложь;			
	ОбъектДляЗаписи.ДополнительныеОтпуска.Очистить();

	
	ОбъектДляЗаписи.Дата = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.ДатаДокумента);
	ОбъектДляЗаписи.Номер = ТекСтрока.НомерДокумента;
	ОбъектДляЗаписи.ПериодРегистрации = НачалоМесяца(СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.ДатаДокумента));
	ОбъектДляЗаписи.Организация = Организация;
	ОбъектДляЗаписи.Сотрудник = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.Сотрудник, "dbo_T_LSCHET", "Сотрудник", БлокировкиПотоков, НомерПотока);
	
	Если Отпуск Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ВидОтпуска = &ВидОтпуска
		|	И НЕ Начисления.ПометкаУдаления
		|	И Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = &КатегорияНачисленияИлиНеоплаченногоВремени";
		
		Запрос.УстановитьПараметр("ВидОтпуска", ВидОтпуска);
		Запрос.УстановитьПараметр("КатегорияНачисленияИлиНеоплаченногоВремени", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда		
			ВидРасчетаОтпуска = ВыборкаДетальныеЗаписи.Ссылка;				
		КонецЕсли;
		
		Если ВидОтпуска = Справочники.ВидыОтпусков.Основной Тогда
			ВидРасчетаОтпуска = ПланыВидовРасчета.Начисления.НайтиПоНаименованию("Отпуск основной");
		КонецЕсли;		
		
		ОбъектДляЗаписи.ДатаНачалаСобытия = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.ДатаНачала);
		ОбъектДляЗаписи.ДатаНачалаПериодаОтсутствия = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.ДатаНачала);
		ОбъектДляЗаписи.ДатаОкончанияПериодаОтсутствия = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.ДатаОкончания);
		
		Если ОсновнойОтпуск Тогда
			
			ОбъектДляЗаписи.ПредоставитьОсновнойОтпуск = Истина;
			ОбъектДляЗаписи.ДатаНачалаОсновногоОтпуска = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.ДатаНачала);
			ОбъектДляЗаписи.ДатаОкончанияОсновногоОтпуска = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.ДатаОкончания);
			ОбъектДляЗаписи.КоличествоДнейОсновногоОтпуска = ТекСтрока.Продолжительность;			
			ОбъектДляЗаписи.ВидРасчетаОсновногоОтпуска = ВидРасчетаОтпуска;
			
	
		КонецЕсли;
		
	КонецЕсли;
	
	Если Компенсация Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ВидОтпуска = &ВидОтпуска
		|	И НЕ Начисления.ПометкаУдаления
		|	И Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = &КатегорияНачисленияИлиНеоплаченногоВремени";
		
		Запрос.УстановитьПараметр("ВидОтпуска", ВидОтпуска);
		Запрос.УстановитьПараметр("КатегорияНачисленияИлиНеоплаченногоВремени", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска);
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		ОбъектДляЗаписи.ПредоставитьКомпенсациюОсновногоОтпуска = Истина;
		ОбъектДляЗаписи.КоличествоДнейКомпенсацииОсновногоОтпуска = ТекСтрока.Продолжительность;
		ОбъектДляЗаписи.ВидРасчетаКомпенсацииОсновногоОтпуска = ВидРасчетаОтпуска;
		
	КонецЕсли;
	
		
		
	НовСтрНачисления = ОбъектДляЗаписи.Начисления.Добавить();
	НовСтрНачисления.Начисление = ВидРасчетаОтпуска;
	НовСтрНачисления.ДатаНачала = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.ДатаНачала);
	НовСтрНачисления.ДатаОкончания = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.ДатаОкончания);		
	НовСтрНачисления.Результат = ТекСтрока.Сумма;
	НовСтрНачисления.ОтработаноДней = ТекСтрока.Продолжительность;
	НовСтрНачисления.Сотрудник = ОбъектДляЗаписи.Сотрудник;
	НовСтрНачисления.ОплаченоДней = ТекСтрока.Продолжительность;
	НовСтрНачисления.ФиксСтрока = Истина;
	НовСтрНачисления.ФиксРасчетВремени = Истина;
	НовСтрНачисления.ФиксРасчет = Истина;
	НовСтрНачисления.ФиксЗаполнение = Истина;
	
	Если НЕ ОсновнойОтпуск Тогда
		
		ОбъектДляЗаписи.ПредоставитьДополнительныйОтпуск = Истина;
	
		НовСтр = ОбъектДляЗаписи.ДополнительныеОтпуска.Добавить();
		НовСтр.ВидОтпуска = ВидОтпуска;
		НовСтр.ДатаНачала = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.ДатаНачала);
		НовСтр.ДатаОкончания = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.ДатаОкончания);		
		
		Если Компенсация Тогда
			
			НовСтр.КоличествоДнейКомпенсации = ТекСтрока.Продолжительность;
			НовСтр.ВидРасчетаКомпенсации = ВидРасчетаОтпуска;
			
		Иначе	
			
			НовСтр.КоличествоДней = ТекСтрока.Продолжительность;
			НовСтр.ВидРасчета = ВидРасчетаОтпуска;
			
		КонецЕсли;
		
		НовСтр.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.РабочийГодНачало);	
		НовСтр.КонецПериодаЗаКоторыйПредоставляетсяОтпуск = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.РабочийГодОкончание);	
		
	КонецЕсли; 	
	
	ОбъектДляЗаписи.ДокументРассчитан = Истина;	

	ОбъектДляЗаписи.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.РабочийГодНачало);	
	ОбъектДляЗаписи.КонецПериодаЗаКоторыйПредоставляетсяОтпуск = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.РабочийГодОкончание);	
	
		
	Если ЗначениеЗаполнено(ОбъектДляЗаписи.Сотрудник) Тогда
		ОбъектДляЗаписи.ФизическоеЛицо = ОбъектДляЗаписи.Сотрудник.ФизическоеЛицо;
	КонецЕсли;	
	
	СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
	
КонецПроцедуры

Процедура ВыполнитьСозданиеОтпускаПоУходуЗаРебенком(ТаблицаДанных, ИндексНачала, РазмерПроции, ИмяТаблицы, СтатическиеДанные, НомерПотока, БлокировкиПотоков, ТекСтрока, ВидРасчета) Экспорт
	//
	//ОрганизацияЗапись = СтатическиеДанные.Найти("ОРГАНИЗАЦИЯ", "Реквизит");
	//Если Не ОрганизацияЗапись = Неопределено Тогда 
	//	Организация = ОрганизацияЗапись.Значение;
	//КонецЕсли;
	//
	//Менеджер = Документы.ОтпускБезСохраненияОплаты;
	//
	//Вариант = 3;
	//
	//ОбъектДляЗаписи = СинхронизацияГалактикаОбщегоНазначения.ВыполнитьПоискОбъекта(ТекСтрока, ИмяТаблицы, Менеджер, Вариант);
	//
	//Если ОбъектДляЗаписи = Неопределено Тогда 
	//	Возврат;
	//КонецЕсли;
	//
	//ОбъектДляЗаписи.Дата = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.ДатаДокумента);
	//ОбъектДляЗаписи.Номер = ТекСтрока.НомерДокумента;
	//ОбъектДляЗаписи.ПериодРегистрации = НачалоМесяца(СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.ДатаДокумента));
	//ОбъектДляЗаписи.Организация = Организация;
	//ОбъектДляЗаписи.ДатаНачала = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.ДатаНачала);
	//ОбъектДляЗаписи.ДатаОкончания = СинхронизацияГалактикаОбщегоНазначения.ПреобразоватьДатуИзГалактики(ТекСтрока.ДатаОкончания);		
	//ОбъектДляЗаписи.Сотрудник = СинхронизацияГалактикаОбщегоНазначения.НайтиПодчиненныйОбъектПоОтбору(ТекСтрока.Сотрудник, "dbo_T_LSCHET", "Сотрудник", БлокировкиПотоков, НомерПотока);
	//ОбъектДляЗаписи.ВидРасчета = ПланыВидовРасчета.Начисления.НайтиПоНаименованию("Отпуск без оплаты согласно ТК РФ");
	//ОбъектДляЗаписи.ВидОтпуска = Справочники.ВидыОтпусков.ОтпускБезОплатыПоТКРФ;
	//
	//Если ЗначениеЗаполнено(ОбъектДляЗаписи.Сотрудник) Тогда
	//	ОбъектДляЗаписи.ФизическоеЛицо = ОбъектДляЗаписи.Сотрудник.ФизическоеЛицо;
	//КонецЕсли;
	//
	//
	//
	//СинхронизацияГалактикаОбщегоНазначения.ВыполнитьЗаписьВБазуДанных(ОбъектДляЗаписи, ИмяТаблицы, ТекСтрока);
	
КонецПроцедуры